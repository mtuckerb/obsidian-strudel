import { map as Te } from "nanostores";
if (typeof DelayNode < "u") {
  class t extends DelayNode {
    constructor(n, c, a, o) {
      super(n), c = Math.abs(c), this.delayTime.value = a;
      const s = n.createGain();
      s.gain.value = Math.min(Math.abs(o), 0.995), this.feedback = s.gain;
      const d = n.createGain();
      return d.gain.value = c, this.delayGain = d, this.connect(s), this.connect(d), s.connect(this), this.connect = (l) => d.connect(l), this;
    }
    start(n) {
      this.delayGain.gain.setValueAtTime(this.delayGain.gain.value, n + this.delayTime.value);
    }
  }
  AudioContext.prototype.createFeedbackDelay = function(e, n, c) {
    return new t(this, e, n, c);
  };
}
var wt = {};
wt.generateReverb = function(t, e) {
  for (var n = t.audioContext || new AudioContext(), c = n.sampleRate, a = t.numChannels || 2, o = t.decayTime * 1.5, s = Math.round(t.decayTime * c), d = Math.round(o * c), l = Math.round((t.fadeInTime || 0) * c), r = Math.pow(1 / 1e3, 1 / s), i = n.createBuffer(a, d, c), b = 0; b < a; b++) {
    for (var m = i.getChannelData(b), u = 0; u < d; u++)
      m[u] = Fe() * Math.pow(r, u);
    for (var u = 0; u < l; u++)
      m[u] *= u / l;
  }
  Ne(i, t.lpFreqStart || 0, t.lpFreqEnd || 0, t.decayTime, e);
};
wt.generateGraph = function(t, e, n, c, a) {
  var o = document.createElement("canvas");
  o.width = e, o.height = n;
  var s = o.getContext("2d");
  s.fillStyle = "#000", s.fillRect(0, 0, o.width, o.height), s.fillStyle = "#fff";
  for (var d = e / t.length, l = n / (a - c), r = 0; r < t.length; r++)
    s.fillRect(r * d, n - (t[r] - c) * l, 1, 1);
  return o;
};
var Ne = function(t, e, n, c, a) {
  if (e == 0) {
    a(t);
    return;
  }
  var o = Ye(t), s = new OfflineAudioContext(t.numberOfChannels, o[0].length, t.sampleRate), d = s.createBufferSource();
  d.buffer = t;
  var l = s.createBiquadFilter();
  e = Math.min(e, t.sampleRate / 2), n = Math.min(n, t.sampleRate / 2), l.type = "lowpass", l.Q.value = 1e-4, l.frequency.setValueAtTime(e, 0), l.frequency.linearRampToValueAtTime(n, c), d.connect(l), l.connect(s.destination), d.start(), s.oncomplete = function(r) {
    a(r.renderedBuffer);
  }, s.startRendering(), window.filterNode = l;
}, Ye = function(t) {
  for (var e = [], n = 0; n < t.numberOfChannels; n++)
    e[n] = t.getChannelData(n);
  return e;
}, Fe = function() {
  return Math.random() * 2 - 1;
};
typeof AudioContext < "u" && (AudioContext.prototype.adjustLength = function(t, e) {
  const n = e.sampleRate * t, c = this.createBuffer(e.numberOfChannels, e.length, e.sampleRate);
  for (let a = 0; a < e.numberOfChannels; a++) {
    let o = e.getChannelData(a), s = c.getChannelData(a);
    for (let d = 0; d < n; d++)
      s[d] = o[d] || 0;
  }
  return c;
}, AudioContext.prototype.createReverb = function(t, e, n, c, a) {
  const o = this.createConvolver();
  return o.generate = (s = 2, d = 0.1, l = 15e3, r = 1e3, i) => {
    o.duration = s, o.fade = d, o.lp = l, o.dim = r, o.ir = i, i ? o.buffer = this.adjustLength(s, i) : wt.generateReverb(
      {
        audioContext: this,
        numChannels: 2,
        decayTime: s,
        fadeInTime: d,
        lpFreqStart: l,
        lpFreqEnd: r
      },
      (b) => {
        o.buffer = b;
      }
    );
  }, o.generate(t, e, n, c, a), o;
});
var ee = {
  a: { freqs: [660, 1120, 2750, 3e3, 3350], gains: [1, 0.5012, 0.0708, 0.0631, 0.0126], qs: [80, 90, 120, 130, 140] },
  e: { freqs: [440, 1800, 2700, 3e3, 3300], gains: [1, 0.1995, 0.1259, 0.1, 0.1], qs: [70, 80, 100, 120, 120] },
  i: { freqs: [270, 1850, 2900, 3350, 3590], gains: [1, 0.0631, 0.0631, 0.0158, 0.0158], qs: [40, 90, 100, 120, 120] },
  o: { freqs: [430, 820, 2700, 3e3, 3300], gains: [1, 0.3162, 0.0501, 0.0794, 0.01995], qs: [40, 80, 100, 120, 120] },
  u: { freqs: [370, 630, 2750, 3e3, 3400], gains: [1, 0.1, 0.0708, 0.0316, 0.01995], qs: [40, 60, 100, 120, 120] },
  ae: { freqs: [650, 1515, 2400, 3e3, 3350], gains: [1, 0.5, 0.1008, 0.0631, 0.0126], qs: [80, 90, 120, 130, 140] },
  aa: { freqs: [560, 900, 2570, 3e3, 3300], gains: [1, 0.5, 0.0708, 0.0631, 0.0126], qs: [80, 90, 120, 130, 140] },
  oe: { freqs: [500, 1430, 2300, 3e3, 3300], gains: [1, 0.2, 0.0708, 0.0316, 0.01995], qs: [40, 60, 100, 120, 120] },
  ue: { freqs: [250, 1750, 2150, 3200, 3300], gains: [1, 0.1, 0.0708, 0.0316, 0.01995], qs: [40, 60, 100, 120, 120] },
  y: { freqs: [400, 1460, 2400, 3e3, 3300], gains: [1, 0.2, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  uh: { freqs: [600, 1250, 2100, 3100, 3500], gains: [1, 0.3, 0.0608, 0.0316, 0.01995], qs: [40, 70, 100, 120, 130] },
  un: { freqs: [500, 1240, 2280, 3e3, 3500], gains: [1, 0.1, 0.1708, 0.0216, 0.02995], qs: [40, 60, 100, 120, 120] },
  en: { freqs: [600, 1480, 2450, 3200, 3300], gains: [1, 0.15, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  an: { freqs: [700, 1050, 2500, 3e3, 3300], gains: [1, 0.1, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  on: { freqs: [500, 1080, 2350, 3e3, 3300], gains: [1, 0.1, 0.0708, 0.0316, 0.02995], qs: [40, 60, 100, 120, 120] },
  get æ() {
    return this.ae;
  },
  get ø() {
    return this.oe;
  },
  get ɑ() {
    return this.aa;
  },
  get å() {
    return this.aa;
  },
  get ö() {
    return this.oe;
  },
  get ü() {
    return this.ue;
  },
  get ı() {
    return this.y;
  }
};
if (typeof GainNode < "u") {
  class t extends GainNode {
    constructor(n, c) {
      if (super(n), !ee[c])
        throw new Error("vowel: unknown vowel " + c);
      const { gains: a, qs: o, freqs: s } = ee[c], d = n.createGain();
      for (let l = 0; l < 5; l++) {
        const r = n.createGain();
        r.gain.value = a[l];
        const i = n.createBiquadFilter();
        i.type = "bandpass", i.Q.value = o[l], i.frequency.value = s[l], this.connect(i), i.connect(r), r.connect(d);
      }
      return d.gain.value = 8, this.connect = (l) => d.connect(l), this;
    }
  }
  AudioContext.prototype.createVowelFilter = function(e) {
    return new t(this, e);
  };
}
let le = (t) => console.log(t);
const N = (...t) => le(...t), Ln = (t) => {
  le = t;
}, Pe = (t) => {
  if (typeof t != "string")
    return [];
  const [e, n = "", c] = t.match(/^([a-gA-G])([#bsf]*)([0-9]*)$/)?.slice(1) || [];
  return e ? [e, n, c ? Number(c) : void 0] : [];
}, Ce = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 }, ve = { "#": 1, b: -1, s: 1, f: -1 }, Xt = (t, e = 3) => {
  const [n, c, a = e] = Pe(t);
  if (!n)
    throw new Error('not a note: "' + t + '"');
  const o = Ce[n.toLowerCase()], s = c?.split("").reduce((d, l) => d + ve[l], 0) || 0;
  return (Number(a) + 1) * 12 + o + s;
}, re = (t) => Math.pow(2, (t - 69) / 12) * 440, et = (t, e, n) => Math.min(Math.max(t, e), n), Je = (t) => 12 * Math.log(t / 440) / Math.LN2 + 69, Ie = (t, e) => {
  if (typeof t != "object")
    throw new Error("valueToMidi: expected object value");
  let { freq: n, note: c } = t;
  return typeof n == "number" ? Je(n) : typeof c == "string" ? Xt(c) : typeof c == "number" ? c : e;
};
function k(t, e = 0, n) {
  return isNaN(Number(t)) ? (!n && N(`"${t}" is not a number, falling back to ${e}`, "warning"), e) : t;
}
const ie = (t, e) => (t % e + e) % e, ne = (t, e) => ie(Math.round(k(t, 0)), e), ke = "data:text/javascript;base64,";
function U(t) {
  const e = V().createGain();
  return e.gain.value = t, e;
}
const ce = (t, e, n, c) => c - n === 0 ? 0 : (e - t) / (c - n);
function I(t, e, n, c) {
  const a = new AudioWorkletNode(t, e, c);
  return Object.entries(n).forEach(([o, s]) => {
    a.parameters.get(o).value = s;
  }), a;
}
const j = (t, e, n, c, a, o, s, d, l, r = "exponential") => {
  e = k(e), n = k(n), c = k(c), a = k(a);
  const i = r === "exponential" ? "exponentialRampToValueAtTime" : "linearRampToValueAtTime";
  r === "exponential" && (o = o === 0 ? 1e-3 : o, s = s === 0 ? 1e-3 : s);
  const b = s - o, m = s, u = o + c * b, h = l - d, X = (Z) => {
    let y;
    if (e > Z) {
      let p = ce(o, m, 0, e);
      y = Z * p + (o > m ? o : 0);
    } else
      y = (Z - e) * ce(m, u, 0, n) + m;
    return r === "exponential" && (y = y || 1e-3), y;
  };
  t.setValueAtTime(o, d), e > h ? t[i](X(h), l) : e + n > h ? (t[i](X(e), d + e), t[i](X(h), l)) : (t[i](X(e), d + e), t[i](X(e + n), d + e + n), t.setValueAtTime(u, l)), t[i](o, l + a);
};
function Be(t, e, n, c, a, o) {
  const s = {
    threshold: e ?? -3,
    ratio: n ?? 10,
    knee: c ?? 10,
    attack: a ?? 5e-3,
    release: o ?? 0.05
  };
  return new DynamicsCompressorNode(t, s);
}
const E = (t, e = "linear", n) => {
  const [s, d, l, r] = t;
  if (s == null && d == null && l == null && r == null)
    return n ?? [1e-3, 1e-3, 1, 0.01];
  const i = l ?? (s != null && d == null || s == null && d == null ? 1 : 1e-3);
  return [Math.max(s ?? 0, 1e-3), Math.max(d ?? 0, 1e-3), Math.min(i, 1), Math.max(r ?? 0, 0.01)];
};
function ft(t, e, n, c, a, o, s, d, l, r, i, b, m, u) {
  const h = "exponential", [X, Z, y, p] = E([a, o, s, d], h, [5e-3, 0.14, 0, 0.1]);
  let W, x;
  if (m === "ladder" ? (W = I(t, "ladder-processor", { frequency: n, q: c, drive: u }), x = W.parameters.get("frequency")) : (W = t.createBiquadFilter(), W.type = e, W.Q.value = c, W.frequency.value = n, x = W.frequency), (a ?? o ?? s ?? d ?? l) !== void 0) {
    l = k(l, 1, !0), b = k(b, 0, !0);
    const z = Math.abs(l), w = z * b;
    let L = et(2 ** -w * n, 0, 2e4), S = et(2 ** (z - w) * n, 0, 2e4);
    return l < 0 && ([L, S] = [S, L]), j(x, X, Z, y, p, L, S, r, i, h), W;
  }
  return W;
}
let oe = (t) => t < 0.5 ? 1 : 1 - (t - 0.5) / 0.5;
function Qe(t, e, n = 0) {
  const c = V();
  if (!n)
    return t;
  let a = c.createGain(), o = c.createGain();
  t.connect(a), e.connect(o), a.gain.value = oe(n), o.gain.value = oe(1 - n);
  let s = c.createGain();
  return a.connect(s), o.connect(s), s;
}
let Ue = ["linear", "exponential"];
function ut(t, e, n, c) {
  if (!(e.pattack ?? e.pdecay ?? e.psustain ?? e.prelease ?? e.penv))
    return;
  const o = k(e.penv, 1, !0), s = Ue[e.pcurve ?? 0];
  let [d, l, r, i] = E(
    [e.pattack, e.pdecay, e.psustain, e.prelease],
    s,
    [0.2, 1e-3, 1, 1e-3]
  ), b = e.panchor ?? r;
  const m = o * 100, u = 0 - m * b, h = m - m * b;
  j(t, d, l, r, i, u, h, n, c, s);
}
function mt(t, e, n) {
  const { vibmod: c = 0.5, vib: a } = e;
  let o;
  if (a > 0) {
    o = V().createOscillator(), o.frequency.value = a;
    const s = V().createGain();
    return s.gain.value = c * 100, o.connect(s), s.connect(t), o.start(n), o;
  }
}
function se(t, e, n, c) {
  const a = t.createConstantSource();
  return a.start(n), a.stop(c), a.onended = () => {
    e();
  }, a;
}
const je = (t, e = 1, n = "sine") => {
  const c = V(), a = c.createOscillator();
  a.type = n, a.frequency.value = t, a.start();
  const o = new GainNode(c, { gain: e });
  return a.connect(o), { node: o, stop: (s) => a.stop(s) };
}, Ee = (t, e, n, c = "sine") => {
  const o = t.value * e, s = o * n;
  return je(o, s, c);
};
function Lt(t, e, n) {
  const {
    fmh: c = 1,
    fmi: a,
    fmenv: o = "exp",
    fmattack: s,
    fmdecay: d,
    fmsustain: l,
    fmrelease: r,
    fmvelocity: i,
    fmwave: b = "sine",
    duration: m
  } = e;
  let u, h = () => {
  };
  if (a) {
    const Z = V().createGain(), y = Ee(t, c, a, b);
    if (u = y.node, h = y.stop, ![s, d, l, r, i].find((p) => p !== void 0))
      u.connect(t);
    else {
      const [p, W, x, f] = E([s, d, l, r]), z = n + m;
      j(
        Z.gain,
        p,
        W,
        x,
        f,
        0,
        1,
        n,
        z,
        o === "exp" ? "exponential" : "linear"
      ), u.connect(Z), Z.connect(t);
    }
  }
  return { stop: h };
}
const Tt = {}, Wt = {}, Kn = (t) => Tt[t];
function De(t, e) {
  var n = 1024;
  if (t < n) return t + " B";
  var c = ["KiB", "MiB", "GiB", "TiB", "PiB", "EiB", "ZiB", "YiB"], a = -1;
  do
    t /= n, ++a;
  while (t >= n);
  return t.toFixed(1) + " " + c[a];
}
function Oe(t, e) {
  const { s: n, n: c = 0, speed: a = 1 } = t;
  let o = Ie(t, 36), s = o - 36, d, l = 0;
  if (Array.isArray(e))
    l = ne(c, e.length), d = e[l];
  else {
    const b = (u) => Xt(u) - o, m = Object.keys(e).filter((u) => !u.startsWith("_")).reduce(
      (u, h, X) => !u || Math.abs(b(h)) < Math.abs(b(u)) ? h : u,
      null
    );
    s = -b(m), l = ne(c, e[m].length), d = e[m][l];
  }
  const r = `${n}:${l}`;
  let i = Math.abs(a) * Math.pow(2, s / 12);
  return { transpose: s, sampleUrl: d, index: l, midi: o, label: r, playbackRate: i };
}
const Ae = async (t, e, n) => {
  let { sampleUrl: c, label: a, playbackRate: o } = Oe(t, e);
  n && (c = await n(c));
  const s = V(), d = await ue(c, s, a);
  return t.unit === "c" && (o = o * d.duration), { buffer: d, playbackRate: o };
}, qe = async (t, e, n) => {
  let { buffer: c, playbackRate: a } = await Ae(t, e, n);
  t.speed < 0 && (c = _e(c));
  const s = V().createBufferSource();
  s.buffer = c, s.playbackRate.value = a;
  const { s: d, loopBegin: l = 0, loopEnd: r = 1, begin: i = 0, end: b = 1 } = t, m = i * s.buffer.duration;
  (d.startsWith("wt_") ? 1 : t.loop) && (s.loop = !0, s.loopStart = l * s.buffer.duration - m, s.loopEnd = r * s.buffer.duration - m);
  const h = s.buffer.duration / s.playbackRate.value, X = (b - i) * h;
  return { bufferSource: s, offset: m, bufferDuration: h, sliceDuration: X };
}, ue = (t, e, n, c = 0) => {
  const a = n ? `sound "${n}:${c}"` : "sample";
  if (t = t.replace("#", "%23"), !Wt[t]) {
    N(`[sampler] load ${a}..`, "load-sample", { url: t });
    const o = Date.now();
    Wt[t] = fetch(t).then((s) => s.arrayBuffer()).then(async (s) => {
      const d = Date.now() - o, l = De(s.byteLength);
      N(`[sampler] load ${a}... done! loaded ${l} in ${d}ms`, "loaded-sample", { url: t });
      const r = await e.decodeAudioData(s);
      return Tt[t] = r, r;
    });
  }
  return Wt[t];
};
function _e(t) {
  const e = V(), n = e.createBuffer(t.numberOfChannels, t.length, e.sampleRate);
  for (let c = 0; c < t.numberOfChannels; c++)
    n.copyToChannel(t.getChannelData(c).slice().reverse(), c, c);
  return n;
}
const Sn = (t) => Tt[t];
function me(t) {
  if (t.startsWith("bubo:")) {
    const [e, n] = t.split(":");
    t = `github:Bubobubobubobubo/dough-${n}`;
  }
  return t;
}
function be(t, e = "") {
  if (!t.startsWith("github:"))
    throw new Error('expected "github:" at the start of pseudoUrl');
  let [n, c] = t.split("github:");
  return c = c.endsWith("/") ? c.slice(0, -1) : c, c.split("/").length === 2 && (c += "/main"), `https://raw.githubusercontent.com/${c}/${e}`;
}
const $e = (t, e, n = t._base || "") => Object.entries(t).forEach(([c, a]) => {
  if (typeof a == "string" && (a = [a]), typeof a != "object")
    throw new Error("wrong sample map format for " + c);
  n = a._base || n, n = me(n), n.startsWith("github:") && (n = be(n, ""));
  const o = (s) => n + s;
  Array.isArray(a) ? a = a.map(o) : a = Object.fromEntries(
    Object.entries(a).map(([s, d]) => [s, (typeof d == "string" ? [d] : d).map(o)])
  ), e(c, a);
});
let he = {};
function Hn(t, e) {
  he[t] = e;
}
function tn(t) {
  const e = Object.entries(he).find(([n]) => t.startsWith(n));
  if (e)
    return e[1];
}
const en = async (t, e = t._base || "", n = {}) => {
  if (typeof t == "string") {
    const o = tn(t);
    if (o)
      return o(t);
    if (t = me(t), t.startsWith("github:") && (t = be(t, "strudel.json")), t.startsWith("local:") && (t = "http://localhost:5432"), t.startsWith("shabda:")) {
      let [d, l] = t.split("shabda:");
      t = `https://shabda.ndre.gr/${l}.json?strudel=1`;
    }
    if (t.startsWith("shabda/speech")) {
      let [d, l] = t.split("shabda/speech");
      l = l.startsWith("/") ? l.substring(1) : l;
      let [r, i] = l.split(":"), b = "f", m = "en-GB";
      r && ([m, b] = r.split("/")), t = `https://shabda.ndre.gr/speech/${i}.json?gender=${b}&language=${m}&strudel=1'`;
    }
    if (typeof fetch != "function")
      return;
    const s = t.split("/").slice(0, -1).join("/");
    return typeof fetch > "u" ? void 0 : fetch(t).then((d) => d.json()).then((d) => en(d, e || d._base || s, n)).catch((d) => {
      throw console.error(d), new Error(`error loading "${t}"`);
    });
  }
  const { prebake: c, tag: a } = n;
  $e(
    t,
    (o, s) => q(o, (d, l, r) => nn(d, l, r, s), {
      type: "sample",
      samples: s,
      baseUrl: e,
      prebake: c,
      tag: a
    }),
    e
  );
}, ae = [];
async function nn(t, e, n, c, a) {
  let {
    s: o,
    nudge: s = 0,
    // TODO: is this in seconds?
    cut: d,
    loop: l,
    clip: r = void 0,
    // if set, samples will be cut off when the hap ends
    n: i = 0,
    speed: b = 1,
    // sample playback speed
    duration: m
  } = e;
  if (b === 0)
    return;
  const u = V();
  let [h, X, Z, y] = E([e.attack, e.decay, e.sustain, e.release]);
  const { bufferSource: p, sliceDuration: W, offset: x } = await qe(e, c, a);
  if (u.currentTime > t) {
    N(`[sampler] still loading sound "${o}:${i}"`, "highlight");
    return;
  }
  if (!p) {
    N(`[sampler] could not load "${o}:${i}"`, "error");
    return;
  }
  let f = mt(p.detune, e, t);
  const z = t + s;
  p.start(z, x);
  const w = u.createGain(), L = p.connect(w);
  r == null && l == null && e.release == null && (m = W);
  let S = t + m;
  j(L.gain, h, X, Z, y, 0, 1, t, S, "linear"), ut(p.detune, e, t, S);
  const K = u.createGain();
  L.connect(K), p.onended = function() {
    p.disconnect(), f?.stop(), L.disconnect(), K.disconnect(), n();
  };
  let B = S + y + 0.01;
  p.stop(B);
  const H = { node: K, bufferSource: p, stop: (J) => {
    p.stop(J);
  } };
  if (d !== void 0) {
    const J = ae[d];
    J && (J.node.gain.setValueAtTime(1, z), J.node.gain.linearRampToValueAtTime(0, z + 0.01)), ae[d] = H;
  }
  return H;
}
const Xe = 128, Kt = "System Standard";
let Ze = Xe;
function cn(t) {
  Ze = parseInt(t) ?? Xe;
}
const st = Te();
function q(t, e, n = {}) {
  t = t.toLowerCase().replace(/\s+/g, "_"), st.setKey(t, { onTrigger: e, data: n });
}
let pe = (t) => t;
function A(t) {
  return pe(t);
}
function wn(t) {
  pe = t;
}
function St(t) {
  for (const n in t)
    t[n.toLowerCase()] = t[n];
  const e = st.get();
  for (const n in e) {
    const [c, a] = n.split("_");
    if (!a) continue;
    const o = t[c];
    if (o) {
      if (typeof o == "string")
        e[`${o}_${a}`.toLowerCase()] = e[n];
      else if (Array.isArray(o))
        for (const s of o)
          e[`${s}_${a}`.toLowerCase()] = e[n];
    }
  }
  st.set({ ...e });
}
async function on(t) {
  const n = await (await fetch(t)).json();
  St(n);
}
async function Tn(...t) {
  switch (t.length) {
    case 1:
      return typeof t[0] == "string" ? on(t[0]) : St(t[0]);
    case 2:
      return St({ [t[0]]: t[1] });
    default:
      throw new Error("aliasMap expects 1 or 2 arguments, received " + t.length);
  }
}
function xt(t) {
  return st.get()[t.toLowerCase()];
}
const sn = async () => {
  await navigator.mediaDevices.getUserMedia({ audio: !0 });
  let t = await navigator.mediaDevices.enumerateDevices();
  t = t.filter((n) => n.kind === "audiooutput" && n.deviceId !== "default");
  const e = /* @__PURE__ */ new Map();
  return e.set(Kt, ""), t.forEach((n) => {
    e.set(n.label, n.deviceId);
  }), e;
}, Ge = {
  s: "triangle",
  gain: 0.8,
  postgain: 1,
  density: ".03",
  ftype: "12db",
  fanchor: 0,
  resonance: 1,
  hresonance: 1,
  bandq: 1,
  channels: [1, 2],
  phaserdepth: 0.75,
  shapevol: 1,
  distortvol: 1,
  delay: 0,
  delayfeedback: 0.5,
  delaytime: 0.25,
  orbit: 1,
  i: 1,
  velocity: 1,
  fft: 8
};
let Nt = new Map(Object.entries(Ge));
function ye(t, e) {
  Nt.set(t, e);
}
function g(t) {
  return Nt.get(t);
}
function Nn(t) {
  Object.keys(t).forEach((e) => {
    ye(e, t[e]);
  });
}
function an() {
  Nt = new Map(Object.entries(Ge));
}
function Yn(t) {
  an(), t === "1.0" && ye("fanchor", 0.5);
}
const Fn = () => st.set({});
let bt;
const dn = () => (bt = new AudioContext(), bt), V = () => bt || dn();
function Pn() {
  return V().currentTime;
}
let Mt;
function ln() {
  return Mt || (Mt = V().audioWorklet.addModule(ke)), Mt;
}
async function rn(t = {}) {
  const { disableWorklets: e = !1, maxPolyphony: n, audioDeviceName: c = Kt } = t;
  if (cn(n), typeof window > "u")
    return;
  const a = V();
  if (c != null && c != Kt)
    try {
      const s = (await sn()).get(c), d = (s ?? "").length > 0;
      a.sinkId !== s && d && await a.setSinkId(s), N(
        `[superdough] Audio Device set to ${c}, it might take a few seconds before audio plays on all output channels`
      );
    } catch {
      N("[superdough] failed to set audio interface", "warning");
    }
  if (await a.resume(), e) {
    N("[superdough]: AudioWorklets disabled with disableWorklets");
    return;
  }
  try {
    await ln(), N("[superdough] AudioWorklets loaded");
  } catch (o) {
    console.warn("could not load AudioWorklet effects", o);
  }
  N("[superdough] ready");
}
let Rt;
async function Cn(t) {
  return Rt || (Rt = new Promise((e) => {
    document.addEventListener("click", async function n() {
      document.removeEventListener("click", n), await rn(t), e();
    });
  })), Rt;
}
let Q = {}, ht, _;
function un() {
  const t = V(), e = t.destination.maxChannelCount;
  t.destination.channelCount = e, ht = new ChannelMergerNode(t, { numberOfInputs: t.destination.channelCount }), _ = new GainNode(t), ht.connect(_), _.connect(t.destination);
}
const Yt = (t, e = [0, 1]) => {
  const n = V();
  ht == null && un();
  const c = new StereoPannerNode(n);
  t.connect(c);
  const a = new ChannelSplitterNode(n, {
    numberOfOutputs: c.channelCount
  });
  c.connect(a), e.forEach((o, s) => {
    a.connect(ht, s % c.channelCount, et(o, 0, n.destination.channelCount - 1));
  });
}, vn = () => {
  _ != null && (_.gain.linearRampToValueAtTime(0, V().currentTime + 0.01), _ = null);
};
function mn(t, e, n, c) {
  if (n = et(n, 0, 0.98), !Q[t]) {
    const o = V().createFeedbackDelay(1, e, n);
    o.start?.(c), Yt(o, [0, 1]), Q[t] = o;
  }
  return Q[t].delayTime.value !== e && Q[t].delayTime.setValueAtTime(e, c), Q[t].feedback.value !== n && Q[t].feedback.setValueAtTime(n, c), Q[t];
}
function bn(t, e, n = 1, c = 0.5, a = 1e3, o = 2e3) {
  const s = V(), d = s.createGain();
  d.gain.value = o * 2, I(s, "lfo-processor", {
    frequency: n,
    depth: 1,
    skew: 0,
    phaseoffset: 0,
    time: t,
    end: e,
    shape: 1,
    dcoffset: -0.5
  }).connect(d);
  const r = 2;
  let i = 0;
  const b = [];
  for (let m = 0; m < r; m++) {
    const u = s.createBiquadFilter();
    u.type = "notch", u.gain.value = 1, u.frequency.value = a + i, u.Q.value = 2 - Math.min(Math.max(c * 2, 0), 1.9), d.connect(u.detune), i += 282, m > 0 && b[m - 1].connect(u), b.push(u);
  }
  return b[b.length - 1];
}
function hn(t) {
  t = t ?? 0;
  const e = ["12db", "ladder", "24db"];
  return typeof t == "number" ? e[Math.floor(ie(t, e.length))] : t;
}
let C = {}, it = (t, e) => t !== void 0 && t !== e;
function Xn(t, e, n, c, a, o) {
  if (!C[t]) {
    const d = V().createReverb(e, n, c, a, o);
    Yt(d, [0, 1]), C[t] = d;
  }
  return (it(e, C[t].duration) || it(n, C[t].fade) || it(c, C[t].lp) || it(a, C[t].dim) || C[t].ir !== o) && C[t].generate(e, n, c, a, o), C[t];
}
let v = {}, $ = {};
function Zn(t, e = 1024, n = 0.5) {
  if (!v[t]) {
    const c = V().createAnalyser();
    c.fftSize = e, c.smoothingTimeConstant = n, v[t] = c, $[t] = new Float32Array(v[t].frequencyBinCount);
  }
  return v[t].fftSize !== e && (v[t].fftSize = e, $[t] = new Float32Array(v[t].frequencyBinCount)), v[t];
}
function Jn(t = "time", e = 1) {
  const n = {
    time: () => v[e]?.getFloatTimeDomainData($[e]),
    frequency: () => v[e]?.getFloatFrequencyData($[e])
  }[t];
  if (!n)
    throw new Error(`getAnalyzerData: ${t} not supported. use one of ${Object.keys(n).join(", ")}`);
  return n(), $[e];
}
function zt(t, e, n) {
  const c = U(n);
  return t.connect(c), c.connect(e), c;
}
function In() {
  Q = {}, C = {}, v = {}, $ = {};
}
let ot = /* @__PURE__ */ new Map();
const pn = async (t, e, n) => {
  const c = V();
  e = typeof e == "string" && e.startsWith("=") ? Number(e.slice(1)) : c.currentTime + e;
  let { stretch: a } = t;
  if (a != null && (e = e - 0.04), typeof t != "object")
    throw new Error(
      `expected hap.value to be an object, but got "${t}". Hint: append .note() or .s() to the end`,
      "error"
    );
  if (t.duration = n, e < c.currentTime) {
    console.warn(
      `[superdough]: cannot schedule sounds in the past (target: ${e.toFixed(2)}, now: ${c.currentTime.toFixed(2)})`
    );
    return;
  }
  let {
    s: o = g("s"),
    bank: s,
    source: d,
    gain: l = g("gain"),
    postgain: r = g("postgain"),
    density: i = g("density"),
    // filters
    fanchor: b = g("fanchor"),
    drive: m = 0.69,
    // low pass
    cutoff: u,
    lpenv: h,
    lpattack: X,
    lpdecay: Z,
    lpsustain: y,
    lprelease: p,
    resonance: W = g("resonance"),
    // high pass
    hpenv: x,
    hcutoff: f,
    hpattack: z,
    hpdecay: w,
    hpsustain: L,
    hprelease: S,
    hresonance: K = g("hresonance"),
    // band pass
    bpenv: B,
    bandf: M,
    bpattack: H,
    bpdecay: J,
    bpsustain: Zt,
    bprelease: Y,
    bandq: nt = g("bandq"),
    channels: T = g("channels"),
    //phaser
    phaserrate: at,
    phaserdepth: Ft = g("phaserdepth"),
    phasersweep: We,
    phasercenter: xe,
    //
    coarse: Pt,
    crush: Ct,
    shape: vt,
    shapevol: pt = g("shapevol"),
    distort: Jt,
    distortvol: Gt = g("distortvol"),
    pan: It,
    vowel: kt,
    delay: dt = g("delay"),
    delayfeedback: Bt = g("delayfeedback"),
    delaytime: Qt = g("delaytime"),
    orbit: Ut = g("orbit"),
    room: jt,
    roomfade: Me,
    roomlp: Re,
    roomdim: ze,
    roomsize: ge,
    ir: yt,
    i: Et = g("i"),
    velocity: Vt = g("velocity"),
    analyze: Dt,
    // analyser wet
    fft: Le = g("fft"),
    // fftSize 0 - 10
    compressor: Ot,
    compressorRatio: Ke,
    compressorKnee: Se,
    compressorAttack: He,
    compressorRelease: we
  } = t;
  l = A(k(l, 1)), r = A(r), pt = A(pt), Gt = A(Gt), dt = A(dt), Vt = A(Vt), l *= Vt;
  const At = Math.round(Math.random() * 1e6);
  for (let G = 0; G <= ot.size - Ze; G++) {
    const D = ot.entries().next(), F = D.value[1], P = D.value[0], te = e + 0.25;
    F?.node?.gain?.linearRampToValueAtTime(0, te), F?.stop?.(te), ot.delete(P);
  }
  T = (Array.isArray(T) ? T : [T]).map((G) => G - 1);
  let O = [];
  s && o && (o = `${s}_${o}`, t.s = o);
  let lt;
  if (d)
    lt = d(e, t, n);
  else if (xt(o)) {
    const { onTrigger: G } = xt(o), F = await G(e, t, () => {
      O.forEach((P) => P?.disconnect()), ot.delete(At);
    });
    F && (lt = F.node, ot.set(At, F));
  } else
    throw new Error(`sound ${o} not found! Is it loaded?`);
  if (!lt)
    return;
  if (c.currentTime > e) {
    N("[webaudio] skip hap: still loading", c.currentTime - e);
    return;
  }
  const R = [];
  R.push(lt), a !== void 0 && R.push(I(c, "phase-vocoder-processor", { pitchFactor: a })), R.push(U(l));
  const rt = hn(t.ftype);
  if (u !== void 0) {
    let G = () => ft(
      c,
      "lowpass",
      u,
      W,
      X,
      Z,
      y,
      p,
      h,
      e,
      e + n,
      b,
      rt,
      m
    );
    R.push(G()), rt === "24db" && R.push(G());
  }
  if (f !== void 0) {
    let G = () => ft(
      c,
      "highpass",
      f,
      K,
      z,
      w,
      L,
      S,
      x,
      e,
      e + n,
      b
    );
    R.push(G()), rt === "24db" && R.push(G());
  }
  if (M !== void 0) {
    let G = () => ft(
      c,
      "bandpass",
      M,
      nt,
      H,
      J,
      Zt,
      Y,
      B,
      e,
      e + n,
      b
    );
    R.push(G()), rt === "24db" && R.push(G());
  }
  if (kt !== void 0) {
    const G = c.createVowelFilter(kt);
    R.push(G);
  }
  if (Pt !== void 0 && R.push(I(c, "coarse-processor", { coarse: Pt })), Ct !== void 0 && R.push(I(c, "crush-processor", { crush: Ct })), vt !== void 0 && R.push(I(c, "shape-processor", { shape: vt, postgain: pt })), Jt !== void 0 && R.push(I(c, "distort-processor", { distort: Jt, postgain: Gt })), Ot !== void 0 && R.push(
    Be(c, Ot, Ke, Se, He, we)
  ), It !== void 0) {
    const G = c.createStereoPanner();
    G.pan.value = 2 * It - 1, R.push(G);
  }
  if (at !== void 0 && Ft > 0) {
    const G = bn(e, e + n, at, Ft, xe, We);
    R.push(G);
  }
  const ct = new GainNode(c, { gain: r });
  R.push(ct), Yt(ct, T);
  let qt;
  if (dt > 0 && Qt > 0 && Bt > 0) {
    const G = mn(Ut, Qt, Bt, e);
    qt = zt(ct, G, dt), O.push(qt);
  }
  let _t;
  if (jt > 0) {
    let G;
    if (yt !== void 0) {
      let F, P = xt(yt);
      Array.isArray(P) ? F = P.data.samples[Et % P.data.samples.length] : typeof P == "object" && (F = Object.values(P.data.samples).flat()[Et % Object.values(P.data.samples).length]), G = await ue(F, c, yt, 0);
    }
    const D = Xn(Ut, ge, Me, Re, ze, G);
    _t = zt(ct, D, jt), O.push(_t);
  }
  let $t;
  if (Dt) {
    const G = Zn(Dt, 2 ** (Le + 5));
    $t = zt(ct, G, 1), O.push($t);
  }
  R.slice(1).reduce((G, D) => G.connect(D), R[0]), O = O.concat(R);
}, kn = (t, e, n, c) => {
  pn(e, t - n, e.duration / c);
};
let gt = {};
function Gn(t, e) {
  const n = V();
  if (gt[t])
    return gt[t];
  const c = 2 * n.sampleRate, a = n.createBuffer(1, c, n.sampleRate), o = a.getChannelData(0);
  let s = 0, d, l, r, i, b, m, u;
  d = l = r = i = b = m = u = 0;
  for (let h = 0; h < c; h++)
    if (t === "white")
      o[h] = Math.random() * 2 - 1;
    else if (t === "brown") {
      let X = Math.random() * 2 - 1;
      o[h] = (s + 0.02 * X) / 1.02, s = o[h];
    } else if (t === "pink") {
      let X = Math.random() * 2 - 1;
      d = 0.99886 * d + X * 0.0555179, l = 0.99332 * l + X * 0.0750759, r = 0.969 * r + X * 0.153852, i = 0.8665 * i + X * 0.3104856, b = 0.55 * b + X * 0.5329522, m = -0.7616 * m - X * 0.016898, o[h] = d + l + r + i + b + m + u + X * 0.5362, o[h] *= 0.11, u = X * 0.115926;
    } else if (t === "crackle") {
      const X = e * 0.01;
      Math.random() < X ? o[h] = Math.random() * 2 - 1 : o[h] = 0;
    }
  return t !== "crackle" && (gt[t] = a), a;
}
function Ve(t = "white", e, n = 0.02) {
  const a = V().createBufferSource();
  return a.buffer = Gn(t, n), a.loop = !0, a.start(e), {
    node: a,
    stop: (o) => a.stop(o)
  };
}
function yn(t, e, n) {
  const c = Ve("pink", n);
  return {
    node: Qe(t, c.node, e),
    stop: (o) => c?.stop(o)
  };
}
const Ht = (t) => {
  let { note: e, freq: n } = t;
  return e = e || 36, typeof e == "string" && (e = Xt(e)), !n && typeof e == "number" && (n = re(e)), Number(n);
};
function de(t) {
  t.disconnect(), t.parameters.get("end")?.setValueAtTime(0, 0);
}
const Vn = ["triangle", "square", "sawtooth", "sine"], fn = ["pink", "white", "brown", "crackle"];
function Bn() {
  [...Vn].forEach((t) => {
    q(
      t,
      (e, n, c) => {
        const [a, o, s, d] = E(
          [n.attack, n.decay, n.sustain, n.release],
          "linear",
          [1e-3, 0.05, 0.6, 0.01]
        );
        let l = xn(t, e, n), { node: r, stop: i, triggerRelease: b } = l;
        const m = U(0.3), { duration: u } = n;
        r.onended = () => {
          r.disconnect(), m.disconnect(), c();
        };
        const h = U(1);
        let X = r.connect(m).connect(h);
        const Z = e + u;
        j(X.gain, a, o, s, d, 0, 1, e, Z, "linear");
        const y = Z + d + 0.01;
        return b?.(y), i(y), {
          node: X,
          stop: (p) => {
            i(p);
          }
        };
      },
      { type: "synth", prebake: !0 }
    );
  }), q(
    "supersaw",
    (t, e, n) => {
      const c = V();
      let { duration: a, n: o, unison: s = 5, spread: d = 0.6, detune: l } = e;
      l = l ?? o ?? 0.18;
      const r = Ht(e), [i, b, m, u] = E(
        [e.attack, e.decay, e.sustain, e.release],
        "linear",
        [1e-3, 0.05, 0.6, 0.01]
      ), h = t + a, X = h + u + 0.01, Z = et(s, 1, 100);
      let y = Z > 1 ? et(d, 0, 1) : 0, p = I(
        c,
        "supersaw-oscillator",
        {
          frequency: r,
          begin: t,
          end: X,
          freqspread: l,
          voices: Z,
          panspread: y
        },
        {
          outputChannelCount: [2]
        }
      );
      const W = 1 / Math.sqrt(Z);
      ut(p.parameters.get("detune"), e, t, h);
      const x = mt(p.parameters.get("detune"), e, t), f = Lt(p.parameters.get("frequency"), e, t);
      let z = U(1);
      z = p.connect(z), j(z.gain, i, b, m, u, 0, 0.3 * W, t, h, "linear");
      let w = se(
        c,
        () => {
          de(p), z.disconnect(), n(), f?.stop(), x?.stop();
        },
        t,
        X
      );
      return {
        node: z,
        stop: (L) => {
          w.stop(L);
        }
      };
    },
    { prebake: !0, type: "synth" }
  ), q(
    "pulse",
    (t, e, n) => {
      const c = V();
      let { duration: a, n: o = 0.5 } = e;
      const s = Ht(e), [d, l, r, i] = E(
        [e.attack, e.decay, e.sustain, e.release],
        "linear",
        [1e-3, 0.05, 0.6, 0.01]
      ), b = t + a, m = b + i + 0.01;
      let u = I(
        c,
        "pulse-oscillator",
        {
          frequency: s,
          begin: t,
          end: m,
          pulsewidth: o
        },
        {
          outputChannelCount: [2]
        }
      );
      ut(u.parameters.get("detune"), e, t, b);
      const h = mt(u.parameters.get("detune"), e, t), X = Lt(u.parameters.get("frequency"), e, t);
      let Z = U(1);
      Z = u.connect(Z), j(Z.gain, d, l, r, i, 0, 1, t, b, "linear");
      let y = se(
        c,
        () => {
          de(u), Z.disconnect(), n(), X?.stop(), h?.stop();
        },
        t,
        m
      );
      return {
        node: Z,
        stop: (p) => {
          y.stop(p);
        }
      };
    },
    { prebake: !0, type: "synth" }
  ), [...fn].forEach((t) => {
    q(
      t,
      (e, n, c) => {
        const [a, o, s, d] = E(
          [n.attack, n.decay, n.sustain, n.release],
          "linear",
          [1e-3, 0.05, 0.6, 0.01]
        );
        let l, { density: r } = n;
        l = Ve(t, e, r);
        let { node: i, stop: b, triggerRelease: m } = l;
        const u = U(0.3), { duration: h } = n;
        i.onended = () => {
          i.disconnect(), u.disconnect(), c();
        };
        const X = U(1);
        let Z = i.connect(u).connect(X);
        const y = e + h;
        j(Z.gain, a, o, s, d, 0, 1, e, y, "linear");
        const p = y + d + 0.01;
        return m?.(p), b(p), {
          node: Z,
          stop: (W) => {
            b(W);
          }
        };
      },
      { type: "synth", prebake: !0 }
    );
  });
}
function Wn(t, e) {
  const n = new Float32Array(t + 1), c = new Float32Array(t + 1), a = V(), o = a.createOscillator(), s = {
    sawtooth: (r) => [0, -1 / r],
    square: (r) => [0, r % 2 === 0 ? 0 : 1 / r],
    triangle: (r) => [r % 2 === 0 ? 0 : 1 / (r * r), 0]
  };
  if (!s[e])
    throw new Error(`unknown wave type ${e}`);
  n[0] = 0, c[0] = 0;
  let d = 1;
  for (; d <= t; ) {
    const [r, i] = s[e](d);
    n[d] = r, c[d] = i, d++;
  }
  const l = a.createPeriodicWave(n, c);
  return o.setPeriodicWave(l), o;
}
function xn(t, e, n) {
  let { n: c, duration: a, noise: o = 0 } = n, s;
  !c || t === "sine" ? (s = V().createOscillator(), s.type = t || "triangle") : s = Wn(c, t), s.frequency.value = Ht(n), s.start(e);
  let d = mt(s.detune, n, e);
  ut(s.detune, n, e, e + a);
  const l = Lt(s.frequency, n, e);
  let r;
  return o && (r = yn(s, o, e)), {
    node: r?.node || s,
    stop: (i) => {
      l.stop(i), d?.stop(i), r?.stop(i), s.stop(i);
    },
    triggerRelease: (i) => {
    }
  };
}
function Mn(t = 1, e = 0.05, n = 220, c = 0, a = 0, o = 0.1, s = 0, d = 1, l = 0, r = 0, i = 0, b = 0, m = 0, u = 0, h = 0, X = 0, Z = 0, y = 1, p = 0, W = 0) {
  let x = Math.PI * 2, f = V().sampleRate, z = (at) => at > 0 ? 1 : -1, w = l *= 500 * x / f / f, L = n *= (1 + e * 2 * Math.random() - e) * x / f, S = [], K = 0, B = 0, M = 0, H = 1, J = 0, Zt = 0, Y = 0, nt, T;
  for (c = c * f + 9, p *= f, a *= f, o *= f, Z *= f, r *= 500 * x / f ** 3, h *= x / f, i *= x / f, b *= f, m = m * f | 0, T = c + p + a + o + Z | 0; M < T; S[M++] = Y)
    ++Zt % (X * 100 | 0) || (Y = s ? s > 1 ? s > 2 ? s > 3 ? Math.sin((K % x) ** 3) : Math.max(Math.min(Math.tan(K), 1), -1) : 1 - (2 * K / x % 2 + 2) % 2 : 1 - 4 * Math.abs(Math.round(K / x) - K / x) : Math.sin(K), Y = (m ? 1 - W + W * Math.sin(x * M / m) : 1) * z(Y) * Math.abs(Y) ** d * // curve 0=square, 2=pointy
    t * 1 * // envelope
    (M < c ? M / c : M < c + p ? 1 - (M - c) / p * (1 - y) : M < c + p + a ? y : M < T - Z ? (T - M - Z) / o * // release falloff
    y : 0), Y = Z ? Y / 2 + (Z > M ? 0 : (M < T - Z ? 1 : (T - M) / Z) * // release delay
    S[M - Z | 0] / 2) : Y), nt = (n += l += r) * // frequency
    Math.cos(h * B++), K += nt - nt * u * (1 - (Math.sin(M) + 1) * 1e9 % 2), H && ++H > b && (n += i, L += i, H = 0), m && !(++J % m) && (n = L, l = w, H ||= 1);
  return S;
}
const Rn = (t, e) => {
  let {
    s: n,
    note: c = 36,
    freq: a,
    //
    zrand: o = 0,
    attack: s = 0,
    decay: d = 0,
    sustain: l = 0.8,
    release: r = 0.1,
    curve: i = 1,
    slide: b = 0,
    deltaSlide: m = 0,
    pitchJump: u = 0,
    pitchJumpTime: h = 0,
    lfo: X = 0,
    znoise: Z = 0,
    zmod: y = 0,
    zcrush: p = 0,
    zdelay: W = 0,
    tremolo: x = 0,
    duration: f = 0.2,
    zzfx: z
  } = t;
  const w = Math.max(f - s - d, 0);
  typeof c == "string" && (c = Xt(c)), !a && typeof c == "number" && (a = re(c)), n = n.replace("z_", "");
  const L = ["sine", "triangle", "sawtooth", "tan", "noise"].indexOf(n) || 0;
  i = n === "square" ? 0 : i;
  const K = (
    /* ZZFX. */
    Mn(...z || [
      0.25,
      // volume
      o,
      a,
      s,
      w,
      r,
      L,
      i,
      b,
      m,
      u,
      h,
      X,
      Z,
      y,
      p,
      W,
      l,
      // sustain volume!
      d,
      x
    ])
  ), B = V(), M = B.createBuffer(1, K.length, B.sampleRate);
  M.getChannelData(0).set(K);
  const H = V().createBufferSource();
  return H.buffer = M, H.start(e), {
    node: H
  };
};
function Qn() {
  ["zzfx", "z_sine", "z_sawtooth", "z_triangle", "z_square", "z_tan", "z_noise"].forEach((t) => {
    q(
      t,
      (e, n, c) => {
        const { node: a } = Rn({ s: t, ...n }, e);
        return a.onended = () => {
          a.disconnect(), c();
        }, {
          node: a,
          stop: () => {
          }
        };
      },
      { type: "synth", prebake: !0 }
    );
  });
}
let tt;
async function zn(t, e) {
  const n = `dsp-worklet-${Date.now()}`, c = `${e}
let __q = []; // trigger queue
class MyProcessor extends AudioWorkletProcessor {
  constructor() {
    super();
    this.t = 0;
    this.stopped = false;
    this.port.onmessage = (e) => {
      if(e.data==='stop') {
        this.stopped = true;
      } else if(e.data?.dough) {
        __q.push(e.data)
      } else {
        msg?.(e.data)
      }
    };
  }
  process(inputs, outputs, parameters) {
    const output = outputs[0];
    if(__q.length) {
      for(let i=0;i<__q.length;++i) {
        const deadline = __q[i].time-currentTime;
        if(deadline<=0) {
          trigger(__q[i].dough)
          __q.splice(i,1)
        }
      }
    }
    for (let i = 0; i < output[0].length; i++) {
      const out = dsp(this.t / sampleRate);
      output.forEach((channel) => {
        channel[i] = out;
      });
      this.t++;
    }
  return !this.stopped;
  }
}
registerProcessor('${n}', MyProcessor);
`, o = `data:text/javascript;base64,${btoa(c)}`;
  await t.audioWorklet.addModule(o);
  const s = new AudioWorkletNode(t, n);
  return { node: s, stop: () => s.port.postMessage("stop") };
}
const fe = () => {
  tt && (tt?.stop(), tt?.node?.disconnect());
};
typeof window < "u" && window.addEventListener("message", (t) => {
  t.data === "strudel-stop" ? fe() : t.data?.dough && tt?.node.port.postMessage(t.data);
});
const Un = async (t) => {
  const e = V();
  fe(), tt = await zn(e, t), tt.node.connect(e.destination);
};
function jn(t, e, n, c, a) {
  window.postMessage({ time: a, dough: e.value, currentTime: n, duration: e.duration, cps: c });
}
export {
  Xe as DEFAULT_MAX_POLYPHONY,
  Tn as aliasBank,
  v as analysers,
  $ as analysersData,
  Lt as applyFM,
  A as applyGainCurve,
  Yt as connectToDestination,
  ft as createFilter,
  Un as dough,
  jn as doughTrigger,
  Qe as drywet,
  zn as dspWorklet,
  U as gainNode,
  E as getADSRValues,
  Zn as getAnalyserById,
  Jn as getAnalyzerData,
  V as getAudioContext,
  Pn as getAudioContextCurrentTime,
  sn as getAudioDevices,
  Kn as getCachedBuffer,
  Be as getCompressor,
  g as getDefaultValue,
  Sn as getLoadedBuffer,
  xn as getOscillator,
  j as getParamADSR,
  ut as getPitchEnvelope,
  Ae as getSampleBuffer,
  qe as getSampleBufferSource,
  Oe as getSampleInfo,
  xt as getSound,
  mt as getVibratoOscillator,
  I as getWorklet,
  Rn as getZZFX,
  rn as initAudio,
  Cn as initAudioOnFirstClick,
  un as initializeAudioOutput,
  ue as loadBuffer,
  N as logger,
  nn as onTriggerSample,
  vn as panic,
  $e as processSampleMap,
  Hn as registerSamplesPrefix,
  q as registerSound,
  Bn as registerSynthSounds,
  Qn as registerZZFXSounds,
  an as resetDefaultValues,
  In as resetGlobalEffects,
  Fn as resetLoadedSounds,
  _e as reverseBuffer,
  en as samples,
  dn as setDefaultAudioContext,
  ye as setDefaultValue,
  Nn as setDefaultValues,
  wn as setGainCurve,
  Ln as setLogger,
  cn as setMaxPolyphony,
  Yn as setVersionDefaults,
  st as soundMap,
  pn as superdough,
  kn as superdoughTrigger,
  Wn as waveformN,
  se as webAudioTimeout
};
