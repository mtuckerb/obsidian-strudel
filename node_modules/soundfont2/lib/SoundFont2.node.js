module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/chunk.ts":
/*!**********************!*\
  !*** ./src/chunk.ts ***!
  \**********************/
/*! exports provided: SF2Chunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF2Chunk", function() { return SF2Chunk; });
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./riff */ "./src/riff/index.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _chunks__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunks */ "./src/chunks/index.ts");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




var SF2Chunk =
/*#__PURE__*/
function (_RIFFChunk) {
  _inherits(SF2Chunk, _RIFFChunk);

  /**
   * All sub-chunks of this `SF2Chunk` as `SF2Chunk`.
   */
  function SF2Chunk(chunk) {
    var _this;

    _classCallCheck(this, SF2Chunk);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SF2Chunk).call(this, chunk.id, chunk.length, chunk.buffer, chunk.subChunks));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "subChunks", void 0);

    _this.subChunks = chunk.subChunks.map(function (subChunk) {
      return new SF2Chunk(subChunk);
    });
    return _this;
  }
  /**
   * Get meta data from the chunk. This assumes the chunk is a LIST chunk, containing INFO
   * sub-chunks.
   */


  _createClass(SF2Chunk, [{
    key: "getMetaData",
    value: function getMetaData() {
      if (this.id !== 'LIST') {
        throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'LIST'", "'".concat(this.id, "'"));
      }

      var info = this.subChunks.reduce(function (target, chunk) {
        if (chunk.id === 'ifil' || chunk.id === 'iver') {
          // ifil and iver length must be 4 bytes
          if (chunk.length !== _constants__WEBPACK_IMPORTED_MODULE_1__["SF_VERSION_LENGTH"]) {
            throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Invalid size for the '".concat(chunk.id, "' sub-chunk"));
          }

          target[chunk.id] = "".concat(chunk.getInt16(), ".").concat(chunk.getInt16(2));
        } else {
          target[chunk.id] = chunk.getString();
        }

        return target;
      }, {});

      if (!info.ifil) {
        throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Missing required 'ifil' sub-chunk");
      }

      if (!info.INAM) {
        throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Missing required 'INAM' sub-chunk");
      }

      return {
        version: info.ifil,
        soundEngine: info.isng || 'EMU8000',
        name: info.INAM,
        rom: info.irom,
        romVersion: info.iver,
        creationDate: info.ICRD,
        author: info.IENG,
        product: info.IPRD,
        copyright: info.ICOP,
        comments: info.ICMT,
        createdBy: info.ISFT
      };
    }
    /**
     * Get the sample data as a unsigned 8-bit buffer from the chunk. This assumes the chunk is a
     * LIST chunk containing a smpl sub-chunk.
     */

  }, {
    key: "getSampleData",
    value: function getSampleData() {
      if (this.id !== 'LIST') {
        throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'LIST'", "'".concat(this.id, "'"));
      }

      var sampleChunk = this.subChunks[0];

      if (sampleChunk.id !== 'smpl') {
        throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Invalid chunk signature', "'smpl'", "'".concat(sampleChunk.id, "'"));
      }

      return sampleChunk.buffer;
    }
    /**
     * Get the preset data from the chunk. This assumes the chunk is a LIST chunk containing the
     * preset data sub-chunks.
     */

  }, {
    key: "getPresetData",
    value: function getPresetData() {
      if (this.id !== 'LIST') {
        throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'LIST'", "'".concat(this.id, "'"));
      }

      return {
        presetHeaders: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getPresetHeaders"])(this.subChunks[0]),
        presetZones: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getZones"])(this.subChunks[1], 'pbag'),
        presetModulators: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getModulators"])(this.subChunks[2], 'pmod'),
        presetGenerators: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getGenerators"])(this.subChunks[3], 'pgen'),
        instrumentHeaders: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getInstrumentHeaders"])(this.subChunks[4]),
        instrumentZones: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getZones"])(this.subChunks[5], 'ibag'),
        instrumentModulators: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getModulators"])(this.subChunks[6], 'imod'),
        instrumentGenerators: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getGenerators"])(this.subChunks[7], 'igen'),
        sampleHeaders: Object(_chunks__WEBPACK_IMPORTED_MODULE_2__["getSampleHeaders"])(this.subChunks[8])
      };
    }
  }]);

  return SF2Chunk;
}(_riff__WEBPACK_IMPORTED_MODULE_0__["RIFFChunk"]);

/***/ }),

/***/ "./src/chunks/generators.ts":
/*!**********************************!*\
  !*** ./src/chunks/generators.ts ***!
  \**********************************/
/*! exports provided: getGenerators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getGenerators", function() { return getGenerators; });
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/riff */ "./src/riff/index.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/types */ "./src/types/index.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/constants */ "./src/constants.ts");



/**
 * An array of GeneratorTypes that cannot be specified for presets. If one of these generator types
 * is found, the generator should be ignored.
 */

var PRESET_TYPES_BLACKLIST = [_types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].StartAddrsOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].EndAddrsOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].StartLoopAddrsOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].EndLoopAddrsOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].StartAddrsCoarseOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].EndAddrsCoarseOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].StartLoopAddrsCoarseOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].KeyNum, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Velocity, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].EndLoopAddrsCoarseOffset, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].SampleModes, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].ExclusiveClass, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].OverridingRootKey];
/**
 * An array of GeneratorTypes that cannot be specified for instruments. If one of these generator
 * types is found, the generator should be ignored.
 */

var INSTRUMENT_TYPES_BLACKLIST = [_types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Unused1, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Unused2, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Unused3, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Unused4, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Reserved1, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Reserved2, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].Reserved3];
/**
 * These GeneratorTypes specify a range of key numbers or velocity.
 */

var RANGE_TYPES = [_types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].KeyRange, _types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"].VelRange];
/**
 * Get all generators for either an preset generator chunk or a instrument generator chunk.
 *
 * TODO: Check if generator chunk is valid, by following the rules defined in the spec. See for
 * example: https://github.com/FluidSynth/fluidsynth/blob/v2.0.3/src/sfloader/fluid_sffile.c
 *
 * @param {SF2Chunk} chunk - The input chunk
 * @param {string} type - The type, can be 'pgen' or 'igen'
 */

var getGenerators = function getGenerators(chunk, type) {
  if (chunk.id !== type) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'".concat(type, "'"), "'".concat(chunk.id, "'"));
  }

  if (chunk.length % _constants__WEBPACK_IMPORTED_MODULE_2__["SF_GENERATOR_SIZE"]) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Invalid size for the '".concat(type, "' sub-chunk"));
  }

  return chunk.iterate(function (iterator) {
    var id = iterator.getInt16(); // Ignore invalid IDs

    if (!_types__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"][id]) {
      return null;
    }

    if (type === 'pgen' && PRESET_TYPES_BLACKLIST.includes(id)) {
      return null;
    }

    if (type === 'igen' && INSTRUMENT_TYPES_BLACKLIST.includes(id)) {
      return null;
    }

    if (RANGE_TYPES.includes(id)) {
      return {
        id: id,
        range: {
          lo: iterator.getByte(),
          hi: iterator.getByte()
        }
      };
    }

    return {
      id: id,
      value: iterator.getInt16BE()
    };
  });
};

/***/ }),

/***/ "./src/chunks/index.ts":
/*!*****************************!*\
  !*** ./src/chunks/index.ts ***!
  \*****************************/
/*! exports provided: getInstrumentHeaders, getPresetHeaders, getSampleHeaders, getGenerators, getModulators, getZones, getItemsInZone */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _instruments__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./instruments */ "./src/chunks/instruments/index.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getInstrumentHeaders", function() { return _instruments__WEBPACK_IMPORTED_MODULE_0__["getInstrumentHeaders"]; });

/* harmony import */ var _presets__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./presets */ "./src/chunks/presets/index.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getPresetHeaders", function() { return _presets__WEBPACK_IMPORTED_MODULE_1__["getPresetHeaders"]; });

/* harmony import */ var _samples__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./samples */ "./src/chunks/samples/index.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSampleHeaders", function() { return _samples__WEBPACK_IMPORTED_MODULE_2__["getSampleHeaders"]; });

/* harmony import */ var _generators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./generators */ "./src/chunks/generators.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getGenerators", function() { return _generators__WEBPACK_IMPORTED_MODULE_3__["getGenerators"]; });

/* harmony import */ var _modulators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modulators */ "./src/chunks/modulators.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getModulators", function() { return _modulators__WEBPACK_IMPORTED_MODULE_4__["getModulators"]; });

/* harmony import */ var _zones__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./zones */ "./src/chunks/zones.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getZones", function() { return _zones__WEBPACK_IMPORTED_MODULE_5__["getZones"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getItemsInZone", function() { return _zones__WEBPACK_IMPORTED_MODULE_5__["getItemsInZone"]; });








/***/ }),

/***/ "./src/chunks/instruments/headers.ts":
/*!*******************************************!*\
  !*** ./src/chunks/instruments/headers.ts ***!
  \*******************************************/
/*! exports provided: getInstrumentHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getInstrumentHeaders", function() { return getInstrumentHeaders; });
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/riff */ "./src/riff/index.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/constants */ "./src/constants.ts");



/**
 * Get all instrument headers from a `inst` sub-chunk.
 *
 * @param {SF2Chunk} chunk - The input chunk
 */
var getInstrumentHeaders = function getInstrumentHeaders(chunk) {
  if (chunk.id !== 'inst') {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'inst'", "'".concat(chunk.id, "'"));
  }

  if (chunk.length % _constants__WEBPACK_IMPORTED_MODULE_1__["SF_INSTRUMENT_HEADER_SIZE"]) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Invalid size for the 'inst' sub-chunk");
  }

  return chunk.iterate(function (iterator) {
    return {
      name: iterator.getString(),
      bagIndex: iterator.getInt16()
    };
  });
};

/***/ }),

/***/ "./src/chunks/instruments/index.ts":
/*!*****************************************!*\
  !*** ./src/chunks/instruments/index.ts ***!
  \*****************************************/
/*! exports provided: getInstrumentHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./headers */ "./src/chunks/instruments/headers.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getInstrumentHeaders", function() { return _headers__WEBPACK_IMPORTED_MODULE_0__["getInstrumentHeaders"]; });



/***/ }),

/***/ "./src/chunks/modulators.ts":
/*!**********************************!*\
  !*** ./src/chunks/modulators.ts ***!
  \**********************************/
/*! exports provided: getModulators */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModulators", function() { return getModulators; });
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/riff */ "./src/riff/index.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/constants */ "./src/constants.ts");


/**
 * Get the modulator enumerator value from a 16-bit integer.
 *
 * @param {number} value - The 16-bit integer
 */

var getModulatorValue = function getModulatorValue(value) {
  return {
    type: value >> 10 & 0x3f,
    polarity: value >> 9 & 1,
    direction: value >> 8 & 1,
    palette: value >> 7 & 1,
    index: value & 0x7f
  };
};
/**
 * Get the modulators from either a `pmod` (presets) or `imod` (instruments) chunk.
 *
 * @param {SF2Chunk} chunk - The input chunk
 * @param {string} type - The type of chunk, either 'pmod' or 'imod'
 */


var getModulators = function getModulators(chunk, type) {
  if (chunk.id !== type) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'".concat(type, "'"), "'".concat(chunk.id, "'"));
  }

  if (chunk.length % _constants__WEBPACK_IMPORTED_MODULE_1__["SF_MODULATOR_SIZE"]) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Invalid size for the '".concat(type, "' sub-chunk"));
  }

  return chunk.iterate(function (iterator) {
    return {
      source: getModulatorValue(iterator.getInt16BE()),
      id: iterator.getInt16BE(),
      value: iterator.getInt16BE(),
      valueSource: getModulatorValue(iterator.getInt16BE()),
      transform: iterator.getInt16BE()
    };
  });
};

/***/ }),

/***/ "./src/chunks/presets/headers.ts":
/*!***************************************!*\
  !*** ./src/chunks/presets/headers.ts ***!
  \***************************************/
/*! exports provided: getPresetHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPresetHeaders", function() { return getPresetHeaders; });
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/riff */ "./src/riff/index.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/constants */ "./src/constants.ts");



/**
 * Get all preset headers from a `phdr` sub-chunk.
 *
 * @param {SF2Chunk} chunk - The input chunk
 */
var getPresetHeaders = function getPresetHeaders(chunk) {
  if (chunk.id !== 'phdr') {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Invalid chunk ID', "'phdr'", "'".concat(chunk.id, "'"));
  }

  if (chunk.length % _constants__WEBPACK_IMPORTED_MODULE_1__["SF_PRESET_HEADER_SIZE"]) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Invalid size for the 'phdr' sub-chunk");
  }

  return chunk.iterate(function (iterator) {
    return {
      name: iterator.getString(),
      preset: iterator.getInt16(),
      bank: iterator.getInt16(),
      bagIndex: iterator.getInt16(),
      library: iterator.getUInt32(),
      genre: iterator.getUInt32(),
      morphology: iterator.getUInt32()
    };
  });
};

/***/ }),

/***/ "./src/chunks/presets/index.ts":
/*!*************************************!*\
  !*** ./src/chunks/presets/index.ts ***!
  \*************************************/
/*! exports provided: getPresetHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./headers */ "./src/chunks/presets/headers.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getPresetHeaders", function() { return _headers__WEBPACK_IMPORTED_MODULE_0__["getPresetHeaders"]; });



/***/ }),

/***/ "./src/chunks/samples/headers.ts":
/*!***************************************!*\
  !*** ./src/chunks/samples/headers.ts ***!
  \***************************************/
/*! exports provided: getSampleHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSampleHeaders", function() { return getSampleHeaders; });
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/riff */ "./src/riff/index.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/constants */ "./src/constants.ts");



/**
 * Get all sample headers from a `shdr` sub-chunk.
 *
 * @param {SF2Chunk} chunk - The input chunk
 */
var getSampleHeaders = function getSampleHeaders(chunk) {
  if (chunk.id !== 'shdr') {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'shdr'", "'".concat(chunk.id, "'"));
  }

  if (chunk.length % _constants__WEBPACK_IMPORTED_MODULE_1__["SF_SAMPLE_HEADER_SIZE"]) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Invalid size for the 'shdr' sub-chunk");
  }

  return chunk.iterate(function (iterator) {
    return {
      name: iterator.getString(),
      start: iterator.getUInt32(),
      end: iterator.getUInt32(),
      startLoop: iterator.getUInt32(),
      endLoop: iterator.getUInt32(),
      sampleRate: iterator.getUInt32(),
      originalPitch: iterator.getByte(),
      pitchCorrection: iterator.getChar(),
      link: iterator.getInt16(),
      type: iterator.getInt16()
    };
  });
};

/***/ }),

/***/ "./src/chunks/samples/index.ts":
/*!*************************************!*\
  !*** ./src/chunks/samples/index.ts ***!
  \*************************************/
/*! exports provided: getSampleHeaders */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _headers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./headers */ "./src/chunks/samples/headers.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSampleHeaders", function() { return _headers__WEBPACK_IMPORTED_MODULE_0__["getSampleHeaders"]; });



/***/ }),

/***/ "./src/chunks/zones.ts":
/*!*****************************!*\
  !*** ./src/chunks/zones.ts ***!
  \*****************************/
/*! exports provided: getZones, getItemsInZone */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getZones", function() { return getZones; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getItemsInZone", function() { return getItemsInZone; });
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/riff */ "./src/riff/index.ts");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/constants */ "./src/constants.ts");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ~/types */ "./src/types/index.ts");



/**
 * Get the preset or instrument zones from a chunk.
 *
 * @param {SF2Chunk} chunk - The input chunk
 * @param {string} type - The type of chunk ('pbag' or 'ibag')
 */

var getZones = function getZones(chunk, type) {
  if (chunk.id !== type) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Unexpected chunk ID', "'".concat(type, "'"), "'".concat(chunk.id, "'"));
  }

  if (chunk.length % _constants__WEBPACK_IMPORTED_MODULE_1__["SF_BAG_SIZE"]) {
    throw new _riff__WEBPACK_IMPORTED_MODULE_0__["ParseError"]("Invalid size for the '".concat(type, "' sub-chunk"));
  }

  return chunk.iterate(function (iterator) {
    return {
      generatorIndex: iterator.getInt16(),
      modulatorIndex: iterator.getInt16()
    };
  });
};
/**
 * Get all modulators, generators and the instrument (for presets) or sample (for instruments) in a
 * preset or instrument.
 *
 * @template T
 * @template R
 * @param {T} headers - The preset or instrument headers
 * @param {Zone[]} zones - All zones for the preset or instrument
 * @param {Modulator[]} itemModulators - All modulators for the preset or instrument
 * @param {Generator[]} itemGenerators - All generators for the preset or instrument
 * @param {R[]} references - The instruments or samples to reference in the zone
 * @param {GeneratorType} referenceType - The generator type to reference it by
 */

var getItemsInZone = function getItemsInZone(headers, zones, itemModulators, itemGenerators, references, referenceType) {
  var items = [];

  for (var i = 0; i < headers.length; i++) {
    var _header = headers[i];
    var next = headers[i + 1];
    var start = _header.bagIndex;
    var end = next ? next.bagIndex : zones.length;
    var zoneItems = [];

    var _globalZone = void 0;

    for (var j = start; j < end; j++) {
      var modulators = getModulators(j, zones, itemModulators);
      var generators = getGenerators(j, zones, itemGenerators);
      var keyRange = generators[_types__WEBPACK_IMPORTED_MODULE_2__["GeneratorType"].KeyRange] && generators[_types__WEBPACK_IMPORTED_MODULE_2__["GeneratorType"].KeyRange].range;
      var referenceId = generators[referenceType];

      if (!referenceId) {
        if (j - start === 0) {
          // first item without reference = global zone
          // Spec 7.3: If a preset has more than one zone, the first zone may be a global zone.
          // A global zone is determined by the fact that the last generator in the list is not an Instrument generator.
          // Spec 7.9: "Unless the zone is a global zone, the last generator in the list is a “sampleID” generator"
          _globalZone = {
            keyRange: keyRange,
            modulators: modulators,
            generators: generators
          };
        }

        continue;
      }

      var reference = references[referenceId.value];

      if (!reference) {
        continue;
      }

      zoneItems.push({
        keyRange: keyRange,
        modulators: modulators,
        generators: generators,
        reference: reference
      });
    }

    items.push({
      header: _header,
      globalZone: _globalZone,
      zones: zoneItems
    });
  }

  return items;
};
/**
 * Get all modulators from a zone, based on the index. The end index is the modulator index of the
 * next zone, or the total zone length if the current zone is the last one.
 *
 * @param {number} index - The index
 * @param {Zone[]} zones - ALl zones for the preset or instrument
 * @param {Modulator[]} modulators - All modulators for the preset or instrument
 */

var getModulators = function getModulators(index, zones, modulators) {
  var zone = zones[index];
  var next = zones[index + 1];
  var start = zone.modulatorIndex;
  var end = next ? next.modulatorIndex : zones.length;
  return getZone(start, end, modulators);
};
/**
 * Get all generators from a zone, based on the index. The end index is the generators index of the
 * next zone, or the total zone length if the current zone is the last one.
 *
 * @param {number} index - The index
 * @param {Zone[]} zones - ALl zones for the preset or instrument
 * @param {Generator[]} generators - All generators for the preset or instrument
 */


var getGenerators = function getGenerators(index, zones, generators) {
  var zone = zones[index];
  var next = zones[index + 1];
  var start = zone.generatorIndex;
  var end = next ? next.generatorIndex : zones.length;
  return getZone(start, end, generators);
};
/**
 * Returns all modulators or generators as a key-value object, where the key is the `GeneratorType`
 * of the modulator or generator.
 *
 * @template T
 * @param {number} start - The start index
 * @param {number} end - The end index
 * @param {T[]} items - The modulators or generators
 */


var getZone = function getZone(start, end, items) {
  var itemsObject = {};

  for (var i = start; i < end; i++) {
    var item = items[i];

    if (item) {
      itemsObject[item.id] = item;
    }
  }

  return itemsObject;
};

/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! exports provided: SF_VERSION_LENGTH, SF_PRESET_HEADER_SIZE, SF_BAG_SIZE, SF_MODULATOR_SIZE, SF_GENERATOR_SIZE, SF_INSTRUMENT_HEADER_SIZE, SF_SAMPLE_HEADER_SIZE, DEFAULT_SAMPLE_RATE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF_VERSION_LENGTH", function() { return SF_VERSION_LENGTH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF_PRESET_HEADER_SIZE", function() { return SF_PRESET_HEADER_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF_BAG_SIZE", function() { return SF_BAG_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF_MODULATOR_SIZE", function() { return SF_MODULATOR_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF_GENERATOR_SIZE", function() { return SF_GENERATOR_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF_INSTRUMENT_HEADER_SIZE", function() { return SF_INSTRUMENT_HEADER_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SF_SAMPLE_HEADER_SIZE", function() { return SF_SAMPLE_HEADER_SIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SAMPLE_RATE", function() { return DEFAULT_SAMPLE_RATE; });
var SF_VERSION_LENGTH = 4;
var SF_PRESET_HEADER_SIZE = 38;
var SF_BAG_SIZE = 4;
var SF_MODULATOR_SIZE = 10;
var SF_GENERATOR_SIZE = 4;
var SF_INSTRUMENT_HEADER_SIZE = 22;
var SF_SAMPLE_HEADER_SIZE = 46;
var DEFAULT_SAMPLE_RATE = 22050;

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./src/types/index.ts");
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _types__WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _types__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _chunk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk */ "./src/chunk.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF2Chunk", function() { return _chunk__WEBPACK_IMPORTED_MODULE_1__["SF2Chunk"]; });

/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF_VERSION_LENGTH", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["SF_VERSION_LENGTH"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF_PRESET_HEADER_SIZE", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["SF_PRESET_HEADER_SIZE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF_BAG_SIZE", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["SF_BAG_SIZE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF_MODULATOR_SIZE", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["SF_MODULATOR_SIZE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF_GENERATOR_SIZE", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["SF_GENERATOR_SIZE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF_INSTRUMENT_HEADER_SIZE", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["SF_INSTRUMENT_HEADER_SIZE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SF_SAMPLE_HEADER_SIZE", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["SF_SAMPLE_HEADER_SIZE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SAMPLE_RATE", function() { return _constants__WEBPACK_IMPORTED_MODULE_2__["DEFAULT_SAMPLE_RATE"]; });

/* harmony import */ var _soundFont2__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./soundFont2 */ "./src/soundFont2.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SoundFont2", function() { return _soundFont2__WEBPACK_IMPORTED_MODULE_3__["SoundFont2"]; });






/***/ }),

/***/ "./src/riff/chunkIterator.ts":
/*!***********************************!*\
  !*** ./src/riff/chunkIterator.ts ***!
  \***********************************/
/*! exports provided: ChunkIterator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChunkIterator", function() { return ChunkIterator; });
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ~/utils */ "./src/utils/index.ts");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


/**
 * A utility class to quickly iterate over a buffer.
 */

var ChunkIterator =
/*#__PURE__*/
function () {
  function ChunkIterator(chunk) {
    var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, ChunkIterator);

    _defineProperty(this, "target", []);

    _defineProperty(this, "chunk", void 0);

    _defineProperty(this, "position", 0);

    this.chunk = chunk;
    this.position = start;
  }
  /**
   * Get the position from the iterator.
   */


  _createClass(ChunkIterator, [{
    key: "iterate",

    /**
     * Iterate over the chunk.
     *
     * @param {Function} callback - The callback that is called every iteration
     */
    value: function iterate(callback) {
      while (this.position < this.chunk.length) {
        var object = callback(this);

        if (object) {
          this.target.push(object);
        }
      }
    }
    /**
     * Get a string from the buffer.
     *
     * @param {number} length - The length of the string. If no length is specified, a default of 20
     *   is assumed
     */

  }, {
    key: "getString",
    value: function getString() {
      var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 20;
      var text = Object(_utils__WEBPACK_IMPORTED_MODULE_0__["getStringFromBuffer"])(this.getBuffer(this.position, length));
      this.position += length;
      return text;
    }
    /**
     * Get a signed 16-bit integer from the chunk.
     */

  }, {
    key: "getInt16",
    value: function getInt16() {
      return this.chunk.buffer[this.position++] | this.chunk.buffer[this.position++] << 8;
    }
    /**
     * Get a signed 16-bit integer from the chunk in the big-endian format.
     */

  }, {
    key: "getInt16BE",
    value: function getInt16BE() {
      return this.getInt16() << 16 >> 16;
    }
    /**
     * Get an unsigned 32-bit integer from the chunk.
     */

  }, {
    key: "getUInt32",
    value: function getUInt32() {
      return (this.chunk.buffer[this.position++] | this.chunk.buffer[this.position++] << 8 | this.chunk.buffer[this.position++] << 16 | this.chunk.buffer[this.position++] << 24) >>> 0;
    }
    /**
     * Get a single byte from the chunk.
     */

  }, {
    key: "getByte",
    value: function getByte() {
      return this.chunk.buffer[this.position++];
    }
    /**
     * Get a signed char from the chunk.
     */

  }, {
    key: "getChar",
    value: function getChar() {
      return this.chunk.buffer[this.position++] << 24 >> 24;
    }
    /**
     * Skip ahead in the buffer.
     *
     * @param {number} length
     */

  }, {
    key: "skip",
    value: function skip(length) {
      this.position += length;
    }
    /**
     * Get a part of the buffer from start to start + length.
     *
     * @param {number} start
     * @param {number} length
     */

  }, {
    key: "getBuffer",
    value: function getBuffer(start, length) {
      return this.chunk.buffer.subarray(start, start + length);
    }
  }, {
    key: "currentPosition",
    get: function get() {
      return this.position;
    }
  }]);

  return ChunkIterator;
}();

/***/ }),

/***/ "./src/riff/index.ts":
/*!***************************!*\
  !*** ./src/riff/index.ts ***!
  \***************************/
/*! exports provided: ChunkIterator, ParseError, parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId, RIFFChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _chunkIterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunkIterator */ "./src/riff/chunkIterator.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ChunkIterator", function() { return _chunkIterator__WEBPACK_IMPORTED_MODULE_0__["ChunkIterator"]; });

/* harmony import */ var _parseError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parseError */ "./src/riff/parseError.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ParseError", function() { return _parseError__WEBPACK_IMPORTED_MODULE_1__["ParseError"]; });

/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser */ "./src/riff/parser.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseBuffer", function() { return _parser__WEBPACK_IMPORTED_MODULE_2__["parseBuffer"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getChunk", function() { return _parser__WEBPACK_IMPORTED_MODULE_2__["getChunk"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getChunkLength", function() { return _parser__WEBPACK_IMPORTED_MODULE_2__["getChunkLength"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getSubChunks", function() { return _parser__WEBPACK_IMPORTED_MODULE_2__["getSubChunks"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getChunkId", function() { return _parser__WEBPACK_IMPORTED_MODULE_2__["getChunkId"]; });

/* harmony import */ var _riffChunk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./riffChunk */ "./src/riff/riffChunk.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "RIFFChunk", function() { return _riffChunk__WEBPACK_IMPORTED_MODULE_3__["RIFFChunk"]; });






/***/ }),

/***/ "./src/riff/parseError.ts":
/*!********************************!*\
  !*** ./src/riff/parseError.ts ***!
  \********************************/
/*! exports provided: ParseError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ParseError", function() { return ParseError; });
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

/**
 * Error class used for all errors encountered during the parsing of the SoundFont 2 file.
 */
var ParseError =
/*#__PURE__*/
function (_Error) {
  _inherits(ParseError, _Error);

  function ParseError(message, expected, received) {
    _classCallCheck(this, ParseError);

    return _possibleConstructorReturn(this, _getPrototypeOf(ParseError).call(this, "".concat(message).concat(expected && received ? ", expected ".concat(expected, ", received ").concat(received) : "")));
  }

  return ParseError;
}(_wrapNativeSuper(Error));

/***/ }),

/***/ "./src/riff/parser.ts":
/*!****************************!*\
  !*** ./src/riff/parser.ts ***!
  \****************************/
/*! exports provided: parseBuffer, getChunk, getChunkLength, getSubChunks, getChunkId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseBuffer", function() { return parseBuffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChunk", function() { return getChunk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChunkLength", function() { return getChunkLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSubChunks", function() { return getSubChunks; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getChunkId", function() { return getChunkId; });
/* harmony import */ var _parseError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parseError */ "./src/riff/parseError.ts");
/* harmony import */ var _utils_buffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/utils/buffer */ "./src/utils/buffer.ts");
/* harmony import */ var _riffChunk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./riffChunk */ "./src/riff/riffChunk.ts");



/**
 * Attempts to parse a RIFF file from a raw buffer.
 *
 * @param {Uint8Array} buffer - The input buffer
 */

var parseBuffer = function parseBuffer(buffer) {
  var id = getChunkId(buffer);

  if (id !== 'RIFF') {
    throw new _parseError__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Invalid file format', 'RIFF', id);
  }

  var signature = getChunkId(buffer, 8);

  if (signature !== 'sfbk') {
    throw new _parseError__WEBPACK_IMPORTED_MODULE_0__["ParseError"]('Invalid signature', 'sfbk', signature);
  }

  var newBuffer = buffer.subarray(8);
  var subChunks = getSubChunks(newBuffer.subarray(4));
  return new _riffChunk__WEBPACK_IMPORTED_MODULE_2__["RIFFChunk"](id, newBuffer.length, newBuffer, subChunks);
};
/**
 * Get a RIFF chunk from a buffer.
 *
 * @param {Buffer} buffer - The input buffer
 * @param {number} start - Where to start reading the buffer
 */

var getChunk = function getChunk(buffer, start) {
  var id = getChunkId(buffer, start);
  var length = getChunkLength(buffer, start + 4); // RIFF and LIST chunks can have sub-chunks

  var subChunks = [];

  if (id === 'RIFF' || id === 'LIST') {
    subChunks = getSubChunks(buffer.subarray(start + 12));
  }

  return new _riffChunk__WEBPACK_IMPORTED_MODULE_2__["RIFFChunk"](id, length, buffer.subarray(start + 8), subChunks);
};
/**
 * Get the length of a chunk, based on the RIFF length specifier.
 *
 * @param {Buffer} buffer - The input buffer
 * @param {number} start - Where to start reading the buffer for the length
 */

var getChunkLength = function getChunkLength(buffer, start) {
  buffer = buffer.subarray(start, start + 4);
  return (buffer[0] | buffer[1] << 8 | buffer[2] << 16 | buffer[3] << 24) >>> 0;
};
/**
 * Get all sub-chunks in a buffer. This will read until the end of the buffer and return any
 * sub-chunks found in it.
 *
 * @param {Buffer} buffer - The input buffer
 */

var getSubChunks = function getSubChunks(buffer) {
  var chunks = [];
  var index = 0;

  while (index <= buffer.length - 8) {
    var subChunk = getChunk(buffer, index);
    chunks.push(subChunk);
    index += 8 + subChunk.length;
    index = index % 2 ? index + 1 : index;
  }

  return chunks;
};
/**
 * Get the chunk ID (fourCC) from the buffer. This assumes the fourCC code is formatted as an UTF-8
 * string.
 *
 * @param {Buffer} buffer - The input buffer
 * @param {number} start - Where to start reading the chunk ID from the buffer
 */

var getChunkId = function getChunkId(buffer) {
  var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return Object(_utils_buffer__WEBPACK_IMPORTED_MODULE_1__["getStringFromBuffer"])(buffer.subarray(start, start + 4));
};

/***/ }),

/***/ "./src/riff/riffChunk.ts":
/*!*******************************!*\
  !*** ./src/riff/riffChunk.ts ***!
  \*******************************/
/*! exports provided: RIFFChunk */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RIFFChunk", function() { return RIFFChunk; });
/* harmony import */ var _chunkIterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunkIterator */ "./src/riff/chunkIterator.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ~/utils */ "./src/utils/index.ts");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var RIFFChunk =
/*#__PURE__*/
function () {
  /**
   * The chunk ID (fourCC).
   */

  /**
   * The length of the chunk.
   */

  /**
   * The raw buffer of the chunk.
   */

  /**
   * The sub-chunks of the chunk. If the chunk is not a RIFF or LIST chunk, this will be an empty
   * array.
   */
  function RIFFChunk(id, length, buffer, subChunks) {
    _classCallCheck(this, RIFFChunk);

    _defineProperty(this, "id", void 0);

    _defineProperty(this, "length", void 0);

    _defineProperty(this, "buffer", void 0);

    _defineProperty(this, "subChunks", void 0);

    this.id = id;
    this.length = length;
    this.buffer = buffer;
    this.subChunks = subChunks;
  }
  /**
   * Get a string from the buffer. If no position and no length is specified, it returns the whole
   * buffer as a string.
   *
   * @param {number} [position]
   * @param {number} [length]
   */


  _createClass(RIFFChunk, [{
    key: "getString",
    value: function getString() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var length = arguments.length > 1 ? arguments[1] : undefined;
      return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["getStringFromBuffer"])(this.getBuffer(position, length || this.length - position));
    }
    /**
     * Get a signed 16-bit integer from the buffer.
     *
     * @param {number} [position]
     */

  }, {
    key: "getInt16",
    value: function getInt16() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return this.buffer[position++] | this.buffer[position] << 8;
    }
    /**
     * Get an unsigned 32-bit integer from the buffer.
     *
     * @param {number} [position]
     */

  }, {
    key: "getUInt32",
    value: function getUInt32() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return (this.buffer[position++] | this.buffer[position++] << 8 | this.buffer[position++] << 16 | this.buffer[position] << 24) >>> 0;
    }
    /**
     * Get a byte from the buffer.
     *
     * @param {number} [position]
     */

  }, {
    key: "getByte",
    value: function getByte() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return this.buffer[position];
    }
    /**
     * Get a char from the buffer.
     *
     * @param {number} [position]
     */

  }, {
    key: "getChar",
    value: function getChar() {
      var position = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return this.buffer[position] << 24 >> 24;
    }
    /**
     * Get a chunk iterator for the chunk.
     *
     * @param {number} [start] - The position where to start iterating. Defaults to 0.
     */

  }, {
    key: "iterator",
    value: function iterator() {
      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return new _chunkIterator__WEBPACK_IMPORTED_MODULE_0__["ChunkIterator"](this, start);
    }
    /**
     * Utility function to quickly iterate over a function.
     *
     * @template T
     * @param {(iterator: ChunkIterator): T} callback - The callback that returns an instance of the
     *   specified return type
     * @param {number} [start] - The optional index where to start iterating over the chunk
     */

  }, {
    key: "iterate",
    value: function iterate(callback) {
      var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var iterator = new _chunkIterator__WEBPACK_IMPORTED_MODULE_0__["ChunkIterator"](this, start);
      iterator.iterate(callback);
      return iterator.target;
    }
    /**
     * Get a buffer from `start` to `start` + `length`. The buffer is not copied (e.g. when using
     * .slice()), so any modifications to the buffer are done to the original buffer too.
     *
     * @param {number} start
     * @param {number} length
     */

  }, {
    key: "getBuffer",
    value: function getBuffer(start, length) {
      return this.buffer.subarray(start, start + length);
    }
  }]);

  return RIFFChunk;
}();

/***/ }),

/***/ "./src/soundFont2.ts":
/*!***************************!*\
  !*** ./src/soundFont2.ts ***!
  \***************************/
/*! exports provided: SoundFont2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SoundFont2", function() { return SoundFont2; });
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ "./src/types/index.ts");
/* harmony import */ var _chunk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk */ "./src/chunk.ts");
/* harmony import */ var _riff__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./riff */ "./src/riff/index.ts");
/* harmony import */ var _chunks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunks */ "./src/chunks/index.ts");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils */ "./src/utils/index.ts");
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var SoundFont2 =
/*#__PURE__*/
function () {
  _createClass(SoundFont2, null, [{
    key: "from",

    /**
     * Create a new `SoundFont2` instance from a raw input buffer.
     *
     * @param {Uint8Array} buffer
     * @deprecated Replaced with `new SoundFont2(buffer: Uint8Array);`
     */
    value: function from(buffer) {
      return new SoundFont2(buffer);
    }
    /**
     * The raw RIFF chunk data.
     */

  }]);

  /**
   * Load a SoundFont2 file from a `Uint8Array` or a `SF2Chunk`. The recommended way is to use a
   * Uint8Array, loading a SoundFont2 from a `SF2Chunk` only exists for backwards compatibility and
   * will likely be removed in a future version.
   *
   * @param {Uint8Array|SF2Chunk} chunk
   */
  function SoundFont2(chunk) {
    _classCallCheck(this, SoundFont2);

    _defineProperty(this, "chunk", void 0);

    _defineProperty(this, "metaData", void 0);

    _defineProperty(this, "sampleData", void 0);

    _defineProperty(this, "samples", void 0);

    _defineProperty(this, "presetData", void 0);

    _defineProperty(this, "instruments", void 0);

    _defineProperty(this, "presets", void 0);

    _defineProperty(this, "banks", void 0);

    if (!(chunk instanceof _chunk__WEBPACK_IMPORTED_MODULE_1__["SF2Chunk"])) {
      var parsedBuffer = Object(_riff__WEBPACK_IMPORTED_MODULE_2__["parseBuffer"])(chunk);
      chunk = new _chunk__WEBPACK_IMPORTED_MODULE_1__["SF2Chunk"](parsedBuffer);
    }

    if (chunk.subChunks.length !== 3) {
      throw new _riff__WEBPACK_IMPORTED_MODULE_2__["ParseError"]('Invalid sfbk structure', '3 chunks', "".concat(chunk.subChunks.length, " chunks"));
    }

    this.chunk = chunk;
    this.metaData = chunk.subChunks[0].getMetaData();
    this.sampleData = chunk.subChunks[1].getSampleData();
    this.presetData = chunk.subChunks[2].getPresetData();
    this.samples = this.getSamples();
    this.instruments = this.getInstruments();
    this.presets = this.getPresets();
    this.banks = this.getBanks();
  }
  /**
   * Get the key data by MIDI bank, preset and key number. May return null if no instrument was
   * found for the given inputs. Note that this does not process any of the generators that are
   * specific to the key number.
   *
   * The result is memoized based on all arguments, to prevent having to check all presets,
   * instruments etc. every time.
   *
   * @param {number} memoizedKeyNumber - The MIDI key number
   * @param {number} [memoizedBankNumber] - The bank index number, defaults to 0
   * @param {number} [memoizedPresetNumber] - The preset number, defaults to 0
   */


  _createClass(SoundFont2, [{
    key: "getKeyData",
    value: function getKeyData(memoizedKeyNumber) {
      var _this = this;

      var memoizedBankNumber = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var memoizedPresetNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      // Get a memoized version of the function
      return Object(_utils__WEBPACK_IMPORTED_MODULE_4__["memoize"])(function (keyNumber, bankNumber, presetNumber) {
        var bank = _this.banks[bankNumber];

        if (bank) {
          var preset = bank.presets[presetNumber];

          if (preset) {
            var presetZones = preset.zones.filter(function (zone) {
              return _this.isKeyInRange(zone, keyNumber);
            });

            if (presetZones.length > 0) {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = undefined;

              try {
                for (var _iterator = presetZones[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var presetZone = _step.value;
                  var instrument = presetZone.instrument;
                  var instrumentZones = instrument.zones.filter(function (zone) {
                    return _this.isKeyInRange(zone, keyNumber);
                  });

                  if (instrumentZones.length > 0) {
                    var _iteratorNormalCompletion2 = true;
                    var _didIteratorError2 = false;
                    var _iteratorError2 = undefined;

                    try {
                      for (var _iterator2 = instrumentZones[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                        var instrumentZone = _step2.value;
                        var sample = instrumentZone.sample;

                        var generators = _objectSpread({}, presetZone.generators, instrumentZone.generators);

                        var modulators = _objectSpread({}, presetZone.modulators, instrumentZone.modulators);

                        return {
                          keyNumber: keyNumber,
                          preset: preset,
                          instrument: instrument,
                          sample: sample,
                          generators: generators,
                          modulators: modulators
                        };
                      }
                    } catch (err) {
                      _didIteratorError2 = true;
                      _iteratorError2 = err;
                    } finally {
                      try {
                        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                          _iterator2.return();
                        }
                      } finally {
                        if (_didIteratorError2) {
                          throw _iteratorError2;
                        }
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return != null) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            }
          }
        }

        return null;
      })(memoizedKeyNumber, memoizedBankNumber, memoizedPresetNumber);
    }
    /**
     * Checks if a MIDI key number is in the range of a zone.
     *
     * @param {ZoneItems} zone - The zone to check
     * @param {number} keyNumber - The MIDI key number, must be between 0 and 127
     */

  }, {
    key: "isKeyInRange",
    value: function isKeyInRange(zone, keyNumber) {
      return zone.keyRange === undefined || zone.keyRange.lo <= keyNumber && zone.keyRange.hi >= keyNumber;
    }
    /**
     * Parse the presets to banks.
     */

  }, {
    key: "getBanks",
    value: function getBanks() {
      return this.presets.reduce(function (target, preset) {
        var bankNumber = preset.header.bank;

        if (!target[bankNumber]) {
          target[bankNumber] = {
            presets: []
          };
        }

        target[bankNumber].presets[preset.header.preset] = preset;
        return target;
      }, []);
    }
    /**
     * Parse the raw preset data to presets.
     */

  }, {
    key: "getPresets",
    value: function getPresets() {
      var _this$presetData = this.presetData,
          presetHeaders = _this$presetData.presetHeaders,
          presetZones = _this$presetData.presetZones,
          presetGenerators = _this$presetData.presetGenerators,
          presetModulators = _this$presetData.presetModulators;
      var presets = Object(_chunks__WEBPACK_IMPORTED_MODULE_3__["getItemsInZone"])(presetHeaders, presetZones, presetModulators, presetGenerators, this.instruments, _types__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].Instrument);
      return presets.filter(function (preset) {
        return preset.header.name !== 'EOP';
      }).map(function (preset) {
        return {
          header: preset.header,
          globalZone: preset.globalZone,
          zones: preset.zones.map(function (zone) {
            return {
              keyRange: zone.keyRange,
              generators: zone.generators,
              modulators: zone.modulators,
              instrument: zone.reference
            };
          })
        };
      });
    }
    /**
     * Parse the raw instrument data (found in the preset data) to instruments.
     */

  }, {
    key: "getInstruments",
    value: function getInstruments() {
      var _this$presetData2 = this.presetData,
          instrumentHeaders = _this$presetData2.instrumentHeaders,
          instrumentZones = _this$presetData2.instrumentZones,
          instrumentModulators = _this$presetData2.instrumentModulators,
          instrumentGenerators = _this$presetData2.instrumentGenerators;
      var instruments = Object(_chunks__WEBPACK_IMPORTED_MODULE_3__["getItemsInZone"])(instrumentHeaders, instrumentZones, instrumentModulators, instrumentGenerators, this.samples, _types__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].SampleId);
      return instruments.filter(function (instrument) {
        return instrument.header.name !== 'EOI';
      }).map(function (instrument) {
        return {
          header: instrument.header,
          globalZone: instrument.globalZone,
          zones: instrument.zones.map(function (zone) {
            return {
              keyRange: zone.keyRange,
              generators: zone.generators,
              modulators: zone.modulators,
              sample: zone.reference
            };
          })
        };
      });
    }
    /**
     * Parse the raw sample data and sample headers to samples.
     */

  }, {
    key: "getSamples",
    value: function getSamples() {
      var _this2 = this;

      return this.presetData.sampleHeaders.filter(function (sample) {
        return sample.name !== 'EOS';
      }).map(function (header) {
        // Sample rate must be above 0
        if (header.name !== 'EOS' && header.sampleRate <= 0) {
          throw new Error("Illegal sample rate of ".concat(header.sampleRate, " hz in sample '").concat(header.name, "'"));
        } // Original pitch cannot be between 128 and 254


        if (header.originalPitch >= 128 && header.originalPitch <= 254) {
          header.originalPitch = 60;
        }

        header.startLoop -= header.start;
        header.endLoop -= header.start; // Turns the Uint8Array into a Int16Array

        var data = new Int16Array(new Uint8Array(_this2.sampleData.subarray(header.start * 2, header.end * 2)).buffer);
        return {
          header: header,
          data: data
        };
      });
    }
  }]);

  return SoundFont2;
}();

/***/ }),

/***/ "./src/types/bank.ts":
/*!***************************!*\
  !*** ./src/types/bank.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/types/generator.ts":
/*!********************************!*\
  !*** ./src/types/generator.ts ***!
  \********************************/
/*! exports provided: GeneratorType, DEFAULT_GENERATOR_VALUES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GeneratorType", function() { return GeneratorType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_GENERATOR_VALUES", function() { return DEFAULT_GENERATOR_VALUES; });
var _DEFAULT_GENERATOR_VA;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Generator (or modulator) types. These are defined in a specific order, following the spec. The
 * enum ID corresponds with the ID in the spec, so the unused and reserved fields should not be
 * removed.
 */
var GeneratorType;
/**
 * All unused generators.
 */

(function (GeneratorType) {
  GeneratorType[GeneratorType["StartAddrsOffset"] = 0] = "StartAddrsOffset";
  GeneratorType[GeneratorType["EndAddrsOffset"] = 1] = "EndAddrsOffset";
  GeneratorType[GeneratorType["StartLoopAddrsOffset"] = 2] = "StartLoopAddrsOffset";
  GeneratorType[GeneratorType["EndLoopAddrsOffset"] = 3] = "EndLoopAddrsOffset";
  GeneratorType[GeneratorType["StartAddrsCoarseOffset"] = 4] = "StartAddrsCoarseOffset";
  GeneratorType[GeneratorType["ModLFOToPitch"] = 5] = "ModLFOToPitch";
  GeneratorType[GeneratorType["VibLFOToPitch"] = 6] = "VibLFOToPitch";
  GeneratorType[GeneratorType["ModEnvToPitch"] = 7] = "ModEnvToPitch";
  GeneratorType[GeneratorType["InitialFilterFc"] = 8] = "InitialFilterFc";
  GeneratorType[GeneratorType["InitialFilterQ"] = 9] = "InitialFilterQ";
  GeneratorType[GeneratorType["ModLFOToFilterFc"] = 10] = "ModLFOToFilterFc";
  GeneratorType[GeneratorType["ModEnvToFilterFc"] = 11] = "ModEnvToFilterFc";
  GeneratorType[GeneratorType["EndAddrsCoarseOffset"] = 12] = "EndAddrsCoarseOffset";
  GeneratorType[GeneratorType["ModLFOToVolume"] = 13] = "ModLFOToVolume";
  GeneratorType[GeneratorType["Unused1"] = 14] = "Unused1";
  GeneratorType[GeneratorType["ChorusEffectsSend"] = 15] = "ChorusEffectsSend";
  GeneratorType[GeneratorType["ReverbEffectsSend"] = 16] = "ReverbEffectsSend";
  GeneratorType[GeneratorType["Pan"] = 17] = "Pan";
  GeneratorType[GeneratorType["Unused2"] = 18] = "Unused2";
  GeneratorType[GeneratorType["Unused3"] = 19] = "Unused3";
  GeneratorType[GeneratorType["Unused4"] = 20] = "Unused4";
  GeneratorType[GeneratorType["DelayModLFO"] = 21] = "DelayModLFO";
  GeneratorType[GeneratorType["FreqModLFO"] = 22] = "FreqModLFO";
  GeneratorType[GeneratorType["DelayVibLFO"] = 23] = "DelayVibLFO";
  GeneratorType[GeneratorType["FreqVibLFO"] = 24] = "FreqVibLFO";
  GeneratorType[GeneratorType["DelayModEnv"] = 25] = "DelayModEnv";
  GeneratorType[GeneratorType["AttackModEnv"] = 26] = "AttackModEnv";
  GeneratorType[GeneratorType["HoldModEnv"] = 27] = "HoldModEnv";
  GeneratorType[GeneratorType["DecayModEnv"] = 28] = "DecayModEnv";
  GeneratorType[GeneratorType["SustainModEnv"] = 29] = "SustainModEnv";
  GeneratorType[GeneratorType["ReleaseModEnv"] = 30] = "ReleaseModEnv";
  GeneratorType[GeneratorType["KeyNumToModEnvHold"] = 31] = "KeyNumToModEnvHold";
  GeneratorType[GeneratorType["KeyNumToModEnvDecay"] = 32] = "KeyNumToModEnvDecay";
  GeneratorType[GeneratorType["DelayVolEnv"] = 33] = "DelayVolEnv";
  GeneratorType[GeneratorType["AttackVolEnv"] = 34] = "AttackVolEnv";
  GeneratorType[GeneratorType["HoldVolEnv"] = 35] = "HoldVolEnv";
  GeneratorType[GeneratorType["DecayVolEnv"] = 36] = "DecayVolEnv";
  GeneratorType[GeneratorType["SustainVolEnv"] = 37] = "SustainVolEnv";
  GeneratorType[GeneratorType["ReleaseVolEnv"] = 38] = "ReleaseVolEnv";
  GeneratorType[GeneratorType["KeyNumToVolEnvHold"] = 39] = "KeyNumToVolEnvHold";
  GeneratorType[GeneratorType["KeyNumToVolEnvDecay"] = 40] = "KeyNumToVolEnvDecay";
  GeneratorType[GeneratorType["Instrument"] = 41] = "Instrument";
  GeneratorType[GeneratorType["Reserved1"] = 42] = "Reserved1";
  GeneratorType[GeneratorType["KeyRange"] = 43] = "KeyRange";
  GeneratorType[GeneratorType["VelRange"] = 44] = "VelRange";
  GeneratorType[GeneratorType["StartLoopAddrsCoarseOffset"] = 45] = "StartLoopAddrsCoarseOffset";
  GeneratorType[GeneratorType["KeyNum"] = 46] = "KeyNum";
  GeneratorType[GeneratorType["Velocity"] = 47] = "Velocity";
  GeneratorType[GeneratorType["InitialAttenuation"] = 48] = "InitialAttenuation";
  GeneratorType[GeneratorType["Reserved2"] = 49] = "Reserved2";
  GeneratorType[GeneratorType["EndLoopAddrsCoarseOffset"] = 50] = "EndLoopAddrsCoarseOffset";
  GeneratorType[GeneratorType["CoarseTune"] = 51] = "CoarseTune";
  GeneratorType[GeneratorType["FineTune"] = 52] = "FineTune";
  GeneratorType[GeneratorType["SampleId"] = 53] = "SampleId";
  GeneratorType[GeneratorType["SampleModes"] = 54] = "SampleModes";
  GeneratorType[GeneratorType["Reserved3"] = 55] = "Reserved3";
  GeneratorType[GeneratorType["ScaleTuning"] = 56] = "ScaleTuning";
  GeneratorType[GeneratorType["ExclusiveClass"] = 57] = "ExclusiveClass";
  GeneratorType[GeneratorType["OverridingRootKey"] = 58] = "OverridingRootKey";
  GeneratorType[GeneratorType["Unused5"] = 59] = "Unused5";
  GeneratorType[GeneratorType["EndOper"] = 60] = "EndOper";
})(GeneratorType || (GeneratorType = {}));

/**
 * The default value for all generator types (where applicable).
 */
var DEFAULT_GENERATOR_VALUES = (_DEFAULT_GENERATOR_VA = {}, _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.StartAddrsOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.EndAddrsOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.StartLoopAddrsOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.EndLoopAddrsOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.StartAddrsCoarseOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ModLFOToPitch, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.VibLFOToPitch, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ModEnvToPitch, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.InitialFilterFc, 13500), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.InitialFilterQ, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ModLFOToFilterFc, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ModEnvToFilterFc, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.EndAddrsCoarseOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ModLFOToVolume, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ChorusEffectsSend, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ReverbEffectsSend, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.Pan, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.DelayModLFO, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.FreqModLFO, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.DelayVibLFO, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.FreqVibLFO, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.DelayModEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.AttackModEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.HoldModEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.DecayModEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.SustainModEnv, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ReleaseModEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.KeyNumToModEnvHold, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.KeyNumToModEnvDecay, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.DelayVolEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.AttackVolEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.HoldVolEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.DecayVolEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.SustainVolEnv, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ReleaseVolEnv, -12000), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.KeyNumToVolEnvHold, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.KeyNumToVolEnvDecay, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.StartLoopAddrsCoarseOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.KeyNum, -1), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.Velocity, -1), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.InitialAttenuation, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.EndLoopAddrsCoarseOffset, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.CoarseTune, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.FineTune, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.SampleModes, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ScaleTuning, 100), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.ExclusiveClass, 0), _defineProperty(_DEFAULT_GENERATOR_VA, GeneratorType.OverridingRootKey, -1), _DEFAULT_GENERATOR_VA);
/**
 * Describes a range of MIDI key numbers (for the `keyRange` generator) or MIDI velocities (for the
 * `velRange` generator) with a minimum (lo) and maximum (hi) value.
 */

/***/ }),

/***/ "./src/types/index.ts":
/*!****************************!*\
  !*** ./src/types/index.ts ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _bank__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./bank */ "./src/types/bank.ts");
/* harmony import */ var _bank__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_bank__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _bank__WEBPACK_IMPORTED_MODULE_0__) if(["default"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _bank__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _generator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generator */ "./src/types/generator.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GeneratorType", function() { return _generator__WEBPACK_IMPORTED_MODULE_1__["GeneratorType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_GENERATOR_VALUES", function() { return _generator__WEBPACK_IMPORTED_MODULE_1__["DEFAULT_GENERATOR_VALUES"]; });

/* harmony import */ var _instrument__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./instrument */ "./src/types/instrument.ts");
/* harmony import */ var _instrument__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_instrument__WEBPACK_IMPORTED_MODULE_2__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _instrument__WEBPACK_IMPORTED_MODULE_2__) if(["default","GeneratorType","DEFAULT_GENERATOR_VALUES"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _instrument__WEBPACK_IMPORTED_MODULE_2__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _key__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./key */ "./src/types/key.ts");
/* harmony import */ var _key__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_key__WEBPACK_IMPORTED_MODULE_3__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _key__WEBPACK_IMPORTED_MODULE_3__) if(["default","GeneratorType","DEFAULT_GENERATOR_VALUES"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _key__WEBPACK_IMPORTED_MODULE_3__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _metaData__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./metaData */ "./src/types/metaData.ts");
/* harmony import */ var _metaData__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_metaData__WEBPACK_IMPORTED_MODULE_4__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _metaData__WEBPACK_IMPORTED_MODULE_4__) if(["default","GeneratorType","DEFAULT_GENERATOR_VALUES"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _metaData__WEBPACK_IMPORTED_MODULE_4__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _modulator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modulator */ "./src/types/modulator.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ControllerType", function() { return _modulator__WEBPACK_IMPORTED_MODULE_5__["ControllerType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ControllerPolarity", function() { return _modulator__WEBPACK_IMPORTED_MODULE_5__["ControllerPolarity"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ControllerDirection", function() { return _modulator__WEBPACK_IMPORTED_MODULE_5__["ControllerDirection"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ControllerPalette", function() { return _modulator__WEBPACK_IMPORTED_MODULE_5__["ControllerPalette"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Controller", function() { return _modulator__WEBPACK_IMPORTED_MODULE_5__["Controller"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TransformType", function() { return _modulator__WEBPACK_IMPORTED_MODULE_5__["TransformType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_INSTRUMENT_MODULATORS", function() { return _modulator__WEBPACK_IMPORTED_MODULE_5__["DEFAULT_INSTRUMENT_MODULATORS"]; });

/* harmony import */ var _preset__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./preset */ "./src/types/preset.ts");
/* harmony import */ var _preset__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_preset__WEBPACK_IMPORTED_MODULE_6__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _preset__WEBPACK_IMPORTED_MODULE_6__) if(["default","GeneratorType","DEFAULT_GENERATOR_VALUES","ControllerType","ControllerPolarity","ControllerDirection","ControllerPalette","Controller","TransformType","DEFAULT_INSTRUMENT_MODULATORS"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _preset__WEBPACK_IMPORTED_MODULE_6__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _presetData__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./presetData */ "./src/types/presetData.ts");
/* harmony import */ var _presetData__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_presetData__WEBPACK_IMPORTED_MODULE_7__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _presetData__WEBPACK_IMPORTED_MODULE_7__) if(["default","GeneratorType","DEFAULT_GENERATOR_VALUES","ControllerType","ControllerPolarity","ControllerDirection","ControllerPalette","Controller","TransformType","DEFAULT_INSTRUMENT_MODULATORS"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _presetData__WEBPACK_IMPORTED_MODULE_7__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony import */ var _sample__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sample */ "./src/types/sample.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SampleType", function() { return _sample__WEBPACK_IMPORTED_MODULE_8__["SampleType"]; });

/* harmony import */ var _zone__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./zone */ "./src/types/zone.ts");
/* harmony import */ var _zone__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(_zone__WEBPACK_IMPORTED_MODULE_9__);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _zone__WEBPACK_IMPORTED_MODULE_9__) if(["default","GeneratorType","DEFAULT_GENERATOR_VALUES","ControllerType","ControllerPolarity","ControllerDirection","ControllerPalette","Controller","TransformType","DEFAULT_INSTRUMENT_MODULATORS","SampleType"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _zone__WEBPACK_IMPORTED_MODULE_9__[key]; }) }(__WEBPACK_IMPORT_KEY__));











/***/ }),

/***/ "./src/types/instrument.ts":
/*!*********************************!*\
  !*** ./src/types/instrument.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/types/key.ts":
/*!**************************!*\
  !*** ./src/types/key.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/types/metaData.ts":
/*!*******************************!*\
  !*** ./src/types/metaData.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/types/modulator.ts":
/*!********************************!*\
  !*** ./src/types/modulator.ts ***!
  \********************************/
/*! exports provided: ControllerType, ControllerPolarity, ControllerDirection, ControllerPalette, Controller, TransformType, DEFAULT_INSTRUMENT_MODULATORS */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControllerType", function() { return ControllerType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControllerPolarity", function() { return ControllerPolarity; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControllerDirection", function() { return ControllerDirection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ControllerPalette", function() { return ControllerPalette; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Controller", function() { return Controller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransformType", function() { return TransformType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_INSTRUMENT_MODULATORS", function() { return DEFAULT_INSTRUMENT_MODULATORS; });
/* harmony import */ var _generator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generator */ "./src/types/generator.ts");

var ControllerType;

(function (ControllerType) {
  ControllerType[ControllerType["Linear"] = 0] = "Linear";
  ControllerType[ControllerType["Concave"] = 1] = "Concave";
  ControllerType[ControllerType["Convex"] = 2] = "Convex";
  ControllerType[ControllerType["Switch"] = 3] = "Switch";
})(ControllerType || (ControllerType = {}));

var ControllerPolarity;

(function (ControllerPolarity) {
  ControllerPolarity[ControllerPolarity["Unipolar"] = 0] = "Unipolar";
  ControllerPolarity[ControllerPolarity["Bipolar"] = 1] = "Bipolar";
})(ControllerPolarity || (ControllerPolarity = {}));

var ControllerDirection;

(function (ControllerDirection) {
  ControllerDirection[ControllerDirection["Increasing"] = 0] = "Increasing";
  ControllerDirection[ControllerDirection["Decreasing"] = 1] = "Decreasing";
})(ControllerDirection || (ControllerDirection = {}));

var ControllerPalette;

(function (ControllerPalette) {
  ControllerPalette[ControllerPalette["GeneralController"] = 0] = "GeneralController";
  ControllerPalette[ControllerPalette["MidiController"] = 1] = "MidiController";
})(ControllerPalette || (ControllerPalette = {}));

var Controller;

(function (Controller) {
  Controller[Controller["NoController"] = 0] = "NoController";
  Controller[Controller["NoteOnVelocity"] = 2] = "NoteOnVelocity";
  Controller[Controller["NoteOnKeyNumber"] = 3] = "NoteOnKeyNumber";
  Controller[Controller["PolyPressure"] = 10] = "PolyPressure";
  Controller[Controller["ChannelPressure"] = 13] = "ChannelPressure";
  Controller[Controller["PitchWheel"] = 14] = "PitchWheel";
  Controller[Controller["PitchWheelSensitivity"] = 16] = "PitchWheelSensitivity";
  Controller[Controller["Link"] = 127] = "Link";
})(Controller || (Controller = {}));

var TransformType;

(function (TransformType) {
  TransformType[TransformType["Linear"] = 0] = "Linear";
  TransformType[TransformType["Absolute"] = 2] = "Absolute";
})(TransformType || (TransformType = {}));

/**
 * The default modulators at instrument level. Implementing these is up to the consumer of this
 * library. To override these modulators, other modulators have to be defined explicitly.
 */
var DEFAULT_INSTRUMENT_MODULATORS = [// MIDI note-on velocity to initial attenuation
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].InitialAttenuation,
  source: {
    type: ControllerType.Concave,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Decreasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoteOnVelocity
  },
  value: 960,
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI note-on velocity to filter cutoff
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].InitialFilterFc,
  source: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Decreasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoteOnVelocity
  },
  value: -2400,
  // cents
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI channel pressure to vibrato LFO pitch depth
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].VibLFOToPitch,
  source: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.ChannelPressure
  },
  value: 50,
  // cents / max excursion
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI continuous controller 1 to vibrato LFO pitch depth
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].VibLFOToPitch,
  source: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.MidiController,
    index: 1
  },
  value: 50,
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI continuous controller 7 to initial attenuation
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].InitialAttenuation,
  source: {
    type: ControllerType.Concave,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Decreasing,
    palette: ControllerPalette.MidiController,
    index: 7
  },
  value: 960,
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI continuous controller 10 to pan position
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].InitialAttenuation,
  source: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Bipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.MidiController,
    index: 10
  },
  value: 1000,
  // tenths of a percent
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI continuous controller 11 to initial attenuation
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].InitialAttenuation,
  source: {
    type: ControllerType.Concave,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Decreasing,
    palette: ControllerPalette.MidiController,
    index: 11
  },
  value: 960,
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI continuous controller 91 to reverb effects send
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].ReverbEffectsSend,
  source: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.MidiController,
    index: 91
  },
  value: 200,
  // tenths of a percent
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI continuous controller 93 to chorus effects send
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].ChorusEffectsSend,
  source: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.MidiController,
    index: 93
  },
  value: 200,
  // tenths of a percent
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.NoController
  },
  transform: TransformType.Linear
}, // MIDI pitch wheel to initial pitch controlled by MIDI pitch wheel sensitivity
{
  id: _generator__WEBPACK_IMPORTED_MODULE_0__["GeneratorType"].CoarseTune,
  source: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Bipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.PitchWheel
  },
  value: 12700,
  // cents
  valueSource: {
    type: ControllerType.Linear,
    polarity: ControllerPolarity.Unipolar,
    direction: ControllerDirection.Increasing,
    palette: ControllerPalette.GeneralController,
    index: Controller.PitchWheelSensitivity
  },
  transform: TransformType.Linear
}];

/***/ }),

/***/ "./src/types/preset.ts":
/*!*****************************!*\
  !*** ./src/types/preset.ts ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/types/presetData.ts":
/*!*********************************!*\
  !*** ./src/types/presetData.ts ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/types/sample.ts":
/*!*****************************!*\
  !*** ./src/types/sample.ts ***!
  \*****************************/
/*! exports provided: SampleType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SampleType", function() { return SampleType; });
/**
 * SoundFont2 samples are in the WAV format, meaning that they consist of a signed 16-bit array,
 * instead of a unsigned 8-bit array, which is read by default. The sample data in the `smpl`
 * sub-chunk is parsed as Int16Array before creating a sample.
 */

/**
 * The sample type, found in the `type` field in the header.
 */
var SampleType;

(function (SampleType) {
  SampleType[SampleType["EOS"] = 0] = "EOS";
  SampleType[SampleType["Mono"] = 1] = "Mono";
  SampleType[SampleType["Right"] = 2] = "Right";
  SampleType[SampleType["Left"] = 4] = "Left";
  SampleType[SampleType["Linked"] = 8] = "Linked";
  SampleType[SampleType["RomMono"] = 32769] = "RomMono";
  SampleType[SampleType["RomRight"] = 32770] = "RomRight";
  SampleType[SampleType["RomLeft"] = 32772] = "RomLeft";
  SampleType[SampleType["RomLinked"] = 32776] = "RomLinked";
})(SampleType || (SampleType = {}));

/***/ }),

/***/ "./src/types/zone.ts":
/*!***************************!*\
  !*** ./src/types/zone.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./src/utils/buffer.ts":
/*!*****************************!*\
  !*** ./src/utils/buffer.ts ***!
  \*****************************/
/*! exports provided: getStringFromBuffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStringFromBuffer", function() { return getStringFromBuffer; });
/**
 * Convert a UTF-8 encoded buffer into a string. This will read the full buffer as UTF-8 encoded
 * string and return anything before the first NULL character. The output text is trimmed of any
 * preceding or following spaces.
 *
 * @param {Buffer} buffer - The input buffer
 */
var getStringFromBuffer = function getStringFromBuffer(buffer) {
  var decoded = new TextDecoder('utf8').decode(buffer);
  var nullIndex = decoded.indexOf('\0');
  return (nullIndex === -1 ? decoded : decoded.slice(0, nullIndex)).trim();
};

/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/*! exports provided: getStringFromBuffer, memoize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./buffer */ "./src/utils/buffer.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getStringFromBuffer", function() { return _buffer__WEBPACK_IMPORTED_MODULE_0__["getStringFromBuffer"]; });

/* harmony import */ var _memoize__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./memoize */ "./src/utils/memoize.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return _memoize__WEBPACK_IMPORTED_MODULE_1__["memoize"]; });




/***/ }),

/***/ "./src/utils/memoize.ts":
/*!******************************!*\
  !*** ./src/utils/memoize.ts ***!
  \******************************/
/*! exports provided: memoize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "memoize", function() { return memoize; });
/**
 * Returns a memoized function for the original function. Function arguments are serialized as a
 * JSON string and stored in an in-memory object.
 *
 * @template T
 * @template U
 * @param {(...originalArgs: T[]) => U} originalFunction
 */
var memoize = function memoize(originalFunction) {
  var memo = {};
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serializedArgs = JSON.stringify(args);

    if (serializedArgs in memo) {
      return memo[serializedArgs];
    }

    var output = originalFunction.apply(void 0, args);
    memo[serializedArgs] = output;
    return output;
  };
};

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,