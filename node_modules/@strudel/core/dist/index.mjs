import A from "fraction.js";
const Lt = "strudel.log";
let be = 1e3, Et, Mt;
function E(t, e, n = {}) {
  let s = performance.now();
  Et === t && s - Mt < be || (Et = t, Mt = s, console.log(`%c${t}`, "background-color: black;color:white;border-radius:15px"), typeof document < "u" && typeof CustomEvent < "u" && document.dispatchEvent(
    new CustomEvent(Lt, {
      detail: {
        message: t,
        type: e,
        data: n
      }
    })
  ));
}
E.key = Lt;
const gu = (t) => /^[a-gA-G][#bs]*[0-9]$/.test(t), wt = (t) => /^[a-gA-G][#bsf]*[0-9]?$/.test(t), _e = (t) => {
  if (typeof t != "string")
    return [];
  const [e, n = "", s] = t.match(/^([a-gA-G])([#bsf]*)([0-9]*)$/)?.slice(1) || [];
  return e ? [e, n, s ? Number(s) : void 0] : [];
}, ve = { c: 0, d: 2, e: 4, f: 5, g: 7, a: 9, b: 11 }, ke = { "#": 1, b: -1, s: 1, f: -1 }, ct = (t, e = 3) => {
  const [n, s, r = e] = _e(t);
  if (!n)
    throw new Error('not a note: "' + t + '"');
  const o = ve[n.toLowerCase()], i = s?.split("").reduce((u, a) => u + ke[a], 0) || 0;
  return (Number(r) + 1) * 12 + o + i;
}, tt = (t) => Math.pow(2, (t - 69) / 12) * 440, qe = (t) => 12 * Math.log(t / 440) / Math.LN2 + 69, wu = (t, e) => {
  if (typeof t != "object")
    throw new Error("valueToMidi: expected object value");
  let { freq: n, note: s } = t;
  if (typeof n == "number")
    return qe(n);
  if (typeof s == "string")
    return ct(s);
  if (typeof s == "number")
    return s;
  if (!e)
    throw new Error("valueToMidi: expected freq or note to be set");
  return e;
}, bu = (t, e) => (t - e) * 1e3, Ae = (t) => tt(typeof t == "number" ? t : ct(t)), Se = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"], _u = (t) => {
  const e = Math.floor(t / 12) - 1;
  return Se[t % 12] + e;
}, ut = (t, e) => (t % e + e) % e, Te = (t) => t.reduce((e, n) => e + n) / t.length;
function Ce(t, e = 0) {
  return isNaN(Number(t)) ? (E(`"${t}" is not a number, falling back to ${e}`, "warning"), e) : t;
}
const vu = (t, e) => ut(Math.round(Ce(t ?? 0, 0)), e), ku = (t) => {
  let { value: e, context: n } = t, s = e;
  if (typeof s == "object" && !Array.isArray(s) && (s = s.note || s.n || s.value, s === void 0))
    throw new Error(`cannot find a playable note for ${JSON.stringify(e)}`);
  if (typeof s == "number" && n.type !== "frequency")
    s = tt(t.value);
  else if (typeof s == "number" && n.type === "frequency")
    s = t.value;
  else if (typeof s != "string" || !wt(s))
    throw new Error("not a note: " + JSON.stringify(s));
  return s;
}, qu = (t) => {
  let { value: e, context: n } = t;
  if (typeof e == "object")
    return e.freq ? e.freq : Ae(e.note || e.n || e.value);
  if (typeof e == "number" && n.type !== "frequency")
    e = tt(t.value);
  else if (typeof e == "string" && wt(e))
    e = tt(ct(t.value));
  else if (typeof e != "number")
    throw new Error("not a note or frequency: " + e);
  return e;
}, xe = (t, e) => t.slice(e).concat(t.slice(0, e)), Oe = (...t) => t.reduce(
  (e, n) => (...s) => e(n(...s)),
  (e) => e
), Au = (...t) => Oe(...t.reverse()), nt = (t) => t.filter((e) => e != null), Q = (t) => [].concat(...t), Z = (t) => t, Su = (t, e) => t, Wt = (t, e) => Array.from({ length: e - t + 1 }, (n, s) => s + t);
function g(t, e, n = t.length) {
  const s = function r(...o) {
    if (o.length >= n)
      return t.apply(this, o);
    {
      const i = function(...u) {
        return r.apply(this, o.concat(u));
      };
      return e && e(i, o), i;
    }
  };
  return e && e(s, []), s;
}
function Ht(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  if (wt(t))
    return ct(t);
  throw new Error(`cannot parse as numeral: "${t}"`);
}
function It(t, e) {
  return (...n) => t(...n.map(e));
}
function N(t) {
  return It(t, Ht);
}
function Be(t) {
  const e = Number(t);
  if (!isNaN(e))
    return e;
  const n = {
    pi: Math.PI,
    w: 1,
    h: 0.5,
    q: 0.25,
    e: 0.125,
    s: 0.0625,
    t: 1 / 3,
    f: 0.2,
    x: 1 / 6
  }[t];
  if (typeof n < "u")
    return n;
  throw new Error(`cannot parse as fractional: "${t}"`);
}
const Tu = (t) => It(t, Be), Ft = function(t, e) {
  return [e.slice(0, t), e.slice(t)];
}, Vt = (t, e, n) => e.map((s, r) => t(s, n[r])), ze = function(t) {
  const e = [];
  for (let n = 0; n < t.length - 1; ++n)
    e.push([t[n], t[n + 1]]);
  return e;
}, Ee = (t, e, n) => Math.min(Math.max(t, e), n), Me = ["Do", "Reb", "Re", "Mib", "Mi", "Fa", "Solb", "Sol", "Lab", "La", "Sib", "Si"], Je = [
  "Sa",
  "Re",
  "Ga",
  "Ma",
  "Pa",
  "Dha",
  "Ni"
], je = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Hb", "H"], Pe = [
  "Ni",
  "Pab",
  "Pa",
  "Voub",
  "Vou",
  "Ga",
  "Dib",
  "Di",
  "Keb",
  "Ke",
  "Zob",
  "Zo"
], Ne = [
  "I",
  "Ro",
  "Ha",
  "Ni",
  "Ho",
  "He",
  "To"
], $e = ["C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "B"], Cu = (t, e = "letters") => {
  const s = (e === "solfeggio" ? Me : e === "indian" ? Je : e === "german" ? je : e === "byzantine" ? Pe : e === "japanese" ? Ne : $e)[t % 12], r = Math.floor(t / 12) - 1;
  return s + r;
};
function xu(t) {
  var e = {};
  return t.filter(function(n) {
    return e.hasOwn(n) ? !1 : e[n] = !0;
  });
}
function Ou(t) {
  return t.sort().filter(function(e, n, s) {
    return !n || e != s[n - 1];
  });
}
function Re(t) {
  return t.sort((e, n) => e.compare(n)).filter(function(e, n, s) {
    return !n || e.ne(s[n - 1]);
  });
}
function Le(t) {
  const e = new TextEncoder().encode(t);
  return btoa(String.fromCharCode(...e));
}
function We(t) {
  const e = new Uint8Array(
    atob(t).split("").map((s) => s.charCodeAt(0))
  );
  return new TextDecoder().decode(e);
}
function Bu(t) {
  return encodeURIComponent(Le(t));
}
function zu(t) {
  return We(decodeURIComponent(t));
}
function He(t, e) {
  return Array.isArray(t) ? t.map(e) : Object.fromEntries(Object.entries(t).map(([n, s], r) => [n, e(s, n, r)]));
}
function Jt(t, e) {
  return t / e;
}
class Ie {
  constructor({
    getTargetClockTime: e = Fe,
    weight: n = 16,
    offsetDelta: s = 5e-3,
    checkAfterTime: r = 2,
    resetAfterTime: o = 8
  }) {
    this.offsetTime, this.timeAtPrevOffsetSample, this.prevOffsetTimes = [], this.getTargetClockTime = e, this.weight = n, this.offsetDelta = s, this.checkAfterTime = r, this.resetAfterTime = o, this.reset = () => {
      this.prevOffsetTimes = [], this.offsetTime = null, this.timeAtPrevOffsetSample = null;
    };
  }
  calculateOffset(e) {
    const n = this.getTargetClockTime(), s = n - this.timeAtPrevOffsetSample, r = n - e;
    if (s > this.resetAfterTime && this.reset(), this.offsetTime == null && (this.offsetTime = r), this.prevOffsetTimes.push(r), this.prevOffsetTimes.length > this.weight && this.prevOffsetTimes.shift(), this.timeAtPrevOffsetSample == null || s > this.checkAfterTime) {
      this.timeAtPrevOffsetSample = n;
      const o = Te(this.prevOffsetTimes);
      Math.abs(o - this.offsetTime) > this.offsetDelta && (this.offsetTime = o);
    }
    return this.offsetTime;
  }
  calculateTimestamp(e, n) {
    return this.calculateOffset(e) + n;
  }
}
function Eu() {
  return performance.now() * 1e-3;
}
function Fe() {
  return Date.now() * 1e-3;
}
const Ve = /* @__PURE__ */ new Map([
  ["control", "Control"],
  ["ctrl", "Control"],
  ["alt", "Alt"],
  ["shift", "Shift"],
  ["down", "ArrowDown"],
  ["up", "ArrowUp"],
  ["left", "ArrowLeft"],
  ["right", "ArrowRight"]
]);
let Y;
function De() {
  if (Y == null) {
    if (typeof window > "u")
      return;
    Y = {}, window.addEventListener("keydown", (t) => {
      Y[t.key] = !0;
    }), window.addEventListener("keyup", (t) => {
      Y[t.key] = !1;
    });
  }
  return { ...Y };
}
A.prototype.sam = function() {
  return this.floor();
};
A.prototype.nextSam = function() {
  return this.sam().add(1);
};
A.prototype.wholeCycle = function() {
  return new T(this.sam(), this.nextSam());
};
A.prototype.cyclePos = function() {
  return this.sub(this.sam());
};
A.prototype.lt = function(t) {
  return this.compare(t) < 0;
};
A.prototype.gt = function(t) {
  return this.compare(t) > 0;
};
A.prototype.lte = function(t) {
  return this.compare(t) <= 0;
};
A.prototype.gte = function(t) {
  return this.compare(t) >= 0;
};
A.prototype.eq = function(t) {
  return this.compare(t) == 0;
};
A.prototype.ne = function(t) {
  return this.compare(t) != 0;
};
A.prototype.max = function(t) {
  return this.gt(t) ? this : t;
};
A.prototype.maximum = function(...t) {
  return t = t.map((e) => new A(e)), t.reduce((e, n) => n.max(e), this);
};
A.prototype.min = function(t) {
  return this.lt(t) ? this : t;
};
A.prototype.mulmaybe = function(t) {
  return t !== void 0 ? this.mul(t) : void 0;
};
A.prototype.divmaybe = function(t) {
  return t !== void 0 ? this.div(t) : void 0;
};
A.prototype.addmaybe = function(t) {
  return t !== void 0 ? this.add(t) : void 0;
};
A.prototype.submaybe = function(t) {
  return t !== void 0 ? this.sub(t) : void 0;
};
A.prototype.show = function() {
  return this.s * this.n + "/" + this.d;
};
A.prototype.or = function(t) {
  return this.eq(0) ? t : this;
};
const h = (t) => A(t), Ge = (...t) => {
  if (t = nt(t), t.length !== 0)
    return t.reduce((e, n) => e.gcd(n), h(1));
}, U = (...t) => {
  if (t = nt(t), t.length === 0)
    return;
  const e = t.pop();
  return t.reduce(
    (n, s) => n === void 0 || s === void 0 ? void 0 : n.lcm(s),
    e
  );
};
h._original = A;
class T {
  constructor(e, n) {
    this.begin = h(e), this.end = h(n);
  }
  get spanCycles() {
    const e = [];
    var n = this.begin;
    const s = this.end, r = s.sam();
    if (n.equals(s))
      return [new T(n, s)];
    for (; s.gt(n); ) {
      if (n.sam().equals(r)) {
        e.push(new T(n, this.end));
        break;
      }
      const o = n.nextSam();
      e.push(new T(n, o)), n = o;
    }
    return e;
  }
  get duration() {
    return this.end.sub(this.begin);
  }
  cycleArc() {
    const e = this.begin.cyclePos(), n = e.add(this.duration);
    return new T(e, n);
  }
  withTime(e) {
    return new T(e(this.begin), e(this.end));
  }
  withEnd(e) {
    return new T(this.begin, e(this.end));
  }
  withCycle(e) {
    const n = this.begin.sam(), s = n.add(e(this.begin.sub(n))), r = n.add(e(this.end.sub(n)));
    return new T(s, r);
  }
  intersection(e) {
    const n = this.begin.max(e.begin), s = this.end.min(e.end);
    if (!n.gt(s) && !(n.equals(s) && (n.equals(this.end) && this.begin.lt(this.end) || n.equals(e.end) && e.begin.lt(e.end))))
      return new T(n, s);
  }
  intersection_e(e) {
    const n = this.intersection(e);
    if (n == null)
      throw "TimeSpans do not intersect";
    return n;
  }
  midpoint() {
    return this.begin.add(this.duration.div(h(2)));
  }
  equals(e) {
    return this.begin.equals(e.begin) && this.end.equals(e.end);
  }
  show() {
    return this.begin.show() + " → " + this.end.show();
  }
}
class S {
  /*
        Event class, representing a value active during the timespan
        'part'. This might be a fragment of an event, in which case the
        timespan will be smaller than the 'whole' timespan, otherwise the
        two timespans will be the same. The 'part' must never extend outside of the
        'whole'. If the event represents a continuously changing value
        then the whole will be returned as None, in which case the given
        value will have been sampled from the point halfway between the
        start and end of the 'part' timespan.
        The context is to store a list of source code locations causing the event.
  
        The word 'Event' is more or less a reserved word in javascript, hence this
        class is named called 'Hap'.
        */
  constructor(e, n, s, r = {}, o = !1) {
    this.whole = e, this.part = n, this.value = s, this.context = r, this.stateful = o, o && console.assert(typeof this.value == "function", "Stateful values must be functions");
  }
  get duration() {
    let e;
    return typeof this.value?.duration == "number" ? e = h(this.value.duration) : e = this.whole.end.sub(this.whole.begin), typeof this.value?.clip == "number" ? e.mul(this.value.clip) : e;
  }
  get endClipped() {
    return this.whole.begin.add(this.duration);
  }
  isActive(e) {
    return this.whole.begin <= e && this.endClipped >= e;
  }
  isInPast(e) {
    return e > this.endClipped;
  }
  isInNearPast(e, n) {
    return n - e <= this.endClipped;
  }
  isInFuture(e) {
    return e < this.whole.begin;
  }
  isInNearFuture(e, n) {
    return n < this.whole.begin && n > this.whole.begin - e;
  }
  isWithinTime(e, n) {
    return this.whole.begin <= n && this.endClipped >= e;
  }
  wholeOrPart() {
    return this.whole ? this.whole : this.part;
  }
  withSpan(e) {
    const n = this.whole ? e(this.whole) : void 0;
    return new S(n, e(this.part), this.value, this.context);
  }
  withValue(e) {
    return new S(this.whole, this.part, e(this.value), this.context);
  }
  hasOnset() {
    return this.whole != null && this.whole.begin.equals(this.part.begin);
  }
  hasTag(e) {
    return this.context.tags?.includes(e);
  }
  resolveState(e) {
    if (this.stateful && this.hasOnset()) {
      console.log("stateful");
      const n = this.value, [s, r] = n(e);
      return [s, new S(this.whole, this.part, r, this.context, !1)];
    }
    return [e, this];
  }
  spanEquals(e) {
    return this.whole == null && e.whole == null || this.whole.equals(e.whole);
  }
  equals(e) {
    return this.spanEquals(e) && this.part.equals(e.part) && // TODO would == be better ??
    this.value === e.value;
  }
  show(e = !1) {
    const n = typeof this.value == "object" ? e ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(this.value) : this.value;
    var s = "";
    if (this.whole == null)
      s = "~" + this.part.show;
    else {
      var r = this.whole.begin.equals(this.part.begin) && this.whole.end.equals(this.part.end);
      this.whole.begin.equals(this.part.begin) || (s = this.whole.begin.show() + " ⇜ "), r || (s += "("), s += this.part.show(), r || (s += ")"), this.whole.end.equals(this.part.end) || (s += " ⇝ " + this.whole.end.show());
    }
    return "[ " + s + " | " + n + " ]";
  }
  showWhole(e = !1) {
    return `${this.whole == null ? "~" : this.whole.show()}: ${typeof this.value == "object" ? e ? JSON.stringify(this.value).slice(1, -1).replaceAll('"', "").replaceAll(",", " ") : JSON.stringify(this.value) : this.value}`;
  }
  combineContext(e) {
    const n = this;
    return { ...n.context, ...e.context, locations: (n.context.locations || []).concat(e.context.locations || []) };
  }
  setContext(e) {
    return new S(this.whole, this.part, this.value, e);
  }
  ensureObjectValue() {
    if (typeof this.value != "object")
      throw new Error(
        `expected hap.value to be an object, but got "${this.value}". Hint: append .note() or .s() to the end`,
        "error"
      );
  }
}
class et {
  constructor(e, n = {}) {
    this.span = e, this.controls = n;
  }
  // Returns new State with different span
  setSpan(e) {
    return new et(e, this.controls);
  }
  withSpan(e) {
    return this.setSpan(e(this.span));
  }
  // Returns new State with different controls
  setControls(e) {
    return new et(this.span, e);
  }
}
function Qe(t, e, n) {
  if (e?.value !== void 0 && Object.keys(e).length === 1)
    return E("[warn]: Can't do arithmetic on control pattern."), t;
  const s = Object.keys(t).filter((r) => Object.keys(e).includes(r));
  return Object.assign({}, t, e, Object.fromEntries(s.map((r) => [r, n(t[r], e[r])])));
}
g((t, e) => t * e);
g((t, e) => e.map(t));
function Ue(t, e = 60) {
  let n = 0, s = h(0), r = [""], o = "";
  for (; r[0].length < e; ) {
    const i = t.queryArc(n, n + 1), u = i.filter((m) => m.hasOnset()).map((m) => m.duration), a = Ge(...u), p = a.inverse();
    r = r.map((m) => m + "|"), o += "|";
    for (let m = 0; m < p; m++) {
      const [y, _] = [s, s.add(a)], w = i.filter((B) => B.whole.begin.lte(y) && B.whole.end.gte(_)), b = w.length - r.length;
      b > 0 && (r = r.concat(Array(b).fill(o))), r = r.map((B, x) => {
        const I = w[x];
        if (I) {
          const z = I.whole.begin.eq(y) ? "" + I.value : "-";
          return B + z;
        }
        return B + ".";
      }), o += ".", s = s.add(a);
    }
    n++;
  }
  return r.join(`
`);
}
let ht, R = !0;
const Mu = function(t) {
  R = !!t;
}, Ju = (t) => ht = t;
class f {
  /**
   * Create a pattern. As an end user, you will most likely not create a Pattern directly.
   *
   * @param {function} query - The function that maps a `State` to an array of `Hap`.
   * @noAutocomplete
   */
  constructor(e, n = void 0) {
    this.query = e, this._Pattern = !0, this._steps = n;
  }
  get _steps() {
    return this.__steps;
  }
  set _steps(e) {
    this.__steps = e === void 0 ? void 0 : h(e);
  }
  setSteps(e) {
    return this._steps = e, this;
  }
  withSteps(e) {
    return R ? new f(this.query, this._steps === void 0 ? void 0 : e(this._steps)) : this;
  }
  get hasSteps() {
    return this._steps !== void 0;
  }
  //////////////////////////////////////////////////////////////////////
  // Haskell-style functor, applicative and monadic operations
  /**
   * Returns a new pattern, with the function applied to the value of
   * each hap. It has the alias `fmap`.
   * @synonyms fmap
   * @param {Function} func to to apply to the value
   * @returns Pattern
   * @example
   * "0 1 2".withValue(v => v + 10).log()
   */
  withValue(e) {
    const n = new f((s) => this.query(s).map((r) => r.withValue(e)));
    return n._steps = this._steps, n;
  }
  // runs func on query state
  withState(e) {
    return this.withHaps((n, s) => (e(s), n));
  }
  /**
   * see `withValue`
   * @noAutocomplete
   */
  fmap(e) {
    return this.withValue(e);
  }
  /**
   * Assumes 'this' is a pattern of functions, and given a function to
   * resolve wholes, applies a given pattern of values to that
   * pattern of functions.
   * @param {Function} whole_func
   * @param {Function} func
   * @noAutocomplete
   * @returns Pattern
   */
  appWhole(e, n) {
    const s = this, r = function(o) {
      const i = s.query(o), u = n.query(o), a = function(p, m) {
        const y = p.part.intersection(m.part);
        if (y != null)
          return new S(
            e(p.whole, m.whole),
            y,
            p.value(m.value),
            m.combineContext(p)
          );
      };
      return Q(
        i.map((p) => nt(u.map((m) => a(p, m))))
      );
    };
    return new f(r);
  }
  /**
   * When this method is called on a pattern of functions, it matches its haps
   * with those in the given pattern of values.  A new pattern is returned, with
   * each matching value applied to the corresponding function.
   *
   * In this `_appBoth` variant, where timespans of the function and value haps
   * are not the same but do intersect, the resulting hap has a timespan of the
   * intersection. This applies to both the part and the whole timespan.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appBoth(e) {
    const n = this, s = function(o, i) {
      if (!(o == null || i == null))
        return o.intersection_e(i);
    }, r = n.appWhole(s, e);
    return R && (r._steps = U(e._steps, n._steps)), r;
  }
  /**
   * As with `appBoth`, but the `whole` timespan is not the intersection,
   * but the timespan from the function of patterns that this method is called
   * on. In practice, this means that the pattern structure, including onsets,
   * are preserved from the pattern of functions (often referred to as the left
   * hand or inner pattern).
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appLeft(e) {
    const n = this, s = function(o) {
      const i = [];
      for (const u of n.query(o)) {
        const a = e.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m = u.whole, y = u.part.intersection(p.part);
          if (y) {
            const _ = u.value(p.value), w = p.combineContext(u), b = new S(m, y, _, w);
            i.push(b);
          }
        }
      }
      return i;
    }, r = new f(s);
    return r._steps = this._steps, r;
  }
  /**
   * As with `appLeft`, but `whole` timespans are instead taken from the
   * pattern of values, i.e. structure is preserved from the right hand/outer
   * pattern.
   * @param {Pattern} pat_val
   * @noAutocomplete
   * @returns Pattern
   */
  appRight(e) {
    const n = this, s = function(o) {
      const i = [];
      for (const u of e.query(o)) {
        const a = n.query(o.setSpan(u.wholeOrPart()));
        for (const p of a) {
          const m = u.whole, y = p.part.intersection(u.part);
          if (y) {
            const _ = p.value(u.value), w = u.combineContext(p), b = new S(m, y, _, w);
            i.push(b);
          }
        }
      }
      return i;
    }, r = new f(s);
    return r._steps = e._steps, r;
  }
  bindWhole(e, n) {
    const s = this, r = function(o) {
      const i = function(a, p) {
        return new S(
          e(a.whole, p.whole),
          p.part,
          p.value,
          Object.assign({}, a.context, p.context, {
            locations: (a.context.locations || []).concat(p.context.locations || [])
          })
        );
      }, u = function(a) {
        return n(a.value).query(o.setSpan(a.part)).map((p) => i(a, p));
      };
      return Q(s.query(o).map((a) => u(a)));
    };
    return new f(r);
  }
  bind(e) {
    const n = function(s, r) {
      if (!(s == null || r == null))
        return s.intersection_e(r);
    };
    return this.bindWhole(n, e);
  }
  join() {
    return this.bind(Z);
  }
  outerBind(e) {
    return this.bindWhole((n) => n, e).setSteps(this._steps);
  }
  outerJoin() {
    return this.outerBind(Z);
  }
  innerBind(e) {
    return this.bindWhole((n, s) => s, e);
  }
  innerJoin() {
    return this.innerBind(Z);
  }
  // Flatterns patterns of patterns, by retriggering/resetting inner patterns at onsets of outer pattern haps
  resetJoin(e = !1) {
    const n = this;
    return new f((s) => n.discreteOnly().query(s).map((r) => r.value.late(e ? r.whole.begin : r.whole.begin.cyclePos()).query(s).map(
      (o) => new S(
        // Supports continuous haps in the inner pattern
        o.whole ? o.whole.intersection(r.whole) : void 0,
        o.part.intersection(r.part),
        o.value
      ).setContext(r.combineContext(o))
    ).filter((o) => o.part)).flat());
  }
  restartJoin() {
    return this.resetJoin(!0);
  }
  // Like the other joins above, joins a pattern of patterns of values, into a flatter
  // pattern of values. In this case it takes whole cycles of the inner pattern to fit each event
  // in the outer pattern.
  squeezeJoin() {
    const e = this;
    function n(s) {
      const r = e.discreteOnly().query(s);
      function o(u) {
        const p = u.value._focusSpan(u.wholeOrPart()).query(s.setSpan(u.part));
        function m(y, _) {
          let w;
          if (_.whole && y.whole && (w = _.whole.intersection(y.whole), !w))
            return;
          const b = _.part.intersection(y.part);
          if (!b)
            return;
          const B = _.combineContext(y);
          return new S(w, b, _.value, B);
        }
        return p.map((y) => m(u, y));
      }
      return Q(r.map(o)).filter((u) => u);
    }
    return new f(n);
  }
  squeezeBind(e) {
    return this.fmap(e).squeezeJoin();
  }
  polyJoin = function() {
    const e = this;
    return e.fmap((n) => n.extend(e._steps.div(n._steps))).outerJoin();
  };
  polyBind(e) {
    return this.fmap(e).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // Utility methods mainly for internal use
  /**
   * Query haps inside the given time span.
   *
   * @param {Fraction | number} begin from time
   * @param {Fraction | number} end to time
   * @returns Hap[]
   * @example
   * const pattern = sequence('a', ['b', 'c'])
   * const haps = pattern.queryArc(0, 1)
   * console.log(haps)
   * silence
   * @noAutocomplete
   */
  queryArc(e, n, s = {}) {
    try {
      return this.query(new et(new T(e, n), s));
    } catch (r) {
      return E(`[query]: ${r.message}`, "error"), [];
    }
  }
  /**
   * Returns a new pattern, with queries split at cycle boundaries. This makes
   * some calculations easier to express, as all haps are then constrained to
   * happen within a cycle.
   * @returns Pattern
   * @noAutocomplete
   */
  splitQueries() {
    const e = this, n = (s) => Q(s.span.spanCycles.map((r) => e.query(s.setSpan(r))));
    return new f(n);
  }
  /**
   * Returns a new pattern, where the given function is applied to the query
   * timespan before passing it to the original pattern.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQuerySpan(e) {
    return new f((n) => this.query(n.withSpan(e)));
  }
  withQuerySpanMaybe(e) {
    const n = this;
    return new f((s) => {
      const r = s.withSpan(e);
      return r.span ? n.query(r) : [];
    });
  }
  /**
   * As with `withQuerySpan`, but the function is applied to both the
   * begin and end time of the query timespan.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withQueryTime(e) {
    return new f((n) => this.query(n.withSpan((s) => s.withTime(e))));
  }
  /**
   * Similar to `withQuerySpan`, but the function is applied to the timespans
   * of all haps returned by pattern queries (both `part` timespans, and where
   * present, `whole` timespans).
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHapSpan(e) {
    return new f((n) => this.query(n).map((s) => s.withSpan(e)));
  }
  /**
   * As with `withHapSpan`, but the function is applied to both the
   * begin and end time of the hap timespans.
   * @param {Function} func the function to apply
   * @returns Pattern
   * @noAutocomplete
   */
  withHapTime(e) {
    return this.withHapSpan((n) => n.withTime(e));
  }
  /**
   * Returns a new pattern with the given function applied to the list of haps returned by every query.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHaps(e) {
    const n = new f((s) => e(this.query(s), s));
    return n._steps = this._steps, n;
  }
  /**
   * As with `withHaps`, but applies the function to every hap, rather than every list of haps.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withHap(e) {
    return this.withHaps((n) => n.map(e));
  }
  /**
   * Returns a new pattern with the context field set to every hap set to the given value.
   * @param {*} context
   * @returns Pattern
   * @noAutocomplete
   */
  setContext(e) {
    return this.withHap((n) => n.setContext(e));
  }
  /**
   * Returns a new pattern with the given function applied to the context field of every hap.
   * @param {Function} func
   * @returns Pattern
   * @noAutocomplete
   */
  withContext(e) {
    const n = this.withHap((s) => s.setContext(e(s.context)));
    return this.__pure !== void 0 && (n.__pure = this.__pure, n.__pure_loc = this.__pure_loc), n;
  }
  /**
   * Returns a new pattern with the context field of every hap set to an empty object.
   * @returns Pattern
   * @noAutocomplete
   */
  stripContext() {
    return this.withHap((e) => e.setContext({}));
  }
  /**
   * Returns a new pattern with the given location information added to the
   * context of every hap.
   * @param {Number} start start offset
   * @param {Number} end end offset
   * @returns Pattern
   * @noAutocomplete
   */
  withLoc(e, n) {
    const s = {
      start: e,
      end: n
    }, r = this.withContext((o) => {
      const i = (o.locations || []).concat([s]);
      return { ...o, locations: i };
    });
    return this.__pure && (r.__pure = this.__pure, r.__pure_loc = s), r;
  }
  /**
   * Returns a new Pattern, which only returns haps that meet the given test.
   * @param {Function} hap_test - a function which returns false for haps to be removed from the pattern
   * @returns Pattern
   * @noAutocomplete
   */
  filterHaps(e) {
    return new f((n) => this.query(n).filter(e));
  }
  /**
   * As with `filterHaps`, but the function is applied to values
   * inside haps.
   * @param {Function} value_test
   * @returns Pattern
   * @noAutocomplete
   */
  filterValues(e) {
    return new f((n) => this.query(n).filter((s) => e(s.value))).setSteps(this._steps);
  }
  /**
   * Returns a new pattern, with haps containing undefined values removed from
   * query results.
   * @returns Pattern
   * @noAutocomplete
   */
  removeUndefineds() {
    return this.filterValues((e) => e != null);
  }
  /**
   * Returns a new pattern, with all haps without onsets filtered out. A hap
   * with an onset is one with a `whole` timespan that begins at the same time
   * as its `part` timespan.
   * @returns Pattern
   * @noAutocomplete
   */
  onsetsOnly() {
    return this.filterHaps((e) => e.hasOnset());
  }
  /**
   * Returns a new pattern, with 'continuous' haps (those without 'whole'
   * timespans) removed from query results.
   * @returns Pattern
   * @noAutocomplete
   */
  discreteOnly() {
    return this.filterHaps((e) => e.whole);
  }
  /**
   * Combines adjacent haps with the same value and whole.  Only
   * intended for use in tests.
   * @noAutocomplete
   */
  defragmentHaps() {
    return this.discreteOnly().withHaps((n) => {
      const s = [];
      for (var r = 0; r < n.length; ++r) {
        for (var o = !0, i = n[r]; o; ) {
          const p = JSON.stringify(n[r].value);
          for (var u = !1, a = r + 1; a < n.length; a++) {
            const m = n[a];
            if (i.whole.equals(m.whole)) {
              if (i.part.begin.eq(m.part.end)) {
                if (p === JSON.stringify(m.value)) {
                  i = new S(i.whole, new T(m.part.begin, i.part.end), i.value), n.splice(a, 1), u = !0;
                  break;
                }
              } else if (m.part.begin.eq(i.part.end) && p == JSON.stringify(m.value)) {
                i = new S(i.whole, new T(i.part.begin, m.part.end), i.value), n.splice(a, 1), u = !0;
                break;
              }
            }
          }
          o = u;
        }
        s.push(i);
      }
      return s;
    });
  }
  /**
   * Queries the pattern for the first cycle, returning Haps. Mainly of use when
   * debugging a pattern.
   * @param {Boolean} with_context - set to true, otherwise the context field
   * will be stripped from the resulting haps.
   * @returns [Hap]
   * @noAutocomplete
   */
  firstCycle(e = !1) {
    var n = this;
    return e || (n = n.stripContext()), n.query(new et(new T(h(0), h(1))));
  }
  /**
   * Accessor for a list of values returned by querying the first cycle.
   * @noAutocomplete
   */
  get firstCycleValues() {
    return this.firstCycle().map((e) => e.value);
  }
  /**
   * More human-readable version of the `firstCycleValues` accessor.
   * @noAutocomplete
   */
  get showFirstCycle() {
    return this.firstCycle().map(
      (e) => `${e.value}: ${e.whole.begin.toFraction()} - ${e.whole.end.toFraction()}`
    );
  }
  /**
   * Returns a new pattern, which returns haps sorted in temporal order. Mainly
   * of use when comparing two patterns for equality, in tests.
   * @returns Pattern
   * @noAutocomplete
   */
  sortHapsByPart() {
    return this.withHaps(
      (e) => e.sort(
        (n, s) => n.part.begin.sub(s.part.begin).or(n.part.end.sub(s.part.end)).or(n.whole.begin.sub(s.whole.begin).or(n.whole.end.sub(s.whole.end)))
      )
    );
  }
  asNumber() {
    return this.fmap(Ht);
  }
  //////////////////////////////////////////////////////////////////////
  // Operators - see 'make composers' later..
  _opIn(e, n) {
    return this.fmap(n).appLeft(d(e));
  }
  _opOut(e, n) {
    return this.fmap(n).appRight(d(e));
  }
  _opMix(e, n) {
    return this.fmap(n).appBoth(d(e));
  }
  _opSqueeze(e, n) {
    const s = d(e);
    return this.fmap((r) => s.fmap((o) => n(r)(o))).squeezeJoin();
  }
  _opSqueezeOut(e, n) {
    const s = this;
    return d(e).fmap((o) => s.fmap((i) => n(i)(o))).squeezeJoin();
  }
  _opReset(e, n) {
    return d(e).fmap((r) => this.fmap((o) => n(o)(r))).resetJoin();
  }
  _opRestart(e, n) {
    return d(e).fmap((r) => this.fmap((o) => n(o)(r))).restartJoin();
  }
  _opPoly(e, n) {
    const s = d(e);
    return this.fmap((r) => s.fmap((o) => n(o)(r))).polyJoin();
  }
  //////////////////////////////////////////////////////////////////////
  // End-user methods.
  // Those beginning with an underscore (_) are 'patternified',
  // i.e. versions are created without the underscore, that are
  // magically transformed to accept patterns for all their arguments.
  //////////////////////////////////////////////////////////////////////
  // Methods without corresponding toplevel functions
  /**
   * Layers the result of the given function(s). Like `superimpose`, but without the original pattern:
   * @name layer
   * @memberof Pattern
   * @synonyms apply
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .layer(x=>x.add("0,2"))
   *   .scale('C minor').note()
   */
  layer(...e) {
    return C(...e.map((n) => n(this)));
  }
  /**
   * Superimposes the result of the given function(s) on top of the original pattern:
   * @name superimpose
   * @memberof Pattern
   * @returns Pattern
   * @example
   * "<0 2 4 6 ~ 4 ~ 2 0!3 ~!5>*8"
   *   .superimpose(x=>x.add(2))
   *   .scale('C minor').note()
   */
  superimpose(...e) {
    return this.stack(...e.map((n) => n(this)));
  }
  //////////////////////////////////////////////////////////////////////
  // Multi-pattern functions
  stack(...e) {
    return C(this, ...e);
  }
  sequence(...e) {
    return V(this, ...e);
  }
  seq(...e) {
    return V(this, ...e);
  }
  cat(...e) {
    return sn(this, ...e);
  }
  fastcat(...e) {
    return W(this, ...e);
  }
  slowcat(...e) {
    return K(this, ...e);
  }
  //////////////////////////////////////////////////////////////////////
  // Context methods - ones that deal with metadata
  onTrigger(e, n = !0) {
    return this.withHap(
      (s) => s.setContext({
        ...s.context,
        onTrigger: (...r) => {
          s.context.onTrigger?.(...r), e(...r);
        },
        // if dominantTrigger is set to true, the default output (webaudio) will be disabled
        // when using multiple triggers, you cannot flip this flag to false again!
        // example: x.csound('CooLSynth').log() as well as x.log().csound('CooLSynth') should work the same
        dominantTrigger: s.context.dominantTrigger || n
      })
    );
  }
  log(e = (s, r) => `[hap] ${r.showWhole(!0)}`, n = (s, r) => ({ hap: r })) {
    return this.onTrigger((...s) => {
      E(e(...s), void 0, n(...s));
    }, !1);
  }
  logValues(e = Z) {
    return this.log((n, s) => e(s.value));
  }
  //////////////////////////////////////////////////////////////////////
  // Visualisation
  drawLine() {
    return console.log(Ue(this)), this;
  }
}
function Ke(t, e) {
  let n = [];
  return e.forEach((s) => {
    const r = n.findIndex(([o]) => t(s, o));
    r === -1 ? n.push([s]) : n[r].push(s);
  }), n;
}
const Xe = (t, e) => t.spanEquals(e);
f.prototype.collect = function() {
  return this.withHaps(
    (t) => Ke(Xe, t).map((e) => new S(e[0].whole, e[0].part, e, {}))
  );
};
f.prototype.arpWith = function(t) {
  return this.collect().fmap((e) => d(t(e))).innerJoin().withHap((e) => new S(e.whole, e.part, e.value.value, e.combineContext(e.value)));
};
f.prototype.arp = function(t) {
  return this.arpWith((e) => t.fmap((n) => e[n % e.length]));
};
function ot(t) {
  return !Array.isArray(t) && typeof t == "object";
}
function Ye(t, e, n) {
  return ot(t) || ot(e) ? (ot(t) || (t = { value: t }), ot(e) || (e = { value: e }), Qe(t, e, n)) : n(t, e);
}
(function() {
  const t = {
    set: [(n, s) => s],
    keep: [(n) => n],
    keepif: [(n, s) => s ? n : void 0],
    // numerical functions
    /**
     *
     * Assumes a pattern of numbers. Adds the given number to each item in the pattern.
     * @name add
     * @memberof Pattern
     * @example
     * // Here, the triad 0, 2, 4 is shifted by different amounts
     * n("0 2 4".add("<0 3 4 0>")).scale("C:major")
     * // Without add, the equivalent would be:
     * // n("<[0 2 4] [3 5 7] [4 6 8] [0 2 4]>").scale("C:major")
     * @example
     * // You can also use add with notes:
     * note("c3 e3 g3".add("<0 5 7 0>"))
     * // Behind the scenes, the notes are converted to midi numbers:
     * // note("48 52 55".add("<0 5 7 0>"))
     */
    add: [N((n, s) => n + s)],
    // support string concatenation
    /**
     *
     * Like add, but the given numbers are subtracted.
     * @name sub
     * @memberof Pattern
     * @example
     * n("0 2 4".sub("<0 1 2 3>")).scale("C4:minor")
     * // See add for more information.
     */
    sub: [N((n, s) => n - s)],
    /**
     *
     * Multiplies each number by the given factor.
     * @name mul
     * @memberof Pattern
     * @example
     * "<1 1.5 [1.66, <2 2.33>]>*4".mul(150).freq()
     */
    mul: [N((n, s) => n * s)],
    /**
     *
     * Divides each number by the given factor.
     * @name div
     * @memberof Pattern
     */
    div: [N((n, s) => n / s)],
    mod: [N(ut)],
    pow: [N(Math.pow)],
    log2: [N(Math.log2)],
    band: [N((n, s) => n & s)],
    bor: [N((n, s) => n | s)],
    bxor: [N((n, s) => n ^ s)],
    blshift: [N((n, s) => n << s)],
    brshift: [N((n, s) => n >> s)],
    // TODO - force numerical comparison if both look like numbers?
    lt: [(n, s) => n < s],
    gt: [(n, s) => n > s],
    lte: [(n, s) => n <= s],
    gte: [(n, s) => n >= s],
    eq: [(n, s) => n == s],
    eqt: [(n, s) => n === s],
    ne: [(n, s) => n != s],
    net: [(n, s) => n !== s],
    and: [(n, s) => n && s],
    or: [(n, s) => n || s],
    //  bitwise ops
    func: [(n, s) => s(n)]
  }, e = ["In", "Out", "Mix", "Squeeze", "SqueezeOut", "Reset", "Restart", "Poly"];
  for (const [n, [s, r]] of Object.entries(t)) {
    f.prototype["_" + n] = function(o) {
      return this.fmap((i) => s(i, o));
    }, Object.defineProperty(f.prototype, n, {
      // a getter that returns a function, so 'pat' can be
      // accessed by closures that are methods of that function..
      get: function() {
        const o = this, i = (...u) => o[n].in(...u);
        for (const u of e)
          i[u.toLowerCase()] = function(...a) {
            var p = o;
            a = V(a), r && (p = r(p), a = r(a));
            var m;
            return n === "keepif" ? (m = p["_op" + u](a, (y) => (_) => s(y, _)), m = m.removeUndefineds()) : m = p["_op" + u](a, (y) => (_) => Ye(y, _, s)), m;
          };
        return i.squeezein = i.squeeze, i;
      }
    });
    for (const o of e)
      f.prototype[o.toLowerCase()] = function(...i) {
        return this.set[o.toLowerCase()](i);
      };
  }
  f.prototype.struct = function(...n) {
    return this.keepif.out(...n);
  }, f.prototype.structAll = function(...n) {
    return this.keep.out(...n);
  }, f.prototype.mask = function(...n) {
    return this.keepif.in(...n);
  }, f.prototype.maskAll = function(...n) {
    return this.keep.in(...n);
  }, f.prototype.reset = function(...n) {
    return this.keepif.reset(...n);
  }, f.prototype.resetAll = function(...n) {
    return this.keep.reset(...n);
  }, f.prototype.restart = function(...n) {
    return this.keepif.restart(...n);
  }, f.prototype.restartAll = function(...n) {
    return this.keep.restart(...n);
  };
})();
const ju = C, Pu = C, Nu = kt, st = (t) => new f(() => [], t), q = st(1), $ = st(0);
function j(t) {
  function e(s) {
    return s.span.spanCycles.map((r) => new S(h(r.begin).wholeCycle(), r, t));
  }
  const n = new f(e, 1);
  return n.__pure = t, n;
}
function Dt(t) {
  return t instanceof f || t?._Pattern;
}
function d(t) {
  return Dt(t) ? t : ht && typeof t == "string" ? ht(t) : j(t);
}
function Ze(t) {
  let e = j([]);
  for (const n of t)
    e = e.bind((s) => n.fmap((r) => s.concat([r])));
  return e;
}
function C(...t) {
  t = t.map((s) => Array.isArray(s) ? V(...s) : d(s));
  const e = (s) => Q(t.map((r) => r.query(s))), n = new f(e);
  return R && (n._steps = U(...t.map((s) => s._steps))), n;
}
function bt(t, e) {
  if (e = e.map((o) => Array.isArray(o) ? V(...o) : d(o)), e.length === 0)
    return q;
  if (e.length === 1)
    return e[0];
  const [n, ...s] = e.map((o) => o._steps), r = R ? n.maximum(...s) : void 0;
  return C(...t(r, e));
}
function tn(...t) {
  return bt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : J(s, st(e.sub(s._steps)))),
    t
  );
}
function en(...t) {
  return bt(
    (e, n) => n.map((s) => s._steps.eq(e) ? s : J(st(e.sub(s._steps)), s)),
    t
  );
}
function nn(...t) {
  return bt(
    (e, n) => n.map((s) => {
      if (s._steps.eq(e))
        return s;
      const r = st(e.sub(s._steps).div(2));
      return J(r, s, r);
    }),
    t
  );
}
function $u(t, ...e) {
  const [n, ...s] = e.map((i) => i._steps), r = n.maximum(...s), o = {
    centre: nn,
    left: tn,
    right: en,
    expand: C,
    repeat: (...i) => kt(...i).steps(r)
  };
  return t.inhabit(o).fmap((i) => i(...e)).innerJoin().setSteps(r);
}
function K(...t) {
  if (t = t.map((s) => Array.isArray(s) ? W(...s) : d(s)), t.length == 1)
    return t[0];
  const e = function(s) {
    const r = s.span, o = ut(r.begin.sam(), t.length), i = t[o];
    if (!i)
      return [];
    const u = r.begin.floor().sub(r.begin.div(t.length).floor());
    return i.withHapTime((a) => a.add(u)).query(s.setSpan(r.withTime((a) => a.sub(u))));
  }, n = R ? U(...t.map((s) => s._steps)) : void 0;
  return new f(e).splitQueries().setSteps(n);
}
function Gt(...t) {
  t = t.map(d);
  const e = function(n) {
    const s = Math.floor(n.span.begin) % t.length;
    return t[s]?.query(n) || [];
  };
  return new f(e).splitQueries();
}
function sn(...t) {
  return K(...t);
}
function Ru(...t) {
  const e = t.reduce((n, [s]) => n + s, 0);
  return t = t.map(([n, s]) => [n, s.fast(n)]), J(...t).slow(e);
}
function Lu(...t) {
  let e = h(0);
  for (let n of t)
    n.length == 2 && n.unshift(e), e = n[1];
  return C(
    ...t.map(
      ([n, s, r]) => j(d(r)).compress(h(n).div(e), h(s).div(e))
    )
  ).slow(e).innerJoin();
}
function W(...t) {
  let e = K(...t);
  return t.length > 1 && (e = e._fast(t.length), e._steps = t.length), t.length == 1 && t[0].__steps_source && (t._steps = t[0]._steps), e;
}
function V(...t) {
  return W(...t);
}
function rn(...t) {
  return W(...t);
}
function dt(t) {
  return Array.isArray(t) ? t.length == 0 ? [q, 0] : t.length == 1 ? dt(t[0]) : [W(...t.map((e) => dt(e)[0])), t.length] : [d(t), 1];
}
const Wu = g((t, e) => d(e).mask(t)), Hu = g((t, e) => d(e).struct(t)), Iu = g((t, e) => d(e).superimpose(...t)), Fu = g((t, e) => d(e).withValue(t)), Vu = g((t, e) => d(e).bind(t)), Du = g((t, e) => d(e).innerBind(t)), Gu = g((t, e) => d(e).outerBind(t)), Qu = g((t, e) => d(e).squeezeBind(t)), Uu = g((t, e) => d(e).stepBind(t)), Ku = g((t, e) => d(e).polyBind(t)), Xu = g((t, e) => d(e).set(t)), Yu = g((t, e) => d(e).keep(t)), Zu = g((t, e) => d(e).keepif(t)), ta = g((t, e) => d(e).add(t)), ea = g((t, e) => d(e).sub(t)), na = g((t, e) => d(e).mul(t)), sa = g((t, e) => d(e).div(t)), ra = g((t, e) => d(e).mod(t)), oa = g((t, e) => d(e).pow(t)), ia = g((t, e) => d(e).band(t)), ca = g((t, e) => d(e).bor(t)), ua = g((t, e) => d(e).bxor(t)), aa = g((t, e) => d(e).blshift(t)), la = g((t, e) => d(e).brshift(t)), pa = g((t, e) => d(e).lt(t)), fa = g((t, e) => d(e).gt(t)), ha = g((t, e) => d(e).lte(t)), da = g((t, e) => d(e).gte(t)), ma = g((t, e) => d(e).eq(t)), ya = g((t, e) => d(e).eqt(t)), ga = g((t, e) => d(e).ne(t)), wa = g((t, e) => d(e).net(t)), ba = g((t, e) => d(e).and(t)), _a = g((t, e) => d(e).or(t)), va = g((t, e) => d(e).func(t));
function l(t, e, n = !0, s = !1, r = (o) => o.innerJoin()) {
  if (Array.isArray(t)) {
    const u = {};
    for (const a of t)
      u[a] = l(a, e, n, s, r);
    return u;
  }
  const o = e.length;
  var i;
  return n ? i = function(...u) {
    u = u.map(d);
    const a = u[u.length - 1];
    let p;
    if (o === 1)
      p = e(a);
    else {
      const m = u.slice(0, -1);
      if (m.every((y) => y.__pure != null)) {
        const y = m.map((w) => w.__pure), _ = m.filter((w) => w.__pure_loc).map((w) => w.__pure_loc);
        p = e(...y, a), p = p.withContext((w) => {
          const b = (w.locations || []).concat(_);
          return { ...w, locations: b };
        });
      } else {
        const [y, ..._] = m;
        let w = (...b) => e(...b, a);
        w = g(w, null, o - 1), p = r(_.reduce((b, B) => b.appLeft(B), y.fmap(w)));
      }
    }
    return s && (p._steps = a._steps), p;
  } : i = function(...u) {
    u = u.map(d);
    const a = e(...u);
    return s && (a._steps = u[u.length - 1]._steps), a;
  }, f.prototype[t] = function(...u) {
    if (o === 2 && u.length !== 1)
      u = [V(...u)];
    else if (o !== u.length + 1)
      throw new Error(`.${t}() expects ${o - 1} inputs but got ${u.length}.`);
    return u = u.map(d), i(...u, this);
  }, o > 1 && (f.prototype["_" + t] = function(...u) {
    const a = e(...u, this);
    return s && a.setSteps(this._steps), a;
  }), g(i, null, o);
}
function rt(t, e, n = !0, s = !1, r = (o) => o.stepJoin()) {
  return l(t, e, n, s, r);
}
const ka = l("round", function(t) {
  return t.asNumber().fmap((e) => Math.round(e));
}), qa = l("floor", function(t) {
  return t.asNumber().fmap((e) => Math.floor(e));
}), Aa = l("ceil", function(t) {
  return t.asNumber().fmap((e) => Math.ceil(e));
}), Sa = l("toBipolar", function(t) {
  return t.fmap((e) => e * 2 - 1);
}), Ta = l("fromBipolar", function(t) {
  return t.fmap((e) => (e + 1) / 2);
}), Ca = l("range", function(t, e, n) {
  return n.mul(e - t).add(t);
}), xa = l("rangex", function(t, e, n) {
  return n._range(Math.log(t), Math.log(e)).fmap(Math.exp);
}), Oa = l("range2", function(t, e, n) {
  return n.fromBipolar()._range(t, e);
}), Ba = l(
  "ratio",
  (t) => t.fmap((e) => Array.isArray(e) ? e.slice(1).reduce((n, s) => n / s, e[0]) : e)
), za = l("compress", function(t, e, n) {
  return t = h(t), e = h(e), t.gt(e) || t.gt(1) || e.gt(1) || t.lt(0) || e.lt(0) ? q : n._fastGap(h(1).div(e.sub(t)))._late(t);
}), { compressSpan: Ea, compressspan: Ma } = l(["compressSpan", "compressspan"], function(t, e) {
  return e._compress(t.begin, t.end);
}), { fastGap: Ja, fastgap: ja } = l(["fastGap", "fastgap"], function(t, e) {
  const n = function(r) {
    const o = r.begin.sam(), i = r.begin.sub(o).mul(t).min(1), u = r.end.sub(o).mul(t).min(1);
    if (!(i >= 1))
      return new T(o.add(i), o.add(u));
  }, s = function(r) {
    const o = r.part.begin, i = r.part.end, u = o.sam(), a = o.sub(u).div(t).min(1), p = i.sub(u).div(t).min(1), m = new T(u.add(a), u.add(p)), y = r.whole ? new T(
      m.begin.sub(o.sub(r.whole.begin).div(t)),
      m.end.add(r.whole.end.sub(i).div(t))
    ) : void 0;
    return new S(y, m, r.value, r.context);
  };
  return e.withQuerySpanMaybe(n).withHap(s).splitQueries();
}), Pa = l("focus", function(t, e, n) {
  return t = h(t), e = h(e), n._early(t.sam())._fast(h(1).div(e.sub(t)))._late(t);
}), { focusSpan: Na, focusspan: $a } = l(["focusSpan", "focusspan"], function(t, e) {
  return e._focus(t.begin, t.end);
}), Ra = l("ply", function(t, e) {
  const n = e.fmap((s) => j(s)._fast(t)).squeezeJoin();
  return R && (n._steps = h(t).mulmaybe(e._steps)), n;
}), { fast: La, density: Wa } = l(
  ["fast", "density"],
  function(t, e) {
    return t === 0 ? q : (t = h(t), e.withQueryTime((s) => s.mul(t)).withHapTime((s) => s.div(t)).setSteps(e._steps));
  },
  !0,
  !0
), Ha = l("hurry", function(t, e) {
  return e._fast(t).mul(j({ speed: t }));
}), { slow: Ia, sparsity: Fa } = l(["slow", "sparsity"], function(t, e) {
  return t === 0 ? q : e._fast(h(1).div(t));
}), Va = l("inside", function(t, e, n) {
  return e(n._slow(t))._fast(t);
}), Da = l("outside", function(t, e, n) {
  return e(n._fast(t))._slow(t);
}), Ga = l("lastOf", function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.push(e(n)), Gt(...s);
}), { firstOf: Qa, every: Ua } = l(["firstOf", "every"], function(t, e, n) {
  const s = Array(t - 1).fill(n);
  return s.unshift(e(n)), Gt(...s);
}), Ka = l("apply", function(t, e) {
  return t(e);
}), Xa = l("cpm", function(t, e) {
  return e._fast(t / 60 / 1);
}), Ya = l(
  "early",
  function(t, e) {
    return t = h(t), e.withQueryTime((n) => n.add(t)).withHapTime((n) => n.sub(t));
  },
  !0,
  !0
), on = l(
  "late",
  function(t, e) {
    return t = h(t), e._early(h(0).sub(t));
  },
  !0,
  !0
), Za = l("zoom", function(t, e, n) {
  if (e = h(e), t = h(t), t.gte(e))
    return $;
  const s = e.sub(t), r = R ? n._steps?.mulmaybe(s) : void 0;
  return n.withQuerySpan((o) => o.withCycle((i) => i.mul(s).add(t))).withHapSpan((o) => o.withCycle((i) => i.sub(t).div(s))).splitQueries().setSteps(r);
}), { zoomArc: tl, zoomarc: el } = l(["zoomArc", "zoomarc"], function(t, e) {
  return e.zoom(t.begin, t.end);
}), nl = l(
  "bite",
  (t, e, n) => e.fmap((s) => (r) => {
    const o = h(s).div(r).mod(1), i = o.add(h(1).div(r));
    return n.zoom(o, i);
  }).appLeft(t).squeezeJoin(),
  !1
), sl = l(
  "linger",
  function(t, e) {
    return t == 0 ? q : t < 0 ? e._zoom(t.add(1), 1)._slow(t) : e._zoom(0, t)._slow(t);
  },
  !0,
  !0
), { segment: rl, seg: ol } = l(["segment", "seg"], function(t, e) {
  return e.struct(j(!0)._fast(t)).setSteps(t);
}), il = l("swingBy", (t, e, n) => n.inside(e, on(rn(0, t / 2)))), cl = l("swing", (t, e) => e.swingBy(1 / 3, t)), { invert: ul, inv: al } = l(
  ["invert", "inv"],
  function(t) {
    return t.fmap((e) => !e);
  },
  !0,
  !0
), ll = l("when", function(t, e, n) {
  return t ? e(n) : n;
}), pl = l("off", function(t, e, n) {
  return C(n, e(n.late(t)));
}), fl = l("brak", function(t) {
  return t.when(K(!1, !0), (e) => W(e, q)._late(0.25));
}), cn = l(
  "rev",
  function(t) {
    const e = function(n) {
      const s = n.span, r = s.begin.sam(), o = s.begin.nextSam(), i = function(a) {
        const p = a.withTime((y) => r.add(o.sub(y))), m = p.begin;
        return p.begin = p.end, p.end = m, p;
      };
      return t.query(n.setSpan(i(s))).map((a) => a.withSpan(i));
    };
    return new f(e).splitQueries();
  },
  !1,
  !0
), hl = l("pressBy", function(t, e) {
  return e.fmap((n) => j(n).compress(t, 1)).squeezeJoin();
}), dl = l("press", function(t) {
  return t._pressBy(0.5);
});
f.prototype.hush = function() {
  return q;
};
const ml = l(
  "palindrome",
  function(t) {
    return t.lastOf(2, cn);
  },
  !0,
  !0
), { juxBy: yl, juxby: gl } = l(["juxBy", "juxby"], function(t, e, n) {
  t /= 2;
  const s = function(i, u, a) {
    return u in i ? i[u] : a;
  }, r = n.withValue((i) => Object.assign({}, i, { pan: s(i, "pan", 0.5) - t })), o = e(n.withValue((i) => Object.assign({}, i, { pan: s(i, "pan", 0.5) + t })));
  return C(r, o).setSteps(R ? U(r._steps, o._steps) : void 0);
}), wl = l("jux", function(t, e) {
  return e._juxBy(1, t, e);
}), { echoWith: bl, echowith: _l, stutWith: vl, stutwith: kl } = l(
  ["echoWith", "echowith", "stutWith", "stutwith"],
  function(t, e, n, s) {
    return C(...Wt(0, t - 1).map((r) => n(s.late(h(e).mul(r)), r)));
  }
), ql = l("echo", function(t, e, n, s) {
  return s._echoWith(t, e, (r, o) => r.gain(Math.pow(n, o)));
}), Al = l("stut", function(t, e, n, s) {
  return s._echoWith(t, n, (r, o) => r.gain(Math.pow(e, o)));
}), _t = function(t, e, n = !1) {
  return t = h(t), K(
    ...Wt(0, t.sub(1)).map(
      (s) => n ? e.late(h(s).div(t)) : e.early(h(s).div(t))
    )
  );
}, Sl = l(
  "iter",
  function(t, e) {
    return _t(t, e, !1);
  },
  !0,
  !0
), { iterBack: Tl, iterback: Cl } = l(
  ["iterBack", "iterback"],
  function(t, e) {
    return _t(t, e, !0);
  },
  !0,
  !0
), { repeatCycles: xl } = l(
  "repeatCycles",
  function(t, e) {
    return new f(function(n) {
      const s = n.span.begin.sam(), r = s.div(t).sam(), o = s.sub(r);
      return n = n.withSpan((i) => i.withTime((u) => u.sub(o))), e.query(n).map((i) => i.withSpan((u) => u.withTime((a) => a.add(o))));
    }).splitQueries();
  },
  !0,
  !0
), vt = function(t, e, n, s = !1, r = !1) {
  const o = Array(t - 1).fill(!1);
  o.unshift(!0);
  const i = _t(t, V(...o), !s);
  return r || (n = n.repeatCycles(t)), n.when(i, e);
}, { chunk: Ol, slowchunk: Bl, slowChunk: zl } = l(["chunk", "slowchunk", "slowChunk"], function(t, e, n) {
  return vt(t, e, n, !1, !1);
}), { chunkBack: El, chunkback: Ml } = l(["chunkBack", "chunkback"], function(t, e, n) {
  return vt(t, e, n, !0);
}), { fastchunk: Jl, fastChunk: jl } = l(["fastchunk", "fastChunk"], function(t, e, n) {
  return vt(t, e, n, !1, !0);
}), Pl = l(
  "bypass",
  function(t, e) {
    return t = !!parseInt(t), t ? q : e;
  },
  !0,
  !0
), { ribbon: Nl, rib: $l } = l(
  ["ribbon", "rib"],
  (t, e, n) => n.early(t).restart(j(1).slow(e))
), Rl = l("hsla", (t, e, n, s, r) => r.color(`hsla(${t}turn,${e * 100}%,${n * 100}%,${s})`)), Ll = l("hsl", (t, e, n, s) => s.color(`hsl(${t}turn,${e * 100}%,${n * 100}%)`));
f.prototype.tag = function(t) {
  return this.withContext((e) => ({ ...e, tags: (e.tags || []).concat([t]) }));
};
const Wl = l("filter", (t, e) => e.withHaps((n) => n.filter(t))), Hl = l("filterWhen", (t, e) => e.filter((n) => t(n.whole.begin))), Il = l(
  "within",
  (t, e, n, s) => C(
    n(s.filterWhen((r) => r.cyclePos() >= t && r.cyclePos() <= e)),
    s.filterWhen((r) => r.cyclePos() < t || r.cyclePos() > e)
  )
);
f.prototype.stepJoin = function() {
  const t = this, e = J(...jt(Pt(t.queryArc(0, 1))))._steps, n = function(s) {
    const o = t.early(s.span.begin.sam()).query(s.setSpan(new T(h(0), h(1))));
    return J(...jt(Pt(o))).query(s);
  };
  return new f(n, e);
};
f.prototype.stepBind = function(t) {
  return this.fmap(t).stepJoin();
};
function jt(t) {
  const e = t.filter((o, i) => i.hasSteps).reduce((o, i) => o.add(i), h(0)), n = nt(t.map((o, i) => i._steps)).reduce(
    (o, i) => o.add(i),
    h(0)
  ), s = e.eq(0) ? void 0 : n.div(e);
  function r(o, i) {
    return i._steps === void 0 ? [o.mulmaybe(s), i] : [i._steps, i];
  }
  return t.map((o) => r(...o));
}
function Pt(t) {
  const e = Q(t.map((r) => [r.part.begin, r.part.end])), n = Re([h(0), h(1), ...e]);
  return ze(n).map((r) => [
    r[1].sub(r[0]),
    C(...un(new T(...r), t).map((o) => o.value.withHap((i) => i.setContext(i.combineContext(o)))))
  ]);
}
function un(t, e) {
  return nt(e.map((n) => an(t, n)));
}
function an(t, e) {
  const n = t.intersection(e.part);
  if (n != null)
    return new S(e.whole, n, e.value, e.context);
}
const ln = l("pace", function(t, e) {
  return e._steps === void 0 ? e : e._steps.eq(h(0)) ? $ : e._fast(h(t).div(e._steps)).setSteps(t);
});
function pn(t, ...e) {
  const n = e.map((r) => dt(r));
  if (n.length == 0)
    return q;
  t == 0 && (t = n[0][1]);
  const s = [];
  for (const r of n)
    r[1] != 0 && (t == r[1] ? s.push(r[0]) : s.push(r[0]._fast(h(t).div(h(r[1])))));
  return C(...s);
}
function kt(...t) {
  if (Array.isArray(t[0]))
    return pn(0, ...t);
  if (t = t.filter((s) => s.hasSteps), t.length == 0)
    return q;
  const e = U(...t.map((s) => s._steps));
  if (e.eq(h(0)))
    return $;
  const n = C(...t.map((s) => s.pace(e)));
  return n._steps = e, n;
}
function J(...t) {
  if (t.length === 0)
    return $;
  const e = (i) => Array.isArray(i) ? i : [i._steps, i];
  if (t = t.map(e), t.find((i) => i[0] === void 0)) {
    const i = t.map((a) => a[0]).filter((a) => a !== void 0);
    if (i.length === 0)
      return W(...t.map((a) => a[1]));
    if (i.length === t.length)
      return $;
    const u = i.reduce((a, p) => a.add(p), h(0)).div(i.length);
    for (let a of t)
      a[0] === void 0 && (a[0] = u);
  }
  if (t.length == 1)
    return d(t[0][1]).withSteps((u) => t[0][0]);
  const n = t.map((i) => i[0]).reduce((i, u) => i.add(u), h(0));
  let s = h(0);
  const r = [];
  for (const [i, u] of t) {
    if (h(i).eq(0))
      continue;
    const a = s.add(i);
    r.push(d(u)._compress(s.div(n), a.div(n))), s = a;
  }
  const o = C(...r);
  return o._steps = n, o;
}
function fn(...t) {
  t = t.map((r) => Array.isArray(r) ? r.map(d) : [d(r)]);
  const e = U(...t.map((r) => h(r.length)));
  let n = [];
  for (let r = 0; r < e; ++r)
    n.push(...t.map((o) => o.length == 0 ? q : o[r % o.length]));
  n = n.filter((r) => r.hasSteps && r._steps > 0);
  const s = n.reduce((r, o) => r.add(o._steps), h(0));
  return n = J(...n), n._steps = s, n;
}
const hn = rt("take", function(t, e) {
  if (!e.hasSteps || e._steps.lte(0) || (t = h(t), t.eq(0)))
    return $;
  const n = t < 0;
  n && (t = t.abs());
  const s = t.div(e._steps);
  return s.lte(0) ? $ : s.gte(1) ? e : n ? e.zoom(h(1).sub(s), 1) : e.zoom(0, s);
}), dn = rt("drop", function(t, e) {
  return e.hasSteps ? (t = h(t), t.lt(0) ? e.take(e._steps.add(t)) : e.take(h(0).sub(e._steps.sub(t)))) : $;
}), mn = rt("extend", function(t, e) {
  return e.fast(t).expand(t);
}), yn = rt("expand", function(t, e) {
  return e.withSteps((n) => n.mul(h(t)));
}), gn = rt("contract", function(t, e) {
  return e.withSteps((n) => n.div(h(t)));
});
f.prototype.shrinklist = function(t) {
  const e = this;
  if (!e.hasSteps)
    return [e];
  let [n, s] = Array.isArray(t) ? t : [t, e._steps];
  if (n = h(n), s === 0 || n === 0)
    return [e];
  const r = n > 0, o = [];
  if (r) {
    const i = h(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = i.mul(u);
      if (a.gt(1))
        break;
      o.push([a, 1]);
    }
  } else {
    n = h(0).sub(n);
    const i = h(1).div(e._steps).mul(n);
    for (let u = 0; u < s; ++u) {
      const a = h(1).sub(i.mul(u));
      if (a.lt(0))
        break;
      o.push([h(0), a]);
    }
  }
  return o.map((i) => e.zoom(...i));
};
const wn = (t, e) => e.shrinklist(t), bn = l(
  "shrink",
  function(t, e) {
    if (!e.hasSteps)
      return $;
    const n = e.shrinklist(t), s = J(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), h(0)), s;
  },
  !0,
  !1,
  (t) => t.stepJoin()
), Fl = l(
  "grow",
  function(t, e) {
    if (!e.hasSteps)
      return $;
    const n = e.shrinklist(h(0).sub(t));
    n.reverse();
    const s = J(...n);
    return s._steps = n.reduce((r, o) => r.add(o._steps), h(0)), s;
  },
  !0,
  !1,
  (t) => t.stepJoin()
), _n = function(t, ...e) {
  return t.tour(...e);
};
f.prototype.tour = function(...t) {
  return J(
    ...[].concat(
      ...t.map((e, n) => [...t.slice(0, t.length - n), this, ...t.slice(t.length - n)]),
      this,
      ...t
    )
  );
};
const vn = function(...t) {
  t = t.filter((s) => s.hasSteps);
  const e = K(...t.map((s) => s._slow(s._steps))), n = U(...t.map((s) => s._steps));
  return e._fast(n).setSteps(n);
}, Vl = J, kn = J, Dl = J, Gl = fn, Ql = kt;
f.prototype.s_polymeter = f.prototype.polymeter;
const Ul = bn;
f.prototype.s_taper = f.prototype.shrink;
const Kl = wn;
f.prototype.s_taperlist = f.prototype.shrinklist;
const Xl = hn;
f.prototype.s_add = f.prototype.take;
const Yl = dn;
f.prototype.s_sub = f.prototype.drop;
const Zl = yn;
f.prototype.s_expand = f.prototype.expand;
const tp = mn;
f.prototype.s_extend = f.prototype.extend;
const ep = gn;
f.prototype.s_contract = f.prototype.contract;
const np = _n;
f.prototype.s_tour = f.prototype.tour;
const sp = vn;
f.prototype.s_zip = f.prototype.zip;
const rp = ln;
f.prototype.steps = f.prototype.pace;
const op = l("chop", function(t, e) {
  const s = Array.from({ length: t }, (i, u) => u).map((i) => ({ begin: i / t, end: (i + 1) / t })), r = function(i, u) {
    if ("begin" in i && "end" in i && i.begin !== void 0 && i.end !== void 0) {
      const a = i.end - i.begin;
      u = { begin: i.begin + u.begin * a, end: i.begin + u.end * a };
    }
    return Object.assign({}, i, u);
  }, o = function(i) {
    return V(s.map((u) => r(i, u)));
  };
  return e.squeezeBind(o).setSteps(R ? h(t).mulmaybe(e._steps) : void 0);
}), ip = l("striate", function(t, e) {
  const s = Array.from({ length: t }, (o, i) => i).map((o) => ({ begin: o / t, end: (o + 1) / t })), r = K(...s);
  return e.set(r)._fast(t).setSteps(R ? h(t).mulmaybe(e._steps) : void 0);
}), Qt = function(t, e, n = 0.5) {
  return e.speed(1 / t * n).unit("c").slow(t);
}, qn = l(
  "slice",
  function(t, e, n) {
    return t.innerBind(
      (s) => e.outerBind(
        (r) => n.outerBind((o) => {
          o = o instanceof Object ? o : { s: o };
          const i = Array.isArray(s) ? s[r] : r / s, u = Array.isArray(s) ? s[r + 1] : (r + 1) / s;
          return j({ begin: i, end: u, _slices: s, ...o });
        })
      )
    ).setSteps(e._steps);
  },
  !1
  // turns off auto-patternification
), cp = l(
  "splice",
  function(t, e, n) {
    const s = qn(t, e, n);
    return new f((r) => {
      const o = r.controls._cps || 1;
      return s.query(r).map(
        (u) => u.withValue((a) => ({
          speed: o / a._slices / u.whole.duration * (a.speed || 1),
          unit: "c",
          ...a
        }))
      );
    }).setSteps(e._steps);
  },
  !1
  // turns off auto-patternification
), { loopAt: up, loopat: ap } = l(["loopAt", "loopat"], function(t, e) {
  const n = e._steps ? e._steps.div(t) : void 0;
  return new f((s) => Qt(t, e, s.controls._cps).query(s), n);
}), lp = l(
  "fit",
  (t) => t.withHaps(
    (e, n) => e.map(
      (s) => s.withValue((r) => {
        const o = ("end" in r ? r.end : 1) - ("begin" in r ? r.begin : 0);
        return {
          ...r,
          speed: (n.controls._cps || 1) / s.whole.duration * o,
          unit: "c"
        };
      })
    )
  )
), { loopAtCps: pp, loopatcps: fp } = l(["loopAtCps", "loopatcps"], function(t, e, n) {
  return Qt(t, n, e);
}), hp = (t) => j(1).withValue(() => d(t())).innerJoin();
let Nt = (t) => t < 0.5 ? 1 : 1 - (t - 0.5) / 0.5, An = (t, e, n) => {
  e = d(e), t = d(t), n = d(n);
  let s = e.fmap((o) => ({ gain: Nt(o) })), r = e.fmap((o) => ({ gain: Nt(1 - o) }));
  return C(t.mul(s), n.mul(r));
};
f.prototype.xfade = function(t, e) {
  return An(this, t, e);
};
const Sn = (t) => (e, n, s) => {
  e = h(e).mod(n), n = h(n);
  const r = e.div(n), o = e.add(1).div(n);
  return t(s.fmap((i) => j(i)._compress(r, o)));
}, { beat: dp } = l(
  ["beat"],
  Sn((t) => t.innerJoin())
);
function qt(t) {
  let e = Array.isArray(t);
  t = e ? t : [t];
  const n = t[0], s = (i) => {
    let u;
    if (typeof i == "object" && i.value !== void 0 && (u = { ...i }, i = i.value, delete u.value), e && Array.isArray(i)) {
      const a = u || {};
      return i.forEach((p, m) => {
        m < t.length && (a[t[m]] = p);
      }), a;
    } else return u ? (u[n] = i, u) : { [n]: i };
  }, r = (...i) => V(...i).withValue(s), o = function(...i) {
    return i.length ? this.set(r(...i)) : this.fmap(s);
  };
  return f.prototype[n] = o, r;
}
const mt = /* @__PURE__ */ new Map();
function c(t, ...e) {
  const n = Array.isArray(t) ? t[0] : t;
  let s = {};
  return s[n] = qt(t), e.forEach((r) => {
    s[r] = s[n], mt.set(r, n), f.prototype[r] = f.prototype[n];
  }), s;
}
const { s: Tn, sound: Cn } = c(["s", "n", "gain"], "sound"), { source: xn, src: On } = c("source", "src"), { n: Bn } = c("n"), { note: zn } = c(["note", "n"]), { accelerate: En } = c("accelerate"), { velocity: Mn } = c("velocity"), { gain: Jn } = c("gain"), { postgain: jn } = c("postgain"), { amp: Pn } = c("amp"), { attack: Nn, att: $n } = c("attack", "att"), { fmh: Rn } = c(["fmh", "fmi"], "fmh"), { fmi: Ln, fm: Wn } = c(["fmi", "fmh"], "fm"), { fmenv: Hn } = c("fmenv"), { fmattack: In } = c("fmattack"), { fmdecay: Fn } = c("fmdecay"), { fmsustain: Vn } = c("fmsustain"), { fmrelease: Dn } = c("fmrelease"), { fmvelocity: Gn } = c("fmvelocity"), { bank: Qn } = c("bank"), { analyze: Un } = c("analyze"), { fft: Kn } = c("fft"), { decay: Xn, dec: Yn } = c("decay", "dec"), { sustain: Zn, sus: ts } = c("sustain", "sus"), { release: es, rel: ns } = c("release", "rel"), { hold: ss } = c("hold"), { bandf: rs, bpf: os, bp: is } = c(["bandf", "bandq", "bpenv"], "bpf", "bp"), { bandq: cs, bpq: us } = c("bandq", "bpq"), { begin: as } = c("begin"), { end: ls } = c("end"), { loop: ps } = c("loop"), { loopBegin: fs, loopb: hs } = c("loopBegin", "loopb"), { loopEnd: ds, loope: ms } = c("loopEnd", "loope"), { crush: ys } = c("crush"), { coarse: gs } = c("coarse"), { drive: ws } = c("drive"), { channels: bs, ch: _s } = c("channels", "ch"), { phaserrate: vs, ph: ks, phaser: qs } = c(
  ["phaserrate", "phaserdepth", "phasercenter", "phasersweep"],
  "ph",
  "phaser"
), { phasersweep: As, phs: Ss } = c("phasersweep", "phs"), { phasercenter: Ts, phc: Cs } = c("phasercenter", "phc"), { phaserdepth: xs, phd: Os, phasdp: Bs } = c("phaserdepth", "phd", "phasdp"), { channel: zs } = c("channel"), { cut: Es } = c("cut"), { cutoff: Ms, ctf: Js, lpf: js, lp: Ps } = c(["cutoff", "resonance", "lpenv"], "ctf", "lpf", "lp"), { lpenv: Ns, lpe: $s } = c("lpenv", "lpe"), { hpenv: Rs, hpe: Ls } = c("hpenv", "hpe"), { bpenv: Ws, bpe: Hs } = c("bpenv", "bpe"), { lpattack: Is, lpa: Fs } = c("lpattack", "lpa"), { hpattack: Vs, hpa: Ds } = c("hpattack", "hpa"), { bpattack: Gs, bpa: Qs } = c("bpattack", "bpa"), { lpdecay: Us, lpd: Ks } = c("lpdecay", "lpd"), { hpdecay: Xs, hpd: Ys } = c("hpdecay", "hpd"), { bpdecay: Zs, bpd: tr } = c("bpdecay", "bpd"), { lpsustain: er, lps: nr } = c("lpsustain", "lps"), { hpsustain: sr, hps: rr } = c("hpsustain", "hps"), { bpsustain: or, bps: ir } = c("bpsustain", "bps"), { lprelease: cr, lpr: ur } = c("lprelease", "lpr"), { hprelease: ar, hpr: lr } = c("hprelease", "hpr"), { bprelease: pr, bpr: fr } = c("bprelease", "bpr"), { ftype: hr } = c("ftype"), { fanchor: dr } = c("fanchor"), { vib: mr, vibrato: yr, v: gr } = c(["vib", "vibmod"], "vibrato", "v"), { noise: wr } = c("noise"), { vibmod: br, vmod: _r } = c(["vibmod", "vib"], "vmod"), { hcutoff: vr, hpf: kr, hp: qr } = c(["hcutoff", "hresonance", "hpenv"], "hpf", "hp"), { hresonance: Ar, hpq: Sr } = c("hresonance", "hpq"), { resonance: Tr, lpq: Cr } = c("resonance", "lpq"), { djf: xr } = c("djf"), { delay: Or } = c(["delay", "delaytime", "delayfeedback"]), { delayfeedback: Br, delayfb: zr, dfb: Er } = c("delayfeedback", "delayfb", "dfb"), { delaytime: Mr, delayt: Jr, dt: jr } = c("delaytime", "delayt", "dt"), { lock: Pr } = c("lock"), { detune: Nr, det: $r } = c("detune", "det"), { unison: Rr } = c("unison"), { spread: Lr } = c("spread"), { dry: Wr } = c("dry"), { fadeTime: Hr, fadeOutTime: Ir } = c("fadeTime", "fadeOutTime"), { fadeInTime: Fr } = c("fadeInTime"), { freq: Vr } = c("freq"), { pattack: Dr, patt: Gr } = c("pattack", "patt"), { pdecay: Qr, pdec: Ur } = c("pdecay", "pdec"), { psustain: Kr, psus: Xr } = c("psustain", "psus"), { prelease: Yr, prel: Zr } = c("prelease", "prel"), { penv: to } = c("penv"), { pcurve: eo } = c("pcurve"), { panchor: no } = c("panchor"), { gate: so, gat: ro } = c("gate", "gat"), { leslie: oo } = c("leslie"), { lrate: io } = c("lrate"), { lsize: co } = c("lsize"), { activeLabel: uo } = c("activeLabel"), { label: ao } = c(["label", "activeLabel"]), { degree: lo } = c("degree"), { mtranspose: po } = c("mtranspose"), { ctranspose: fo } = c("ctranspose"), { harmonic: ho } = c("harmonic"), { stepsPerOctave: mo } = c("stepsPerOctave"), { octaveR: yo } = c("octaveR"), { nudge: go } = c("nudge"), { octave: wo } = c("octave"), { orbit: bo } = c("orbit"), { overgain: _o } = c("overgain"), { overshape: vo } = c("overshape"), { pan: ko } = c("pan"), { panspan: qo } = c("panspan"), { pansplay: Ao } = c("pansplay"), { panwidth: So } = c("panwidth"), { panorient: To } = c("panorient"), { rate: Co } = c("rate"), { slide: xo } = c("slide"), { semitone: Oo } = c("semitone"), { voice: Bo } = c("voice"), { chord: zo } = c("chord"), { dictionary: Eo, dict: Mo } = c("dictionary", "dict"), { anchor: Jo } = c("anchor"), { offset: jo } = c("offset"), { octaves: Po } = c("octaves"), { mode: No } = c(["mode", "anchor"]), { room: $o } = c(["room", "size"]), { roomlp: Ro, rlp: Lo } = c("roomlp", "rlp"), { roomdim: Wo, rdim: Ho } = c("roomdim", "rdim"), { roomfade: Io, rfade: Fo } = c("roomfade", "rfade"), { ir: Vo, iresponse: Do } = c(["ir", "i"], "iresponse"), { roomsize: Go, size: Qo, sz: Uo, rsize: Ko } = c("roomsize", "size", "sz", "rsize"), { shape: Xo } = c(["shape", "shapevol"]), { distort: Yo, dist: Zo } = c(["distort", "distortvol"], "dist"), { compressor: ti } = c([
  "compressor",
  "compressorRatio",
  "compressorKnee",
  "compressorAttack",
  "compressorRelease"
]), { compressorKnee: ei } = c("compressorKnee"), { compressorRatio: ni } = c("compressorRatio"), { compressorAttack: si } = c("compressorAttack"), { compressorRelease: ri } = c("compressorRelease"), { speed: Ut } = c("speed"), { stretch: oi } = c("stretch"), { unit: ii } = c("unit"), { squiz: ci } = c("squiz"), { vowel: ui } = c("vowel"), { waveloss: ai } = c("waveloss"), { density: li } = c("density"), { expression: pi } = c("expression"), { sustainpedal: fi } = c("sustainpedal"), { tremolodepth: hi, tremdp: di } = c("tremolodepth", "tremdp"), { tremolorate: mi, tremr: yi } = c("tremolorate", "tremr"), { fshift: gi } = c("fshift"), { fshiftnote: wi } = c("fshiftnote"), { fshiftphase: bi } = c("fshiftphase"), { triode: _i } = c("triode"), { krush: vi } = c("krush"), { kcutoff: ki } = c("kcutoff"), { octer: qi } = c("octer"), { octersub: Ai } = c("octersub"), { octersubsub: Si } = c("octersubsub"), { ring: Ti } = c("ring"), { ringf: Ci } = c("ringf"), { ringdf: xi } = c("ringdf"), { freeze: Oi } = c("freeze"), { xsdelay: Bi } = c("xsdelay"), { tsdelay: zi } = c("tsdelay"), { real: Ei } = c("real"), { imag: Mi } = c("imag"), { enhance: Ji } = c("enhance"), { partials: ji } = c("partials"), { comb: Pi } = c("comb"), { smear: Ni } = c("smear"), { scram: $i } = c("scram"), { binshift: Ri } = c("binshift"), { hbrick: Li } = c("hbrick"), { lbrick: Wi } = c("lbrick"), { frameRate: Hi } = c("frameRate"), { frames: Ii } = c("frames"), { hours: Fi } = c("hours"), { minutes: Vi } = c("minutes"), { seconds: Di } = c("seconds"), { songPtr: Gi } = c("songPtr"), { uid: Qi } = c("uid"), { val: Ui } = c("val"), { cps: Ki } = c("cps"), { clip: Xi, legato: Yi } = c("clip", "legato"), { duration: Zi, dur: tc } = c("duration", "dur"), { zrand: ec } = c("zrand"), { curve: nc } = c("curve"), { deltaSlide: sc } = c("deltaSlide"), { pitchJump: rc } = c("pitchJump"), { pitchJumpTime: oc } = c("pitchJumpTime"), { lfo: ic, repeatTime: cc } = c("lfo", "repeatTime"), { znoise: uc } = c("znoise"), { zmod: ac } = c("zmod"), { zcrush: lc } = c("zcrush"), { zdelay: pc } = c("zdelay"), { tremolo: fc } = c("tremolo"), { zzfx: hc } = c("zzfx"), { color: dc, colour: mc } = c(["color", "colour"]);
let yc = (...t) => t.reduce((e, n) => Object.assign(e, { [n]: qt(n) }), {});
const gc = l("adsr", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s, r, o] = t;
  return e.set({ attack: n, decay: s, sustain: r, release: o });
}), wc = l("ad", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.attack(n).decay(s);
}), bc = l("ds", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = 0] = t;
  return e.set({ decay: n, sustain: s });
}), _c = l("ar", (t, e) => {
  t = Array.isArray(t) ? t : [t];
  const [n, s = n] = t;
  return e.set({ attack: n, release: s });
}), { midichan: vc } = c("midichan"), { midimap: kc } = c("midimap"), { midiport: qc } = c("midiport"), { midicmd: Ac } = c("midicmd"), Sc = l("control", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("control expects an array of [ccn, ccv]");
  const [n, s] = t;
  return e.ccn(n).ccv(s);
}), { ccn: Tc } = c("ccn"), { ccv: Cc } = c("ccv"), { ctlNum: xc } = c("ctlNum"), { nrpnn: Oc } = c("nrpnn"), { nrpv: Bc } = c("nrpv"), { progNum: zc } = c("progNum"), Ec = l("sysex", (t, e) => {
  if (!Array.isArray(t))
    throw new Error("sysex expects an array of [id, data]");
  const [n, s] = t;
  return e.sysexid(n).sysexdata(s);
}), { sysexid: Mc } = c("sysexid"), { sysexdata: Jc } = c("sysexdata"), { midibend: jc } = c("midibend"), { miditouch: Pc } = c("miditouch"), { polyTouch: Nc } = c("polyTouch"), Kt = (t) => mt.has(t) ? mt.get(t) : t, $c = l("as", (t, e) => (t = Array.isArray(t) ? t : [t], e.fmap((n) => (n = Array.isArray(n) ? n : [n], n = Object.fromEntries(t.map((s, r) => [Kt(s), n[r]])), n)))), Rc = l(
  "scrub",
  (t, e) => t.outerBind((n) => {
    Array.isArray(n) || (n = [n]);
    const [s, r = 1] = n;
    return e.begin(s).mul(Ut(r)).clip(1);
  }),
  !1
), mp = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  accelerate: En,
  activeLabel: uo,
  ad: wc,
  adsr: gc,
  amp: Pn,
  analyze: Un,
  anchor: Jo,
  ar: _c,
  as: $c,
  att: $n,
  attack: Nn,
  bandf: rs,
  bandq: cs,
  bank: Qn,
  begin: as,
  binshift: Ri,
  bp: is,
  bpa: Qs,
  bpattack: Gs,
  bpd: tr,
  bpdecay: Zs,
  bpe: Hs,
  bpenv: Ws,
  bpf: os,
  bpq: us,
  bpr: fr,
  bprelease: pr,
  bps: ir,
  bpsustain: or,
  ccn: Tc,
  ccv: Cc,
  ch: _s,
  channel: zs,
  channels: bs,
  chord: zo,
  clip: Xi,
  coarse: gs,
  color: dc,
  colour: mc,
  comb: Pi,
  compressor: ti,
  compressorAttack: si,
  compressorKnee: ei,
  compressorRatio: ni,
  compressorRelease: ri,
  control: Sc,
  cps: Ki,
  createParam: qt,
  createParams: yc,
  crush: ys,
  ctf: Js,
  ctlNum: xc,
  ctranspose: fo,
  curve: nc,
  cut: Es,
  cutoff: Ms,
  dec: Yn,
  decay: Xn,
  degree: lo,
  delay: Or,
  delayfb: zr,
  delayfeedback: Br,
  delayt: Jr,
  delaytime: Mr,
  deltaSlide: sc,
  density: li,
  det: $r,
  detune: Nr,
  dfb: Er,
  dict: Mo,
  dictionary: Eo,
  dist: Zo,
  distort: Yo,
  djf: xr,
  drive: ws,
  dry: Wr,
  ds: bc,
  dt: jr,
  dur: tc,
  duration: Zi,
  end: ls,
  enhance: Ji,
  expression: pi,
  fadeInTime: Fr,
  fadeOutTime: Ir,
  fadeTime: Hr,
  fanchor: dr,
  fft: Kn,
  fm: Wn,
  fmattack: In,
  fmdecay: Fn,
  fmenv: Hn,
  fmh: Rn,
  fmi: Ln,
  fmrelease: Dn,
  fmsustain: Vn,
  fmvelocity: Gn,
  frameRate: Hi,
  frames: Ii,
  freeze: Oi,
  freq: Vr,
  fshift: gi,
  fshiftnote: wi,
  fshiftphase: bi,
  ftype: hr,
  gain: Jn,
  gat: ro,
  gate: so,
  getControlName: Kt,
  harmonic: ho,
  hbrick: Li,
  hcutoff: vr,
  hold: ss,
  hours: Fi,
  hp: qr,
  hpa: Ds,
  hpattack: Vs,
  hpd: Ys,
  hpdecay: Xs,
  hpe: Ls,
  hpenv: Rs,
  hpf: kr,
  hpq: Sr,
  hpr: lr,
  hprelease: ar,
  hps: rr,
  hpsustain: sr,
  hresonance: Ar,
  imag: Mi,
  ir: Vo,
  iresponse: Do,
  kcutoff: ki,
  krush: vi,
  label: ao,
  lbrick: Wi,
  legato: Yi,
  leslie: oo,
  lfo: ic,
  lock: Pr,
  loop: ps,
  loopBegin: fs,
  loopEnd: ds,
  loopb: hs,
  loope: ms,
  lp: Ps,
  lpa: Fs,
  lpattack: Is,
  lpd: Ks,
  lpdecay: Us,
  lpe: $s,
  lpenv: Ns,
  lpf: js,
  lpq: Cr,
  lpr: ur,
  lprelease: cr,
  lps: nr,
  lpsustain: er,
  lrate: io,
  lsize: co,
  midibend: jc,
  midichan: vc,
  midicmd: Ac,
  midimap: kc,
  midiport: qc,
  miditouch: Pc,
  minutes: Vi,
  mode: No,
  mtranspose: po,
  n: Bn,
  noise: wr,
  note: zn,
  nrpnn: Oc,
  nrpv: Bc,
  nudge: go,
  octave: wo,
  octaveR: yo,
  octaves: Po,
  octer: qi,
  octersub: Ai,
  octersubsub: Si,
  offset: jo,
  orbit: bo,
  overgain: _o,
  overshape: vo,
  pan: ko,
  panchor: no,
  panorient: To,
  panspan: qo,
  pansplay: Ao,
  panwidth: So,
  partials: ji,
  patt: Gr,
  pattack: Dr,
  pcurve: eo,
  pdec: Ur,
  pdecay: Qr,
  penv: to,
  ph: ks,
  phasdp: Bs,
  phaser: qs,
  phasercenter: Ts,
  phaserdepth: xs,
  phaserrate: vs,
  phasersweep: As,
  phc: Cs,
  phd: Os,
  phs: Ss,
  pitchJump: rc,
  pitchJumpTime: oc,
  polyTouch: Nc,
  postgain: jn,
  prel: Zr,
  prelease: Yr,
  progNum: zc,
  psus: Xr,
  psustain: Kr,
  rate: Co,
  rdim: Ho,
  real: Ei,
  registerControl: c,
  rel: ns,
  release: es,
  repeatTime: cc,
  resonance: Tr,
  rfade: Fo,
  ring: Ti,
  ringdf: xi,
  ringf: Ci,
  rlp: Lo,
  room: $o,
  roomdim: Wo,
  roomfade: Io,
  roomlp: Ro,
  roomsize: Go,
  rsize: Ko,
  s: Tn,
  scram: $i,
  scrub: Rc,
  seconds: Di,
  semitone: Oo,
  shape: Xo,
  size: Qo,
  slide: xo,
  smear: Ni,
  songPtr: Gi,
  sound: Cn,
  source: xn,
  speed: Ut,
  spread: Lr,
  squiz: ci,
  src: On,
  stepsPerOctave: mo,
  stretch: oi,
  sus: ts,
  sustain: Zn,
  sustainpedal: fi,
  sysex: Ec,
  sysexdata: Jc,
  sysexid: Mc,
  sz: Uo,
  tremdp: di,
  tremolo: fc,
  tremolodepth: hi,
  tremolorate: mi,
  tremr: yi,
  triode: _i,
  tsdelay: zi,
  uid: Qi,
  unison: Rr,
  unit: ii,
  v: gr,
  val: Ui,
  velocity: Mn,
  vib: mr,
  vibmod: br,
  vibrato: yr,
  vmod: _r,
  voice: Bo,
  vowel: ui,
  waveloss: ai,
  xsdelay: Bi,
  zcrush: lc,
  zdelay: pc,
  zmod: ac,
  znoise: uc,
  zrand: ec,
  zzfx: hc
}, Symbol.toStringTag, { value: "Module" })), Lc = function(t, e) {
  const [n, s] = t, [r, o] = e, [i, u] = Ft(s, r);
  return [
    [s, n - s],
    [Vt((a, p) => a.concat(p), i, o), u]
  ];
}, Wc = function(t, e) {
  const [n, s] = t, [r, o] = e, [i, u] = Ft(n, o);
  return [
    [n, s - n],
    [Vt((p, m) => p.concat(m), r, i), u]
  ];
}, Xt = function(t, e) {
  const [n, s] = t;
  return Math.min(n, s) <= 1 ? [t, e] : Xt(...n > s ? Lc(t, e) : Wc(t, e));
}, Hc = function(t, e) {
  const n = t < 0;
  t = Math.abs(t);
  const s = e - t, r = Array(t).fill([1]), o = Array(s).fill([0]), i = Xt([t, s], [r, o]), u = Q(i[1][0]).concat(Q(i[1][1]));
  return n ? u.map((a) => a === 0 ? 1 : 0) : u;
}, At = function(t, e, n) {
  const s = Hc(t, e);
  return n ? xe(s, -n) : s;
}, yp = l("euclid", function(t, e, n) {
  return n.struct(At(t, e, 0));
}), { euclidrot: gp, euclidRot: wp } = l(["euclidrot", "euclidRot"], function(t, e, n, s) {
  return s.struct(At(t, e, n));
}), Yt = function(t, e, n, s) {
  if (t < 1)
    return q;
  const o = At(t, e, n).join("").split("1").slice(1).map((i) => [i.length + 1, !0]);
  return s.struct(kn(...o));
}, bp = l(["euclidLegato"], function(t, e, n) {
  return Yt(t, e, 0, n);
}), _p = l(["euclidLegatoRot"], function(t, e, n, s) {
  return Yt(t, e, n, s);
});
function Ic(t, e, n = 0.05, s = 0.1, r = 0.1, o = globalThis.setInterval, i = globalThis.clearInterval, u = !0) {
  let a = 0, p = 0, m = 10 ** 4, y = 0.01;
  const _ = (P) => n = P(n);
  r = r || s / 2;
  const w = () => {
    const P = t(), D = P + s + r;
    for (p === 0 && (p = P + y); p < D; )
      p = u ? Math.round(p * m) / m : p, e(p, n, a, P), p += n, a++;
  };
  let b;
  const B = () => {
    x(), w(), b = o(w, s * 1e3);
  }, x = () => {
    b !== void 0 && i(b), b = void 0;
  };
  return { setDuration: _, start: B, stop: () => {
    a = 0, p = 0, x();
  }, pause: () => x(), duration: n, interval: s, getPhase: () => p, minLatency: y };
}
function vp(t) {
  return new f((e) => [new S(void 0, e.span, t)]);
}
const H = (t) => {
  const e = (n) => [new S(void 0, n.span, t(n.span.begin))];
  return new f(e);
}, at = H((t) => t % 1), Zt = at.toBipolar(), St = H((t) => 1 - t % 1), te = St.toBipolar(), ee = H((t) => Math.sin(Math.PI * 2 * t)), Fc = ee.fromBipolar(), kp = Fc._early(h(1).div(4)), qp = ee._early(h(1).div(4)), Vc = H((t) => Math.floor(t * 2 % 2)), Ap = Vc.toBipolar(), Sp = W(at, St), Tp = W(Zt, te), Cp = W(St, at), xp = W(te, Zt), Dc = H(Z);
let Tt = 0, Ct = 0;
typeof window < "u" && document.addEventListener("mousemove", (t) => {
  Tt = t.clientY / document.body.clientHeight, Ct = t.clientX / document.body.clientWidth;
});
const Op = H(() => Tt), Bp = H(() => Tt), zp = H(() => Ct), Ep = H(() => Ct), ne = (t) => {
  const e = t << 13 ^ t, n = e >> 17 ^ e;
  return n << 5 ^ n;
}, Gc = (t) => t - Math.trunc(t), se = (t) => ne(Math.trunc(Gc(t / 300) * 536870912)), re = (t) => t % 536870912 / 536870912, yt = (t) => Math.abs(re(se(t))), Qc = (t, e) => {
  const n = [];
  for (let s = 0; s < e; ++s)
    n.push(re(t)), t = ne(t);
  return n;
}, Uc = (t, e) => Qc(se(t), e), Kc = (t) => at.range(0, t).round().segment(t), Mp = (t) => {
  const e = d(t).log2(0).floor().add(1);
  return Xc(t, e);
}, Xc = (t, e = 16) => {
  e = d(e);
  const n = Kc(e).mul(-1).add(e.sub(1));
  return d(t).segment(e).brshift(n).band(j(1));
}, Yc = (t) => H((e) => {
  const s = Uc(e.floor().add(0.5), t).map((o, i) => [o, i]).sort((o, i) => o[0] > i[0] - o[0] < i[0]).map((o) => o[1]), r = e.cyclePos().mul(t).floor() % t;
  return s[r];
})._segment(t), oe = (t, e, n) => {
  const s = [...Array(e).keys()].map((r) => n.zoom(h(r).div(e), h(r + 1).div(e)));
  return t.fmap((r) => s[r].repeatCycles(e)._fast(e)).innerJoin();
}, Jp = l("shuffle", (t, e) => oe(Yc(t), t, e)), jp = l("scramble", (t, e) => oe(ce(t)._segment(t), t, e)), L = H(yt), Pp = L.toBipolar(), ie = (t) => L.fmap((e) => e < t), Np = (t) => d(t).fmap(ie).innerJoin(), $p = ie(0.5), ce = (t) => L.fmap((e) => Math.trunc(e * t)), Rp = (t) => d(t).fmap(ce).innerJoin(), ue = (t, e) => (e = e.map(d), e.length == 0 ? q : t.range(0, e.length).fmap((n) => {
  const s = Math.min(Math.max(Math.floor(n), 0), e.length - 1);
  return e[s];
})), xt = (t, e) => ue(t, e).outerJoin(), Zc = (t, e) => ue(t, e).innerJoin(), Lp = (...t) => xt(L, t);
f.prototype.choose = function(...t) {
  return xt(this, t);
};
f.prototype.choose2 = function(...t) {
  return xt(this.fromBipolar(), t);
};
const tu = (...t) => Zc(L.segment(1), t), Wp = tu, ae = function(t, ...e) {
  const n = e.map((u) => d(u[0])), s = [];
  let r = j(0);
  for (const u of e)
    r = r.add(u[1]), s.push(r);
  const o = Ze(s), i = function(u) {
    const a = r.mul(u);
    return o.fmap((p) => (m) => n[p.findIndex((y) => y > m, p)]).appLeft(a);
  };
  return t.bind(i);
}, eu = (...t) => ae(...t).outerJoin(), Hp = (...t) => eu(L, ...t), nu = (...t) => ae(L.segment(1), ...t).innerJoin(), Ip = nu, su = (t) => {
  const e = t.fmap(Math.floor), n = t.fmap((o) => Math.floor(o) + 1), s = (o) => 6 * o ** 5 - 15 * o ** 4 + 10 * o ** 3, r = (o) => (i) => (u) => i + s(o) * (u - i);
  return t.sub(e).fmap(r).appBoth(e.fmap(yt)).appBoth(n.fmap(yt));
}, Fp = su(Dc.fmap((t) => Number(t))), Vp = l(
  "degradeByWith",
  (t, e, n) => n.fmap((s) => (r) => s).appLeft(t.filterValues((s) => s > e)),
  !0,
  !0
), Dp = l(
  "degradeBy",
  function(t, e) {
    return e._degradeByWith(L, t);
  },
  !0,
  !0
), Gp = l("degrade", (t) => t._degradeBy(0.5), !0, !0), Qp = l(
  "undegradeBy",
  function(t, e) {
    return e._degradeByWith(
      L.fmap((n) => 1 - n),
      t
    );
  },
  !0,
  !0
), Up = l("undegrade", (t) => t._undegradeBy(0.5), !0, !0), Kp = l("sometimesBy", function(t, e, n) {
  return d(t).fmap((s) => C(n._degradeBy(s), e(n._undegradeBy(1 - s)))).innerJoin();
}), Xp = l("sometimes", function(t, e) {
  return e._sometimesBy(0.5, t);
}), Yp = l("someCyclesBy", function(t, e, n) {
  return d(t).fmap(
    (s) => C(
      n._degradeByWith(L._segment(1), s),
      e(n._degradeByWith(L.fmap((r) => 1 - r)._segment(1), 1 - s))
    )
  ).innerJoin();
}), Zp = l("someCycles", function(t, e) {
  return e._someCyclesBy(0.5, t);
}), tf = l("often", function(t, e) {
  return e.sometimesBy(0.75, t);
}), ef = l("rarely", function(t, e) {
  return e.sometimesBy(0.25, t);
}), nf = l("almostNever", function(t, e) {
  return e.sometimesBy(0.1, t);
}), sf = l("almostAlways", function(t, e) {
  return e.sometimesBy(0.9, t);
}), rf = l("never", function(t, e) {
  return e;
}), of = l("always", function(t, e) {
  return t(e);
});
function le(t) {
  Array.isArray(t) === !1 && (t = [t]);
  const e = De();
  return t.every((n) => {
    const s = Ve.get(n) ?? n;
    return e[s];
  });
}
const cf = l("whenKey", function(t, e, n) {
  return n.when(le(t), e);
}), uf = l("keyDown", function(t) {
  return t.fmap(le);
}), F = function(t, e, n = !0) {
  const s = Array.isArray(t), r = Object.keys(t).length;
  return t = He(t, d), r === 0 ? q : e.fmap((o) => {
    let i = o;
    return s && (i = n ? Math.round(i) % r : Ee(Math.round(i), 0, t.length - 1)), t[i];
  });
}, ru = function(t, e) {
  return Array.isArray(e) && ([e, t] = [t, e]), ou(t, e);
}, ou = l("pick", function(t, e) {
  return F(t, e, !1).innerJoin();
}), iu = l("pickmod", function(t, e) {
  return F(t, e, !0).innerJoin();
}), af = l("pickF", function(t, e, n) {
  return n.apply(ru(t, e));
}), lf = l("pickmodF", function(t, e, n) {
  return n.apply(iu(t, e));
}), pf = l("pickOut", function(t, e) {
  return F(t, e, !1).outerJoin();
}), ff = l("pickmodOut", function(t, e) {
  return F(t, e, !0).outerJoin();
}), hf = l("pickRestart", function(t, e) {
  return F(t, e, !1).restartJoin();
}), df = l("pickmodRestart", function(t, e) {
  return F(t, e, !0).restartJoin();
}), mf = l("pickReset", function(t, e) {
  return F(t, e, !1).resetJoin();
}), yf = l("pickmodReset", function(t, e) {
  return F(t, e, !0).resetJoin();
}), { inhabit: gf, pickSqueeze: wf } = l(["inhabit", "pickSqueeze"], function(t, e) {
  return F(t, e, !1).squeezeJoin();
}), { inhabitmod: bf, pickmodSqueeze: _f } = l(["inhabitmod", "pickmodSqueeze"], function(t, e) {
  return F(t, e, !0).squeezeJoin();
}), vf = (t, e) => (e = e.map(d), e.length == 0 ? q : t.fmap((n) => {
  const s = ut(Math.round(n), e.length);
  return e[s];
}).squeezeJoin());
let it;
try {
  it = window?.speechSynthesis;
} catch {
  console.warn("cannot use window: not in browser?");
}
let $t = it?.getVoices();
function cu(t, e, n) {
  it.cancel();
  const s = new SpeechSynthesisUtterance(t);
  s.lang = e, $t = it.getVoices();
  const r = $t.filter((o) => o.lang.includes(e));
  typeof n == "number" ? s.voice = r[n % r.length] : typeof n == "string" && (s.voice = r.find((o) => o.name === o)), speechSynthesis.speak(s);
}
const kf = l("speak", function(t, e, n) {
  return n.onTrigger((s, r) => {
    cu(r.value, t, e);
  });
}), uu = async (...t) => {
  const e = await Promise.allSettled(t), n = e.filter((s) => s.status === "fulfilled").map((s) => s.value);
  return e.forEach((s, r) => {
    s.status === "rejected" && console.warn(`evalScope: module with index ${r} could not be loaded:`, s.reason);
  }), n.forEach((s) => {
    Object.entries(s).forEach(([r, o]) => {
      globalThis[r] = o;
    });
  }), n;
};
function au(t, e = {}) {
  const { wrapExpression: n = !0, wrapAsync: s = !0 } = e;
  n && (t = `{${t}}`), s && (t = `(async ()=>${t})()`);
  const r = `"use strict";return (${t})`;
  return Function(r)();
}
const lu = async (t, e, n) => {
  let s = {};
  if (e) {
    const i = e(t, n);
    t = i.output, s = i;
  }
  return { mode: "javascript", pattern: await au(t, { wrapExpression: !!e }), meta: s };
};
class pu {
  constructor({ onTrigger: e, onToggle: n, getTime: s }) {
    this.started = !1, this.cps = 0.5, this.lastTick = 0, this.getTime = s, this.time_at_last_tick_message = 0, this.collator = new Ie({ getTargetClockTime: s }), this.onToggle = n, this.latency = 0.1, this.cycle = 0, this.id = Math.round(Date.now() * Math.random()), this.worker = new SharedWorker(new URL(
      /* @vite-ignore */
      "" + new URL("assets/clockworker-ZDiUtESR.js", import.meta.url).href,
      import.meta.url
    )), this.worker.port.start(), this.channel = new BroadcastChannel("strudeltick");
    const r = (i) => {
      const { cps: u, begin: a, end: p, cycle: m, time: y } = i;
      this.cps = u, this.cycle = m;
      const _ = this.collator.calculateOffset(y) + y;
      o(a, p, _), this.time_at_last_tick_message = _;
    }, o = (i, u, a) => {
      if (this.started === !1)
        return;
      this.pattern.queryArc(i, u, { _cps: this.cps }).forEach((m) => {
        if (m.hasOnset()) {
          const _ = Jt(m.whole.begin - this.cycle, this.cps) + a + this.latency, w = Jt(m.duration, this.cps);
          e?.(m, 0, w, this.cps, _);
        }
      });
    };
    this.channel.onmessage = (i) => {
      if (!this.started)
        return;
      const { payload: u, type: a } = i.data;
      switch (a) {
        case "tick":
          r(u);
      }
    };
  }
  sendMessage(e, n) {
    this.worker.port.postMessage({ type: e, payload: n, id: this.id });
  }
  now() {
    const e = (this.getTime() - this.time_at_last_tick_message) * this.cps;
    return this.cycle + e;
  }
  setCps(e = 1) {
    this.sendMessage("cpschange", { cps: e });
  }
  setCycle(e) {
    this.sendMessage("setcycle", { cycle: e });
  }
  setStarted(e) {
    this.sendMessage("toggle", { started: e }), this.started = e, this.onToggle?.(e);
  }
  start() {
    E("[cyclist] start"), this.setStarted(!0);
  }
  stop() {
    E("[cyclist] stop"), this.collator.reset(), this.setStarted(!1);
  }
  setPattern(e, n = !1) {
    this.pattern = e, n && !this.started && this.start();
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
}
class fu {
  constructor({
    interval: e,
    onTrigger: n,
    onToggle: s,
    onError: r,
    getTime: o,
    latency: i = 0.1,
    setInterval: u,
    clearInterval: a,
    beforeStart: p
  }) {
    this.started = !1, this.beforeStart = p, this.cps = 0.5, this.num_ticks_since_cps_change = 0, this.lastTick = 0, this.lastBegin = 0, this.lastEnd = 0, this.getTime = o, this.num_cycles_at_cps_change = 0, this.seconds_at_cps_change, this.onToggle = s, this.latency = i, this.clock = Ic(
      o,
      // called slightly before each cycle
      (m, y, _, w) => {
        this.num_ticks_since_cps_change === 0 && (this.num_cycles_at_cps_change = this.lastEnd, this.seconds_at_cps_change = m), this.num_ticks_since_cps_change++;
        const B = this.num_ticks_since_cps_change * y * this.cps;
        try {
          const x = this.lastEnd;
          this.lastBegin = x;
          const I = this.num_cycles_at_cps_change + B;
          if (this.lastEnd = I, this.lastTick = m, m < w) {
            console.log("skip query: too late");
            return;
          }
          this.pattern.queryArc(x, I, { _cps: this.cps }).forEach((z) => {
            if (z.hasOnset()) {
              const P = (z.whole.begin - this.num_cycles_at_cps_change) / this.cps + this.seconds_at_cps_change + i, D = z.duration / this.cps, G = P - m;
              n?.(z, G, D, this.cps, P), z.value.cps !== void 0 && this.cps != z.value.cps && (this.cps = z.value.cps, this.num_ticks_since_cps_change = 0);
            }
          });
        } catch (x) {
          E(`[cyclist] error: ${x.message}`), r?.(x);
        }
      },
      e,
      // duration of each cycle
      0.1,
      0.1,
      u,
      a
    );
  }
  now() {
    if (!this.started)
      return 0;
    const e = this.getTime() - this.lastTick - this.clock.duration;
    return this.lastBegin + e * this.cps;
  }
  setStarted(e) {
    this.started = e, this.onToggle?.(e);
  }
  async start() {
    if (await this.beforeStart?.(), this.num_ticks_since_cps_change = 0, this.num_cycles_at_cps_change = 0, !this.pattern)
      throw new Error("Scheduler: no pattern set! call .setPattern first.");
    E("[cyclist] start"), this.clock.start(), this.setStarted(!0);
  }
  pause() {
    E("[cyclist] pause"), this.clock.pause(), this.setStarted(!1);
  }
  stop() {
    E("[cyclist] stop"), this.clock.stop(), this.lastEnd = 0, this.setStarted(!1);
  }
  async setPattern(e, n = !1) {
    this.pattern = e, n && !this.started && await this.start();
  }
  setCps(e = 0.5) {
    this.cps !== e && (this.cps = e, this.num_ticks_since_cps_change = 0);
  }
  log(e, n, s) {
    const r = s.filter((o) => o.hasOnset());
    console.log(`${e.toFixed(4)} - ${n.toFixed(4)} ${Array(r.length).fill("I").join("")}`);
  }
}
let gt;
function qf() {
  if (!gt)
    throw new Error("no time set! use setTime to define a time source");
  return gt();
}
function Rt(t) {
  gt = t;
}
function Af({
  defaultOutput: t,
  onEvalError: e,
  beforeEval: n,
  beforeStart: s,
  afterEval: r,
  getTime: o,
  transpiler: i,
  onToggle: u,
  editPattern: a,
  onUpdateState: p,
  sync: m = !1,
  setInterval: y,
  clearInterval: _,
  id: w
}) {
  const b = {
    schedulerError: void 0,
    evalError: void 0,
    code: "// LOADING",
    activeCode: "// LOADING",
    pattern: void 0,
    miniLocations: [],
    widgets: [],
    pending: !1,
    started: !1
  }, B = {
    id: w
  }, x = (v) => {
    Object.assign(b, v), b.isDirty = b.code !== b.activeCode, b.error = b.evalError || b.schedulerError, p?.(b);
  }, I = {
    onTrigger: hu({ defaultOutput: t, getTime: o }),
    getTime: o,
    onToggle: (v) => {
      x({ started: v }), u?.(v);
    },
    setInterval: y,
    clearInterval: _,
    beforeStart: s
  }, M = m && typeof SharedWorker < "u" ? new pu(I) : new fu(I);
  let z = {}, P = 0, D, G;
  const Ot = function() {
    return z = {}, P = 0, D = void 0, G = void 0, q;
  }, Bt = async (v, k = !0) => (v = a?.(v) || v, await M.setPattern(v, k), v);
  Rt(() => M.now());
  const pe = () => M.stop(), fe = () => M.start(), he = () => M.pause(), de = () => M.toggle(), lt = (v) => M.setCps(v), zt = (v) => M.setCps(v / 60), me = function(v) {
    return D = v, q;
  }, ye = function(v) {
    return G = v, q;
  }, ge = () => {
    f.prototype.p = function(k) {
      return typeof k == "string" && (k.startsWith("_") || k.endsWith("_")) ? q : (k === "$" && (k = `$${P}`, P++), z[k] = this, this);
    }, f.prototype.q = function(k) {
      return q;
    };
    try {
      for (let k = 1; k < 10; ++k)
        Object.defineProperty(f.prototype, `d${k}`, {
          get() {
            return this.p(k);
          },
          configurable: !0
        }), Object.defineProperty(f.prototype, `p${k}`, {
          get() {
            return this.p(k);
          },
          configurable: !0
        }), f.prototype[`q${k}`] = q;
    } catch (k) {
      console.warn("injectPatternMethods: error:", k);
    }
    const v = l("cpm", function(k, pt) {
      return pt._fast(k / 60 / M.cps);
    });
    return uu({
      all: me,
      each: ye,
      hush: Ot,
      cpm: v,
      setCps: lt,
      setcps: lt,
      setCpm: zt,
      setcpm: zt
    });
  };
  return { scheduler: M, evaluate: async (v, k = !0, pt = !0) => {
    if (!v)
      throw new Error("no code to evaluate");
    try {
      x({ code: v, pending: !0 }), await ge(), Rt(() => M.now()), await n?.({ code: v }), pt && Ot();
      let { pattern: O, meta: ft } = await lu(v, i, B);
      if (Object.keys(z).length) {
        let X = Object.values(z);
        G && (X = X.map((we) => G(we))), O = C(...X);
      } else G && (O = G(O));
      if (D && (O = D(O)), !Dt(O)) {
        const X = `got "${typeof evaluated}" instead of pattern`;
        throw new Error(X + (typeof evaluated == "function" ? ", did you forget to call a function?" : "."));
      }
      return E("[eval] code updated"), O = await Bt(O, k), x({
        miniLocations: ft?.miniLocations || [],
        widgets: ft?.widgets || [],
        activeCode: v,
        pattern: O,
        evalError: void 0,
        schedulerError: void 0,
        pending: !1
      }), r?.({ code: v, pattern: O, meta: ft }), O;
    } catch (O) {
      E(`[eval] error: ${O.message}`, "error"), console.error(O), x({ evalError: O, pending: !1 }), e?.(O);
    }
  }, start: fe, stop: pe, pause: he, setCps: lt, setPattern: Bt, setCode: (v) => x({ code: v }), toggle: de, state: b };
}
const hu = ({ getTime: t, defaultOutput: e }) => async (n, s, r, o, i) => {
  try {
    (!n.context.onTrigger || !n.context.dominantTrigger) && await e(n, s, r, o, i), n.context.onTrigger && await n.context.onTrigger(t() + s, n, t(), o, i);
  } catch (u) {
    E(`[cyclist] error: ${u.message}`, "error");
  }
}, Sf = function(t, e = {}) {
  const n = document.getElementById("code"), s = "background-image:url(" + t + ");background-size:contain;";
  n.style = s;
  const { className: r } = n, o = (a, p) => {
    ({
      style: () => n.style = s + ";" + p,
      className: () => n.className = p + " " + r
    })[a]();
  }, i = Object.entries(e).filter(([a, p]) => typeof p == "function");
  Object.entries(e).filter(([a, p]) => typeof p == "string").forEach(([a, p]) => o(a, p)), i.length;
}, Tf = () => {
  const t = document.getElementById("code");
  t && (t.style = "");
};
E("🌀 @strudel/core loaded 🌀");
globalThis._strudelLoaded && console.warn(
  `@strudel/core was loaded more than once...
This might happen when you have multiple versions of strudel installed. 
Please check with "npm ls @strudel/core".`
);
globalThis._strudelLoaded = !0;
export {
  Ie as ClockCollator,
  fu as Cyclist,
  h as Fraction,
  S as Hap,
  f as Pattern,
  et as State,
  T as TimeSpan,
  ue as __chooseWith,
  ie as _brandBy,
  un as _fitslice,
  ce as _irand,
  le as _keyDown,
  an as _match,
  ut as _mod,
  pn as _polymeterListSteps,
  jt as _retime,
  Pt as _slices,
  En as accelerate,
  uo as activeLabel,
  wc as ad,
  ta as add,
  gc as adsr,
  sf as almostAlways,
  nf as almostNever,
  of as always,
  Pn as amp,
  Un as analyze,
  Jo as anchor,
  ba as and,
  Ka as apply,
  _c as ar,
  Ru as arrange,
  $c as as,
  $n as att,
  Nn as attack,
  Te as averageArray,
  Sf as backgroundImage,
  ia as band,
  rs as bandf,
  cs as bandq,
  Qn as bank,
  We as base64ToUnicode,
  dp as beat,
  as as begin,
  Mp as binary,
  Xc as binaryN,
  Vu as bind,
  Ri as binshift,
  nl as bite,
  Hc as bjork,
  aa as blshift,
  ca as bor,
  is as bp,
  Qs as bpa,
  Gs as bpattack,
  tr as bpd,
  Zs as bpdecay,
  Hs as bpe,
  Ws as bpenv,
  os as bpf,
  us as bpq,
  fr as bpr,
  pr as bprelease,
  ir as bps,
  or as bpsustain,
  fl as brak,
  $p as brand,
  Np as brandBy,
  la as brshift,
  ua as bxor,
  Pl as bypass,
  Mu as calculateSteps,
  sn as cat,
  Tc as ccn,
  Cc as ccv,
  Aa as ceil,
  _s as ch,
  zs as channel,
  bs as channels,
  Lp as choose,
  tu as chooseCycles,
  Zc as chooseInWith,
  xt as chooseWith,
  op as chop,
  zo as chord,
  Ol as chunk,
  El as chunkBack,
  Ml as chunkback,
  Ee as clamp,
  Tf as cleanupUi,
  Xi as clip,
  gs as coarse,
  Bu as code2hash,
  dc as color,
  mc as colour,
  Pi as comb,
  Au as compose,
  za as compress,
  Ea as compressSpan,
  ti as compressor,
  si as compressorAttack,
  ei as compressorKnee,
  ni as compressorRatio,
  ri as compressorRelease,
  Ma as compressspan,
  Su as constant,
  gn as contract,
  Sc as control,
  mp as controls,
  kp as cosine,
  qp as cosine2,
  Xa as cpm,
  Ki as cps,
  Ic as createClock,
  qt as createParam,
  yc as createParams,
  ys as crush,
  Js as ctf,
  xc as ctlNum,
  fo as ctranspose,
  g as curry,
  nc as curve,
  Es as cut,
  Ms as cutoff,
  Jt as cycleToSeconds,
  Yn as dec,
  Xn as decay,
  Gp as degrade,
  Dp as degradeBy,
  Vp as degradeByWith,
  lo as degree,
  Or as delay,
  zr as delayfb,
  Br as delayfeedback,
  Jr as delayt,
  Mr as delaytime,
  sc as deltaSlide,
  $r as det,
  Nr as detune,
  Er as dfb,
  Mo as dict,
  Eo as dictionary,
  Zo as dist,
  Yo as distort,
  sa as div,
  xr as djf,
  Ue as drawLine,
  ws as drive,
  dn as drop,
  Wr as dry,
  bc as ds,
  jr as dt,
  tc as dur,
  Zi as duration,
  Ya as early,
  ql as echo,
  bl as echoWith,
  _l as echowith,
  ls as end,
  Ji as enhance,
  ma as eq,
  ya as eqt,
  yp as euclid,
  bp as euclidLegato,
  _p as euclidLegatoRot,
  wp as euclidRot,
  gp as euclidrot,
  uu as evalScope,
  lu as evaluate,
  Ua as every,
  yn as expand,
  pi as expression,
  mn as extend,
  Fr as fadeInTime,
  Ir as fadeOutTime,
  Hr as fadeTime,
  dr as fanchor,
  La as fast,
  jl as fastChunk,
  Ja as fastGap,
  W as fastcat,
  Jl as fastchunk,
  ja as fastgap,
  Kn as fft,
  Wl as filter,
  Hl as filterWhen,
  Qa as firstOf,
  lp as fit,
  Q as flatten,
  qa as floor,
  Wn as fm,
  In as fmattack,
  Fn as fmdecay,
  Hn as fmenv,
  Rn as fmh,
  Ln as fmi,
  Dn as fmrelease,
  Vn as fmsustain,
  Gn as fmvelocity,
  Pa as focus,
  Na as focusSpan,
  $a as focusspan,
  Tu as fractionalArgs,
  Hi as frameRate,
  Ii as frames,
  Oi as freeze,
  Vr as freq,
  qe as freqToMidi,
  Ta as fromBipolar,
  gi as fshift,
  wi as fshiftnote,
  bi as fshiftphase,
  hr as ftype,
  va as func,
  Jn as gain,
  st as gap,
  ro as gat,
  so as gate,
  Kt as getControlName,
  De as getCurrentKeyboardState,
  bu as getEventOffsetMs,
  Ae as getFreq,
  qu as getFrequency,
  Eu as getPerformanceTimeSeconds,
  ku as getPlayableNoteValue,
  vu as getSoundIndex,
  qf as getTime,
  hu as getTrigger,
  Fl as grow,
  fa as gt,
  da as gte,
  ho as harmonic,
  zu as hash2code,
  Li as hbrick,
  vr as hcutoff,
  ss as hold,
  Fi as hours,
  qr as hp,
  Ds as hpa,
  Vs as hpattack,
  Ys as hpd,
  Xs as hpdecay,
  Ls as hpe,
  Rs as hpenv,
  kr as hpf,
  Sr as hpq,
  lr as hpr,
  ar as hprelease,
  rr as hps,
  sr as hpsustain,
  Ar as hresonance,
  Ll as hsl,
  Rl as hsla,
  Ha as hurry,
  Z as id,
  Mi as imag,
  gf as inhabit,
  bf as inhabitmod,
  Du as innerBind,
  Va as inside,
  al as inv,
  ul as invert,
  Vo as ir,
  Rp as irand,
  Do as iresponse,
  wt as isNote,
  gu as isNoteWithOctave,
  Dt as isPattern,
  St as isaw,
  te as isaw2,
  Sl as iter,
  Tl as iterBack,
  Cl as iterback,
  Cp as itri,
  xp as itri2,
  wl as jux,
  yl as juxBy,
  gl as juxby,
  ki as kcutoff,
  Yu as keep,
  Zu as keepif,
  Ve as keyAlias,
  uf as keyDown,
  vi as krush,
  ao as label,
  Ga as lastOf,
  on as late,
  Wi as lbrick,
  Yi as legato,
  oo as leslie,
  ic as lfo,
  sl as linger,
  Wt as listRange,
  Pr as lock,
  Lt as logKey,
  E as logger,
  ps as loop,
  up as loopAt,
  pp as loopAtCps,
  fs as loopBegin,
  ds as loopEnd,
  ap as loopat,
  fp as loopatcps,
  hs as loopb,
  ms as loope,
  Ps as lp,
  Fs as lpa,
  Is as lpattack,
  Ks as lpd,
  Us as lpdecay,
  $s as lpe,
  Ns as lpenv,
  js as lpf,
  Cr as lpq,
  ur as lpr,
  cr as lprelease,
  nr as lps,
  er as lpsustain,
  io as lrate,
  co as lsize,
  pa as lt,
  ha as lte,
  It as mapArgs,
  Wu as mask,
  _u as midi2note,
  tt as midiToFreq,
  jc as midibend,
  vc as midichan,
  Ac as midicmd,
  kc as midimap,
  qc as midiport,
  Pc as miditouch,
  Vi as minutes,
  ra as mod,
  No as mode,
  Ep as mouseX,
  Bp as mouseY,
  zp as mousex,
  Op as mousey,
  po as mtranspose,
  na as mul,
  Bn as n,
  Ce as nanFallback,
  ga as ne,
  wa as net,
  rf as never,
  wr as noise,
  zn as note,
  ct as noteToMidi,
  $ as nothing,
  Oc as nrpnn,
  Bc as nrpv,
  go as nudge,
  N as numeralArgs,
  He as objectMap,
  wo as octave,
  yo as octaveR,
  Po as octaves,
  qi as octer,
  Ai as octersub,
  Si as octersubsub,
  pl as off,
  jo as offset,
  tf as often,
  _a as or,
  bo as orbit,
  Gu as outerBind,
  Da as outside,
  _o as overgain,
  vo as overshape,
  ln as pace,
  ze as pairs,
  ml as palindrome,
  ko as pan,
  no as panchor,
  To as panorient,
  qo as panspan,
  Ao as pansplay,
  So as panwidth,
  Be as parseFractional,
  Ht as parseNumeral,
  ji as partials,
  Gr as patt,
  Dr as pattack,
  eo as pcurve,
  Ur as pdec,
  Qr as pdecay,
  to as penv,
  Fp as perlin,
  su as perlinWith,
  ks as ph,
  Bs as phasdp,
  qs as phaser,
  Ts as phasercenter,
  xs as phaserdepth,
  vs as phaserrate,
  As as phasersweep,
  Cs as phc,
  Os as phd,
  Ss as phs,
  ru as pick,
  af as pickF,
  pf as pickOut,
  mf as pickReset,
  hf as pickRestart,
  wf as pickSqueeze,
  iu as pickmod,
  lf as pickmodF,
  ff as pickmodOut,
  yf as pickmodReset,
  df as pickmodRestart,
  _f as pickmodSqueeze,
  Oe as pipe,
  rc as pitchJump,
  oc as pitchJumpTime,
  Ra as ply,
  Nu as pm,
  Ku as polyBind,
  Nc as polyTouch,
  kt as polymeter,
  ju as polyrhythm,
  jn as postgain,
  oa as pow,
  Pu as pr,
  Zr as prel,
  Yr as prelease,
  dl as press,
  hl as pressBy,
  zc as progNum,
  Xr as psus,
  Kr as psustain,
  j as pure,
  L as rand,
  Pp as rand2,
  Wp as randcat,
  Yc as randrun,
  Ca as range,
  Oa as range2,
  xa as rangex,
  ef as rarely,
  Co as rate,
  Ba as ratio,
  Ho as rdim,
  Ei as real,
  hp as ref,
  l as register,
  c as registerControl,
  d as reify,
  ns as rel,
  es as release,
  nt as removeUndefineds,
  xl as repeatCycles,
  cc as repeatTime,
  Af as repl,
  Tr as resonance,
  cn as rev,
  Fo as rfade,
  $l as rib,
  Nl as ribbon,
  Ti as ring,
  xi as ringdf,
  Ci as ringf,
  Lo as rlp,
  $o as room,
  Wo as roomdim,
  Io as roomfade,
  Ro as roomlp,
  Go as roomsize,
  xe as rotate,
  ka as round,
  Ko as rsize,
  Kc as run,
  Tn as s,
  Xl as s_add,
  Gl as s_alt,
  Dl as s_cat,
  ep as s_contract,
  Zl as s_expand,
  tp as s_extend,
  Ql as s_polymeter,
  Yl as s_sub,
  Ul as s_taper,
  Kl as s_taperlist,
  np as s_tour,
  sp as s_zip,
  at as saw,
  Zt as saw2,
  $i as scram,
  jp as scramble,
  Rc as scrub,
  Di as seconds,
  ol as seg,
  rl as segment,
  Oo as semitone,
  rn as seq,
  Lu as seqPLoop,
  V as sequence,
  Ze as sequenceP,
  Xu as set,
  Ju as setStringParser,
  Rt as setTime,
  Xo as shape,
  bn as shrink,
  wn as shrinklist,
  Jp as shuffle,
  H as signal,
  q as silence,
  Fc as sine,
  ee as sine2,
  Qo as size,
  qn as slice,
  xo as slide,
  Ia as slow,
  zl as slowChunk,
  K as slowcat,
  Gt as slowcatPrime,
  Bl as slowchunk,
  Ni as smear,
  Cu as sol2note,
  Zp as someCycles,
  Yp as someCyclesBy,
  Xp as sometimes,
  Kp as sometimesBy,
  Gi as songPtr,
  Cn as sound,
  xn as source,
  Fa as sparsity,
  kf as speak,
  Ut as speed,
  cp as splice,
  Ft as splitAt,
  Lr as spread,
  Vc as square,
  Ap as square2,
  vf as squeeze,
  Qu as squeezeBind,
  ci as squiz,
  On as src,
  C as stack,
  $u as stackBy,
  nn as stackCentre,
  tn as stackLeft,
  en as stackRight,
  vp as steady,
  Uu as stepBind,
  fn as stepalt,
  J as stepcat,
  rp as steps,
  mo as stepsPerOctave,
  oi as stretch,
  ip as striate,
  Hu as struct,
  Al as stut,
  vl as stutWith,
  kl as stutwith,
  ea as sub,
  Iu as superimpose,
  ts as sus,
  Zn as sustain,
  fi as sustainpedal,
  cl as swing,
  il as swingBy,
  Ec as sysex,
  Jc as sysexdata,
  Mc as sysexid,
  Uo as sz,
  hn as take,
  Dc as time,
  kn as timeCat,
  Vl as timecat,
  Sa as toBipolar,
  _e as tokenizeNote,
  _n as tour,
  di as tremdp,
  fc as tremolo,
  hi as tremolodepth,
  mi as tremolorate,
  yi as tremr,
  Sp as tri,
  Tp as tri2,
  _i as triode,
  zi as tsdelay,
  Qi as uid,
  Up as undegrade,
  Qp as undegradeBy,
  Le as unicodeToBase64,
  xu as uniq,
  Ou as uniqsort,
  Re as uniqsortr,
  Rr as unison,
  ii as unit,
  gr as v,
  Ui as val,
  wu as valueToMidi,
  Mn as velocity,
  mr as vib,
  br as vibmod,
  yr as vibrato,
  _r as vmod,
  Bo as voice,
  ui as vowel,
  ai as waveloss,
  Hp as wchoose,
  nu as wchooseCycles,
  ll as when,
  cf as whenKey,
  Fu as withValue,
  Il as within,
  Ip as wrandcat,
  An as xfade,
  Bi as xsdelay,
  lc as zcrush,
  pc as zdelay,
  vn as zip,
  Vt as zipWith,
  ac as zmod,
  uc as znoise,
  Za as zoom,
  tl as zoomArc,
  el as zoomarc,
  ec as zrand,
  hc as zzfx
};
